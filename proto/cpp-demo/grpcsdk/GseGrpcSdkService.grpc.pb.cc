// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GseGrpcSdkService.proto

#include "GseGrpcSdkService.pb.h"
#include "GseGrpcSdkService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tencentcloud {
namespace gse {
namespace grpcsdk {

static const char* GseGrpcSdkService_method_names[] = {
  "/tencentcloud.gse.grpcsdk.GseGrpcSdkService/ProcessReady",
  "/tencentcloud.gse.grpcsdk.GseGrpcSdkService/ActivateGameServerSession",
  "/tencentcloud.gse.grpcsdk.GseGrpcSdkService/AcceptPlayerSession",
  "/tencentcloud.gse.grpcsdk.GseGrpcSdkService/RemovePlayerSession",
  "/tencentcloud.gse.grpcsdk.GseGrpcSdkService/DescribePlayerSessions",
  "/tencentcloud.gse.grpcsdk.GseGrpcSdkService/UpdatePlayerSessionCreationPolicy",
  "/tencentcloud.gse.grpcsdk.GseGrpcSdkService/TerminateGameServerSession",
  "/tencentcloud.gse.grpcsdk.GseGrpcSdkService/ProcessEnding",
  "/tencentcloud.gse.grpcsdk.GseGrpcSdkService/ReportCustomData",
};

std::unique_ptr< GseGrpcSdkService::Stub> GseGrpcSdkService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GseGrpcSdkService::Stub> stub(new GseGrpcSdkService::Stub(channel));
  return stub;
}

GseGrpcSdkService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ProcessReady_(GseGrpcSdkService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ActivateGameServerSession_(GseGrpcSdkService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AcceptPlayerSession_(GseGrpcSdkService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePlayerSession_(GseGrpcSdkService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DescribePlayerSessions_(GseGrpcSdkService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdatePlayerSessionCreationPolicy_(GseGrpcSdkService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TerminateGameServerSession_(GseGrpcSdkService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProcessEnding_(GseGrpcSdkService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReportCustomData_(GseGrpcSdkService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GseGrpcSdkService::Stub::ProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ProcessReady_, context, request, response);
}

void GseGrpcSdkService::Stub::experimental_async::ProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ProcessReady_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::ProcessReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ProcessReady_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::ProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ProcessReady_, context, request, response, reactor);
}

void GseGrpcSdkService::Stub::experimental_async::ProcessReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ProcessReady_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::AsyncProcessReadyRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_ProcessReady_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::PrepareAsyncProcessReadyRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_ProcessReady_, context, request, false);
}

::grpc::Status GseGrpcSdkService::Stub::ActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ActivateGameServerSession_, context, request, response);
}

void GseGrpcSdkService::Stub::experimental_async::ActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ActivateGameServerSession_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::ActivateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ActivateGameServerSession_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::ActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ActivateGameServerSession_, context, request, response, reactor);
}

void GseGrpcSdkService::Stub::experimental_async::ActivateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ActivateGameServerSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::AsyncActivateGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_ActivateGameServerSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::PrepareAsyncActivateGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_ActivateGameServerSession_, context, request, false);
}

::grpc::Status GseGrpcSdkService::Stub::AcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AcceptPlayerSession_, context, request, response);
}

void GseGrpcSdkService::Stub::experimental_async::AcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AcceptPlayerSession_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::AcceptPlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AcceptPlayerSession_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::AcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AcceptPlayerSession_, context, request, response, reactor);
}

void GseGrpcSdkService::Stub::experimental_async::AcceptPlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AcceptPlayerSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::AsyncAcceptPlayerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_AcceptPlayerSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::PrepareAsyncAcceptPlayerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_AcceptPlayerSession_, context, request, false);
}

::grpc::Status GseGrpcSdkService::Stub::RemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemovePlayerSession_, context, request, response);
}

void GseGrpcSdkService::Stub::experimental_async::RemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemovePlayerSession_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::RemovePlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemovePlayerSession_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::RemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemovePlayerSession_, context, request, response, reactor);
}

void GseGrpcSdkService::Stub::experimental_async::RemovePlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemovePlayerSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::AsyncRemovePlayerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_RemovePlayerSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::PrepareAsyncRemovePlayerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_RemovePlayerSession_, context, request, false);
}

::grpc::Status GseGrpcSdkService::Stub::DescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest& request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DescribePlayerSessions_, context, request, response);
}

void GseGrpcSdkService::Stub::experimental_async::DescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribePlayerSessions_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::DescribePlayerSessions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribePlayerSessions_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::DescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribePlayerSessions_, context, request, response, reactor);
}

void GseGrpcSdkService::Stub::experimental_async::DescribePlayerSessions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribePlayerSessions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>* GseGrpcSdkService::Stub::AsyncDescribePlayerSessionsRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>::Create(channel_.get(), cq, rpcmethod_DescribePlayerSessions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>* GseGrpcSdkService::Stub::PrepareAsyncDescribePlayerSessionsRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>::Create(channel_.get(), cq, rpcmethod_DescribePlayerSessions_, context, request, false);
}

::grpc::Status GseGrpcSdkService::Stub::UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdatePlayerSessionCreationPolicy_, context, request, response);
}

void GseGrpcSdkService::Stub::experimental_async::UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdatePlayerSessionCreationPolicy_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdatePlayerSessionCreationPolicy_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdatePlayerSessionCreationPolicy_, context, request, response, reactor);
}

void GseGrpcSdkService::Stub::experimental_async::UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdatePlayerSessionCreationPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::AsyncUpdatePlayerSessionCreationPolicyRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_UpdatePlayerSessionCreationPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::PrepareAsyncUpdatePlayerSessionCreationPolicyRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_UpdatePlayerSessionCreationPolicy_, context, request, false);
}

::grpc::Status GseGrpcSdkService::Stub::TerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TerminateGameServerSession_, context, request, response);
}

void GseGrpcSdkService::Stub::experimental_async::TerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TerminateGameServerSession_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::TerminateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TerminateGameServerSession_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::TerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TerminateGameServerSession_, context, request, response, reactor);
}

void GseGrpcSdkService::Stub::experimental_async::TerminateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TerminateGameServerSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::AsyncTerminateGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_TerminateGameServerSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::PrepareAsyncTerminateGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_TerminateGameServerSession_, context, request, false);
}

::grpc::Status GseGrpcSdkService::Stub::ProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ProcessEnding_, context, request, response);
}

void GseGrpcSdkService::Stub::experimental_async::ProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ProcessEnding_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::ProcessEnding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ProcessEnding_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::ProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ProcessEnding_, context, request, response, reactor);
}

void GseGrpcSdkService::Stub::experimental_async::ProcessEnding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ProcessEnding_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::AsyncProcessEndingRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_ProcessEnding_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::PrepareAsyncProcessEndingRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_ProcessEnding_, context, request, false);
}

::grpc::Status GseGrpcSdkService::Stub::ReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReportCustomData_, context, request, response);
}

void GseGrpcSdkService::Stub::experimental_async::ReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportCustomData_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::ReportCustomData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportCustomData_, context, request, response, std::move(f));
}

void GseGrpcSdkService::Stub::experimental_async::ReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportCustomData_, context, request, response, reactor);
}

void GseGrpcSdkService::Stub::experimental_async::ReportCustomData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportCustomData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::AsyncReportCustomDataRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_ReportCustomData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GseGrpcSdkService::Stub::PrepareAsyncReportCustomDataRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_ReportCustomData_, context, request, false);
}

GseGrpcSdkService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GseGrpcSdkService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GseGrpcSdkService::Service, ::tencentcloud::gse::grpcsdk::ProcessReadyRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
          std::mem_fn(&GseGrpcSdkService::Service::ProcessReady), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GseGrpcSdkService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GseGrpcSdkService::Service, ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
          std::mem_fn(&GseGrpcSdkService::Service::ActivateGameServerSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GseGrpcSdkService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GseGrpcSdkService::Service, ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
          std::mem_fn(&GseGrpcSdkService::Service::AcceptPlayerSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GseGrpcSdkService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GseGrpcSdkService::Service, ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
          std::mem_fn(&GseGrpcSdkService::Service::RemovePlayerSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GseGrpcSdkService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GseGrpcSdkService::Service, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>(
          std::mem_fn(&GseGrpcSdkService::Service::DescribePlayerSessions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GseGrpcSdkService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GseGrpcSdkService::Service, ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
          std::mem_fn(&GseGrpcSdkService::Service::UpdatePlayerSessionCreationPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GseGrpcSdkService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GseGrpcSdkService::Service, ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
          std::mem_fn(&GseGrpcSdkService::Service::TerminateGameServerSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GseGrpcSdkService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GseGrpcSdkService::Service, ::tencentcloud::gse::grpcsdk::ProcessEndingRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
          std::mem_fn(&GseGrpcSdkService::Service::ProcessEnding), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GseGrpcSdkService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GseGrpcSdkService::Service, ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
          std::mem_fn(&GseGrpcSdkService::Service::ReportCustomData), this)));
}

GseGrpcSdkService::Service::~Service() {
}

::grpc::Status GseGrpcSdkService::Service::ProcessReady(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GseGrpcSdkService::Service::ActivateGameServerSession(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GseGrpcSdkService::Service::AcceptPlayerSession(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GseGrpcSdkService::Service::RemovePlayerSession(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GseGrpcSdkService::Service::DescribePlayerSessions(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GseGrpcSdkService::Service::UpdatePlayerSessionCreationPolicy(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GseGrpcSdkService::Service::TerminateGameServerSession(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GseGrpcSdkService::Service::ProcessEnding(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GseGrpcSdkService::Service::ReportCustomData(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tencentcloud
}  // namespace gse
}  // namespace grpcsdk


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameServerGrpcSdkService.proto

#include "GameServerGrpcSdkService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_GameServerGrpcSdkService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameProperty_GameServerGrpcSdkService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameServerGrpcSdkService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameServerSession_GameServerGrpcSdkService_2eproto;
namespace tencentcloud {
namespace gse {
namespace grpcsdk {
class HealthCheckRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthCheckRequest> _instance;
} _HealthCheckRequest_default_instance_;
class HealthCheckResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthCheckResponse> _instance;
} _HealthCheckResponse_default_instance_;
class GamePropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameProperty> _instance;
} _GameProperty_default_instance_;
class GameServerSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServerSession> _instance;
} _GameServerSession_default_instance_;
class StartGameServerSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartGameServerSessionRequest> _instance;
} _StartGameServerSessionRequest_default_instance_;
class ProcessTerminateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessTerminateRequest> _instance;
} _ProcessTerminateRequest_default_instance_;
}  // namespace grpcsdk
}  // namespace gse
}  // namespace tencentcloud
static void InitDefaultsscc_info_GameProperty_GameServerGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_GameProperty_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::GameProperty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::GameProperty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameProperty_GameServerGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameProperty_GameServerGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_GameServerSession_GameServerGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_GameServerSession_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::GameServerSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::GameServerSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameServerSession_GameServerGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameServerSession_GameServerGrpcSdkService_2eproto}, {
      &scc_info_GameProperty_GameServerGrpcSdkService_2eproto.base,}};

static void InitDefaultsscc_info_HealthCheckRequest_GameServerGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_HealthCheckRequest_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::HealthCheckRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::HealthCheckRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HealthCheckRequest_GameServerGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HealthCheckRequest_GameServerGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_HealthCheckResponse_GameServerGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_HealthCheckResponse_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::HealthCheckResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::HealthCheckResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HealthCheckResponse_GameServerGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HealthCheckResponse_GameServerGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_ProcessTerminateRequest_GameServerGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_ProcessTerminateRequest_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessTerminateRequest_GameServerGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessTerminateRequest_GameServerGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_StartGameServerSessionRequest_GameServerGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_StartGameServerSessionRequest_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartGameServerSessionRequest_GameServerGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartGameServerSessionRequest_GameServerGrpcSdkService_2eproto}, {
      &scc_info_GameServerSession_GameServerGrpcSdkService_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GameServerGrpcSdkService_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_GameServerGrpcSdkService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GameServerGrpcSdkService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GameServerGrpcSdkService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::HealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::HealthCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::HealthCheckResponse, healthstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameProperty, key_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameProperty, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameServerSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameServerSession, gameserversessionid_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameServerSession, fleetid_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameServerSession, name_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameServerSession, maxplayers_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameServerSession, joinable_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameServerSession, gameproperties_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameServerSession, port_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameServerSession, ipaddress_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameServerSession, gameserversessiondata_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameServerSession, matchmakerdata_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GameServerSession, dnsname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest, gameserversession_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::ProcessTerminateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::ProcessTerminateRequest, terminationtime_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tencentcloud::gse::grpcsdk::HealthCheckRequest)},
  { 5, -1, sizeof(::tencentcloud::gse::grpcsdk::HealthCheckResponse)},
  { 11, -1, sizeof(::tencentcloud::gse::grpcsdk::GameProperty)},
  { 18, -1, sizeof(::tencentcloud::gse::grpcsdk::GameServerSession)},
  { 34, -1, sizeof(::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest)},
  { 40, -1, sizeof(::tencentcloud::gse::grpcsdk::ProcessTerminateRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_HealthCheckRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_HealthCheckResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_GameProperty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_GameServerSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_StartGameServerSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_ProcessTerminateRequest_default_instance_),
};

const char descriptor_table_protodef_GameServerGrpcSdkService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036GameServerGrpcSdkService.proto\022\030tencen"
  "tcloud.gse.grpcsdk\032\027GseGrpcSdkService.pr"
  "oto\"\024\n\022HealthCheckRequest\"+\n\023HealthCheck"
  "Response\022\024\n\014healthStatus\030\001 \001(\010\"*\n\014GamePr"
  "operty\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\236\002\n\021G"
  "ameServerSession\022\033\n\023gameServerSessionId\030"
  "\001 \001(\t\022\017\n\007fleetId\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\022\n\n"
  "maxPlayers\030\004 \001(\005\022\020\n\010joinable\030\005 \001(\010\022>\n\016ga"
  "meProperties\030\006 \003(\0132&.tencentcloud.gse.gr"
  "pcsdk.GameProperty\022\014\n\004port\030\007 \001(\005\022\021\n\tipAd"
  "dress\030\010 \001(\t\022\035\n\025gameServerSessionData\030\t \001"
  "(\t\022\026\n\016matchmakerData\030\n \001(\t\022\017\n\007dnsName\030\013 "
  "\001(\t\"g\n\035StartGameServerSessionRequest\022F\n\021"
  "gameServerSession\030\001 \001(\0132+.tencentcloud.g"
  "se.grpcsdk.GameServerSession\"2\n\027ProcessT"
  "erminateRequest\022\027\n\017terminationTime\030\001 \001(\003"
  "2\372\002\n\030GameServerGrpcSdkService\022n\n\rOnHealt"
  "hCheck\022,.tencentcloud.gse.grpcsdk.Health"
  "CheckRequest\032-.tencentcloud.gse.grpcsdk."
  "HealthCheckResponse\"\000\022|\n\030OnStartGameServ"
  "erSession\0227.tencentcloud.gse.grpcsdk.Sta"
  "rtGameServerSessionRequest\032%.tencentclou"
  "d.gse.grpcsdk.GseResponse\"\000\022p\n\022OnProcess"
  "Terminate\0221.tencentcloud.gse.grpcsdk.Pro"
  "cessTerminateRequest\032%.tencentcloud.gse."
  "grpcsdk.GseResponse\"\000B\021Z\017go-demo/grpcsdk"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GameServerGrpcSdkService_2eproto_deps[1] = {
  &::descriptor_table_GseGrpcSdkService_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GameServerGrpcSdkService_2eproto_sccs[6] = {
  &scc_info_GameProperty_GameServerGrpcSdkService_2eproto.base,
  &scc_info_GameServerSession_GameServerGrpcSdkService_2eproto.base,
  &scc_info_HealthCheckRequest_GameServerGrpcSdkService_2eproto.base,
  &scc_info_HealthCheckResponse_GameServerGrpcSdkService_2eproto.base,
  &scc_info_ProcessTerminateRequest_GameServerGrpcSdkService_2eproto.base,
  &scc_info_StartGameServerSessionRequest_GameServerGrpcSdkService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GameServerGrpcSdkService_2eproto_once;
static bool descriptor_table_GameServerGrpcSdkService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameServerGrpcSdkService_2eproto = {
  &descriptor_table_GameServerGrpcSdkService_2eproto_initialized, descriptor_table_protodef_GameServerGrpcSdkService_2eproto, "GameServerGrpcSdkService.proto", 1048,
  &descriptor_table_GameServerGrpcSdkService_2eproto_once, descriptor_table_GameServerGrpcSdkService_2eproto_sccs, descriptor_table_GameServerGrpcSdkService_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_GameServerGrpcSdkService_2eproto::offsets,
  file_level_metadata_GameServerGrpcSdkService_2eproto, 6, file_level_enum_descriptors_GameServerGrpcSdkService_2eproto, file_level_service_descriptors_GameServerGrpcSdkService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GameServerGrpcSdkService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GameServerGrpcSdkService_2eproto), true);
namespace tencentcloud {
namespace gse {
namespace grpcsdk {

// ===================================================================

void HealthCheckRequest::InitAsDefaultInstance() {
}
class HealthCheckRequest::_Internal {
 public:
};

HealthCheckRequest::HealthCheckRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.HealthCheckRequest)
}
HealthCheckRequest::HealthCheckRequest(const HealthCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.HealthCheckRequest)
}

void HealthCheckRequest::SharedCtor() {
}

HealthCheckRequest::~HealthCheckRequest() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.HealthCheckRequest)
  SharedDtor();
}

void HealthCheckRequest::SharedDtor() {
}

void HealthCheckRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthCheckRequest& HealthCheckRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthCheckRequest_GameServerGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void HealthCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.HealthCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* HealthCheckRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthCheckRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.HealthCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.HealthCheckRequest)
  return target;
}

size_t HealthCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.HealthCheckRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthCheckRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.HealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheckRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthCheckRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.HealthCheckRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.HealthCheckRequest)
    MergeFrom(*source);
  }
}

void HealthCheckRequest::MergeFrom(const HealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.HealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HealthCheckRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.HealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheckRequest::CopyFrom(const HealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.HealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckRequest::IsInitialized() const {
  return true;
}

void HealthCheckRequest::InternalSwap(HealthCheckRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HealthCheckResponse::InitAsDefaultInstance() {
}
class HealthCheckResponse::_Internal {
 public:
};

HealthCheckResponse::HealthCheckResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.HealthCheckResponse)
}
HealthCheckResponse::HealthCheckResponse(const HealthCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  healthstatus_ = from.healthstatus_;
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.HealthCheckResponse)
}

void HealthCheckResponse::SharedCtor() {
  healthstatus_ = false;
}

HealthCheckResponse::~HealthCheckResponse() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.HealthCheckResponse)
  SharedDtor();
}

void HealthCheckResponse::SharedDtor() {
}

void HealthCheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthCheckResponse& HealthCheckResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthCheckResponse_GameServerGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void HealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.HealthCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  healthstatus_ = false;
  _internal_metadata_.Clear();
}

const char* HealthCheckResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool healthStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          healthstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthCheckResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.HealthCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool healthStatus = 1;
  if (this->healthstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_healthstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.HealthCheckResponse)
  return target;
}

size_t HealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.HealthCheckResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool healthStatus = 1;
  if (this->healthstatus() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthCheckResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheckResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthCheckResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.HealthCheckResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.HealthCheckResponse)
    MergeFrom(*source);
  }
}

void HealthCheckResponse::MergeFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.healthstatus() != 0) {
    _internal_set_healthstatus(from._internal_healthstatus());
  }
}

void HealthCheckResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheckResponse::CopyFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckResponse::IsInitialized() const {
  return true;
}

void HealthCheckResponse::InternalSwap(HealthCheckResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(healthstatus_, other->healthstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameProperty::InitAsDefaultInstance() {
}
class GameProperty::_Internal {
 public:
};

GameProperty::GameProperty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.GameProperty)
}
GameProperty::GameProperty(const GameProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.GameProperty)
}

void GameProperty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameProperty_GameServerGrpcSdkService_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameProperty::~GameProperty() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.GameProperty)
  SharedDtor();
}

void GameProperty::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameProperty& GameProperty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameProperty_GameServerGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void GameProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.GameProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GameProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.GameProperty.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.GameProperty.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameProperty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.GameProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.GameProperty.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.GameProperty.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.GameProperty)
  return target;
}

size_t GameProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.GameProperty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameProperty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.GameProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const GameProperty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.GameProperty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.GameProperty)
    MergeFrom(*source);
  }
}

void GameProperty::MergeFrom(const GameProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.GameProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void GameProperty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.GameProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameProperty::CopyFrom(const GameProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.GameProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameProperty::IsInitialized() const {
  return true;
}

void GameProperty::InternalSwap(GameProperty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GameProperty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameServerSession::InitAsDefaultInstance() {
}
class GameServerSession::_Internal {
 public:
};

GameServerSession::GameServerSession()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.GameServerSession)
}
GameServerSession::GameServerSession(const GameServerSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      gameproperties_(from.gameproperties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameserversessionid().empty()) {
    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  fleetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fleetid().empty()) {
    fleetid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipaddress().empty()) {
    ipaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  gameserversessiondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameserversessiondata().empty()) {
    gameserversessiondata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessiondata_);
  }
  matchmakerdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_matchmakerdata().empty()) {
    matchmakerdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.matchmakerdata_);
  }
  dnsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dnsname().empty()) {
    dnsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dnsname_);
  }
  ::memcpy(&maxplayers_, &from.maxplayers_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&maxplayers_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.GameServerSession)
}

void GameServerSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameServerSession_GameServerGrpcSdkService_2eproto.base);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fleetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameserversessiondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matchmakerdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dnsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxplayers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&maxplayers_)) + sizeof(port_));
}

GameServerSession::~GameServerSession() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.GameServerSession)
  SharedDtor();
}

void GameServerSession::SharedDtor() {
  gameserversessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fleetid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameserversessiondata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matchmakerdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dnsname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameServerSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameServerSession& GameServerSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameServerSession_GameServerGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void GameServerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.GameServerSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameproperties_.Clear();
  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fleetid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameserversessiondata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matchmakerdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dnsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxplayers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&maxplayers_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

const char* GameServerSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gameServerSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gameserversessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fleetId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fleetid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.GameServerSession.fleetId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.GameServerSession.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxPlayers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maxplayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool joinable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          joinable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tencentcloud.gse.grpcsdk.GameProperty gameProperties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gameproperties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipAddress = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_ipaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.GameServerSession.ipAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gameServerSessionData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_gameserversessiondata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string matchmakerData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_matchmakerdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.GameServerSession.matchmakerData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dnsName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_dnsname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.GameServerSession.dnsName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.GameServerSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameserversessionid().data(), static_cast<int>(this->_internal_gameserversessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gameserversessionid(), target);
  }

  // string fleetId = 2;
  if (this->fleetid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fleetid().data(), static_cast<int>(this->_internal_fleetid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.GameServerSession.fleetId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fleetid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.GameServerSession.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 maxPlayers = 4;
  if (this->maxplayers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_maxplayers(), target);
  }

  // bool joinable = 5;
  if (this->joinable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_joinable(), target);
  }

  // repeated .tencentcloud.gse.grpcsdk.GameProperty gameProperties = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gameproperties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_gameproperties(i), target, stream);
  }

  // int32 port = 7;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_port(), target);
  }

  // string ipAddress = 8;
  if (this->ipaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipaddress().data(), static_cast<int>(this->_internal_ipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.GameServerSession.ipAddress");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ipaddress(), target);
  }

  // string gameServerSessionData = 9;
  if (this->gameserversessiondata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameserversessiondata().data(), static_cast<int>(this->_internal_gameserversessiondata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionData");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_gameserversessiondata(), target);
  }

  // string matchmakerData = 10;
  if (this->matchmakerdata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_matchmakerdata().data(), static_cast<int>(this->_internal_matchmakerdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.GameServerSession.matchmakerData");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_matchmakerdata(), target);
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dnsname().data(), static_cast<int>(this->_internal_dnsname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.GameServerSession.dnsName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_dnsname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.GameServerSession)
  return target;
}

size_t GameServerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.GameServerSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tencentcloud.gse.grpcsdk.GameProperty gameProperties = 6;
  total_size += 1UL * this->_internal_gameproperties_size();
  for (const auto& msg : this->gameproperties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameserversessionid());
  }

  // string fleetId = 2;
  if (this->fleetid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fleetid());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string ipAddress = 8;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipaddress());
  }

  // string gameServerSessionData = 9;
  if (this->gameserversessiondata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameserversessiondata());
  }

  // string matchmakerData = 10;
  if (this->matchmakerdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_matchmakerdata());
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dnsname());
  }

  // int32 maxPlayers = 4;
  if (this->maxplayers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxplayers());
  }

  // bool joinable = 5;
  if (this->joinable() != 0) {
    total_size += 1 + 1;
  }

  // int32 port = 7;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.GameServerSession)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.GameServerSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.GameServerSession)
    MergeFrom(*source);
  }
}

void GameServerSession::MergeFrom(const GameServerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.GameServerSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameproperties_.MergeFrom(from.gameproperties_);
  if (from.gameserversessionid().size() > 0) {

    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  if (from.fleetid().size() > 0) {

    fleetid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.gameserversessiondata().size() > 0) {

    gameserversessiondata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessiondata_);
  }
  if (from.matchmakerdata().size() > 0) {

    matchmakerdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.matchmakerdata_);
  }
  if (from.dnsname().size() > 0) {

    dnsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dnsname_);
  }
  if (from.maxplayers() != 0) {
    _internal_set_maxplayers(from._internal_maxplayers());
  }
  if (from.joinable() != 0) {
    _internal_set_joinable(from._internal_joinable());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void GameServerSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.GameServerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerSession::CopyFrom(const GameServerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.GameServerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerSession::IsInitialized() const {
  return true;
}

void GameServerSession::InternalSwap(GameServerSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameproperties_.InternalSwap(&other->gameproperties_);
  gameserversessionid_.Swap(&other->gameserversessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fleetid_.Swap(&other->fleetid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipaddress_.Swap(&other->ipaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gameserversessiondata_.Swap(&other->gameserversessiondata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  matchmakerdata_.Swap(&other->matchmakerdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dnsname_.Swap(&other->dnsname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maxplayers_, other->maxplayers_);
  swap(joinable_, other->joinable_);
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartGameServerSessionRequest::InitAsDefaultInstance() {
  ::tencentcloud::gse::grpcsdk::_StartGameServerSessionRequest_default_instance_._instance.get_mutable()->gameserversession_ = const_cast< ::tencentcloud::gse::grpcsdk::GameServerSession*>(
      ::tencentcloud::gse::grpcsdk::GameServerSession::internal_default_instance());
}
class StartGameServerSessionRequest::_Internal {
 public:
  static const ::tencentcloud::gse::grpcsdk::GameServerSession& gameserversession(const StartGameServerSessionRequest* msg);
};

const ::tencentcloud::gse::grpcsdk::GameServerSession&
StartGameServerSessionRequest::_Internal::gameserversession(const StartGameServerSessionRequest* msg) {
  return *msg->gameserversession_;
}
StartGameServerSessionRequest::StartGameServerSessionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
}
StartGameServerSessionRequest::StartGameServerSessionRequest(const StartGameServerSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_gameserversession()) {
    gameserversession_ = new ::tencentcloud::gse::grpcsdk::GameServerSession(*from.gameserversession_);
  } else {
    gameserversession_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
}

void StartGameServerSessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartGameServerSessionRequest_GameServerGrpcSdkService_2eproto.base);
  gameserversession_ = nullptr;
}

StartGameServerSessionRequest::~StartGameServerSessionRequest() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
  SharedDtor();
}

void StartGameServerSessionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete gameserversession_;
}

void StartGameServerSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartGameServerSessionRequest& StartGameServerSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartGameServerSessionRequest_GameServerGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void StartGameServerSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && gameserversession_ != nullptr) {
    delete gameserversession_;
  }
  gameserversession_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StartGameServerSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tencentcloud.gse.grpcsdk.GameServerSession gameServerSession = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameserversession(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartGameServerSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tencentcloud.gse.grpcsdk.GameServerSession gameServerSession = 1;
  if (this->has_gameserversession()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gameserversession(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
  return target;
}

size_t StartGameServerSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tencentcloud.gse.grpcsdk.GameServerSession gameServerSession = 1;
  if (this->has_gameserversession()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameserversession_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartGameServerSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartGameServerSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartGameServerSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
    MergeFrom(*source);
  }
}

void StartGameServerSessionRequest::MergeFrom(const StartGameServerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gameserversession()) {
    _internal_mutable_gameserversession()->::tencentcloud::gse::grpcsdk::GameServerSession::MergeFrom(from._internal_gameserversession());
  }
}

void StartGameServerSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartGameServerSessionRequest::CopyFrom(const StartGameServerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartGameServerSessionRequest::IsInitialized() const {
  return true;
}

void StartGameServerSessionRequest::InternalSwap(StartGameServerSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gameserversession_, other->gameserversession_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartGameServerSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessTerminateRequest::InitAsDefaultInstance() {
}
class ProcessTerminateRequest::_Internal {
 public:
};

ProcessTerminateRequest::ProcessTerminateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
}
ProcessTerminateRequest::ProcessTerminateRequest(const ProcessTerminateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  terminationtime_ = from.terminationtime_;
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
}

void ProcessTerminateRequest::SharedCtor() {
  terminationtime_ = PROTOBUF_LONGLONG(0);
}

ProcessTerminateRequest::~ProcessTerminateRequest() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
  SharedDtor();
}

void ProcessTerminateRequest::SharedDtor() {
}

void ProcessTerminateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessTerminateRequest& ProcessTerminateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessTerminateRequest_GameServerGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void ProcessTerminateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terminationtime_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ProcessTerminateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 terminationTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          terminationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessTerminateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 terminationTime = 1;
  if (this->terminationtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_terminationtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
  return target;
}

size_t ProcessTerminateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 terminationTime = 1;
  if (this->terminationtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_terminationtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessTerminateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessTerminateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessTerminateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
    MergeFrom(*source);
  }
}

void ProcessTerminateRequest::MergeFrom(const ProcessTerminateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.terminationtime() != 0) {
    _internal_set_terminationtime(from._internal_terminationtime());
  }
}

void ProcessTerminateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessTerminateRequest::CopyFrom(const ProcessTerminateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTerminateRequest::IsInitialized() const {
  return true;
}

void ProcessTerminateRequest::InternalSwap(ProcessTerminateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(terminationtime_, other->terminationtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessTerminateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcsdk
}  // namespace gse
}  // namespace tencentcloud
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::HealthCheckRequest* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::HealthCheckRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::HealthCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::HealthCheckResponse* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::HealthCheckResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::HealthCheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::GameProperty* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::GameProperty >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::GameProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::GameServerSession* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::GameServerSession >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::GameServerSession >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GameServerGrpcSdkService.proto

#include "GameServerGrpcSdkService.pb.h"
#include "GameServerGrpcSdkService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tencentcloud {
namespace gse {
namespace grpcsdk {

static const char* GameServerGrpcSdkService_method_names[] = {
  "/tencentcloud.gse.grpcsdk.GameServerGrpcSdkService/OnHealthCheck",
  "/tencentcloud.gse.grpcsdk.GameServerGrpcSdkService/OnStartGameServerSession",
  "/tencentcloud.gse.grpcsdk.GameServerGrpcSdkService/OnProcessTerminate",
};

std::unique_ptr< GameServerGrpcSdkService::Stub> GameServerGrpcSdkService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GameServerGrpcSdkService::Stub> stub(new GameServerGrpcSdkService::Stub(channel));
  return stub;
}

GameServerGrpcSdkService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_OnHealthCheck_(GameServerGrpcSdkService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnStartGameServerSession_(GameServerGrpcSdkService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnProcessTerminate_(GameServerGrpcSdkService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GameServerGrpcSdkService::Stub::OnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest& request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnHealthCheck_, context, request, response);
}

void GameServerGrpcSdkService::Stub::experimental_async::OnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnHealthCheck_, context, request, response, std::move(f));
}

void GameServerGrpcSdkService::Stub::experimental_async::OnHealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnHealthCheck_, context, request, response, std::move(f));
}

void GameServerGrpcSdkService::Stub::experimental_async::OnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnHealthCheck_, context, request, response, reactor);
}

void GameServerGrpcSdkService::Stub::experimental_async::OnHealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnHealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>* GameServerGrpcSdkService::Stub::AsyncOnHealthCheckRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>::Create(channel_.get(), cq, rpcmethod_OnHealthCheck_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>* GameServerGrpcSdkService::Stub::PrepareAsyncOnHealthCheckRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>::Create(channel_.get(), cq, rpcmethod_OnHealthCheck_, context, request, false);
}

::grpc::Status GameServerGrpcSdkService::Stub::OnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnStartGameServerSession_, context, request, response);
}

void GameServerGrpcSdkService::Stub::experimental_async::OnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnStartGameServerSession_, context, request, response, std::move(f));
}

void GameServerGrpcSdkService::Stub::experimental_async::OnStartGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnStartGameServerSession_, context, request, response, std::move(f));
}

void GameServerGrpcSdkService::Stub::experimental_async::OnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnStartGameServerSession_, context, request, response, reactor);
}

void GameServerGrpcSdkService::Stub::experimental_async::OnStartGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnStartGameServerSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GameServerGrpcSdkService::Stub::AsyncOnStartGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_OnStartGameServerSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GameServerGrpcSdkService::Stub::PrepareAsyncOnStartGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_OnStartGameServerSession_, context, request, false);
}

::grpc::Status GameServerGrpcSdkService::Stub::OnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnProcessTerminate_, context, request, response);
}

void GameServerGrpcSdkService::Stub::experimental_async::OnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnProcessTerminate_, context, request, response, std::move(f));
}

void GameServerGrpcSdkService::Stub::experimental_async::OnProcessTerminate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnProcessTerminate_, context, request, response, std::move(f));
}

void GameServerGrpcSdkService::Stub::experimental_async::OnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnProcessTerminate_, context, request, response, reactor);
}

void GameServerGrpcSdkService::Stub::experimental_async::OnProcessTerminate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnProcessTerminate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GameServerGrpcSdkService::Stub::AsyncOnProcessTerminateRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_OnProcessTerminate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* GameServerGrpcSdkService::Stub::PrepareAsyncOnProcessTerminateRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tencentcloud::gse::grpcsdk::GseResponse>::Create(channel_.get(), cq, rpcmethod_OnProcessTerminate_, context, request, false);
}

GameServerGrpcSdkService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameServerGrpcSdkService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameServerGrpcSdkService::Service, ::tencentcloud::gse::grpcsdk::HealthCheckRequest, ::tencentcloud::gse::grpcsdk::HealthCheckResponse>(
          std::mem_fn(&GameServerGrpcSdkService::Service::OnHealthCheck), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameServerGrpcSdkService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameServerGrpcSdkService::Service, ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
          std::mem_fn(&GameServerGrpcSdkService::Service::OnStartGameServerSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameServerGrpcSdkService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameServerGrpcSdkService::Service, ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
          std::mem_fn(&GameServerGrpcSdkService::Service::OnProcessTerminate), this)));
}

GameServerGrpcSdkService::Service::~Service() {
}

::grpc::Status GameServerGrpcSdkService::Service::OnHealthCheck(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameServerGrpcSdkService::Service::OnStartGameServerSession(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameServerGrpcSdkService::Service::OnProcessTerminate(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tencentcloud
}  // namespace gse
}  // namespace grpcsdk


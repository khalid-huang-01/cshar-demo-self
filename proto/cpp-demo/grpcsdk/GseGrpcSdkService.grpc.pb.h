// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GseGrpcSdkService.proto
#ifndef GRPC_GseGrpcSdkService_2eproto__INCLUDED
#define GRPC_GseGrpcSdkService_2eproto__INCLUDED

#include "GseGrpcSdkService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace tencentcloud {
namespace gse {
namespace grpcsdk {

class GseGrpcSdkService final {
 public:
  static constexpr char const* service_full_name() {
    return "tencentcloud.gse.grpcsdk.GseGrpcSdkService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 上报游戏进程已经就绪
    virtual ::grpc::Status ProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncProcessReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncProcessReadyRaw(context, request, cq));
    }
    // 激活游戏会话
    virtual ::grpc::Status ActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncActivateGameServerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncActivateGameServerSessionRaw(context, request, cq));
    }
    // 玩家加入
    virtual ::grpc::Status AcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncAcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncAcceptPlayerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncAcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncAcceptPlayerSessionRaw(context, request, cq));
    }
    // 玩家移除
    virtual ::grpc::Status RemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncRemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncRemovePlayerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncRemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncRemovePlayerSessionRaw(context, request, cq));
    }
    // 获取玩家信息
    virtual ::grpc::Status DescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest& request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>> AsyncDescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>>(AsyncDescribePlayerSessionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>> PrepareAsyncDescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>>(PrepareAsyncDescribePlayerSessionsRaw(context, request, cq));
    }
    // 更新玩家加入策略
    virtual ::grpc::Status UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncUpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncUpdatePlayerSessionCreationPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncUpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncUpdatePlayerSessionCreationPolicyRaw(context, request, cq));
    }
    // 结束游戏会话
    virtual ::grpc::Status TerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncTerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncTerminateGameServerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncTerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncTerminateGameServerSessionRaw(context, request, cq));
    }
    // 结束进程
    virtual ::grpc::Status ProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncProcessEndingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncProcessEndingRaw(context, request, cq));
    }
    // 上报自定义数据
    virtual ::grpc::Status ReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncReportCustomDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncReportCustomDataRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 上报游戏进程已经就绪
      virtual void ProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProcessReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ProcessReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ProcessReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 激活游戏会话
      virtual void ActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ActivateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ActivateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ActivateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 玩家加入
      virtual void AcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AcceptPlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AcceptPlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AcceptPlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 玩家移除
      virtual void RemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemovePlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemovePlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemovePlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 获取玩家信息
      virtual void DescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DescribePlayerSessions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DescribePlayerSessions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DescribePlayerSessions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 更新玩家加入策略
      virtual void UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 结束游戏会话
      virtual void TerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TerminateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TerminateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TerminateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 结束进程
      virtual void ProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProcessEnding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ProcessEnding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ProcessEnding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 上报自定义数据
      virtual void ReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportCustomData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReportCustomData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReportCustomData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncProcessReadyRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncProcessReadyRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncActivateGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncActivateGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncAcceptPlayerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncAcceptPlayerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncRemovePlayerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncRemovePlayerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>* AsyncDescribePlayerSessionsRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>* PrepareAsyncDescribePlayerSessionsRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncUpdatePlayerSessionCreationPolicyRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncUpdatePlayerSessionCreationPolicyRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncTerminateGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncTerminateGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncProcessEndingRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncProcessEndingRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncReportCustomDataRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncReportCustomDataRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncProcessReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncProcessReadyRaw(context, request, cq));
    }
    ::grpc::Status ActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncActivateGameServerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncActivateGameServerSessionRaw(context, request, cq));
    }
    ::grpc::Status AcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncAcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncAcceptPlayerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncAcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncAcceptPlayerSessionRaw(context, request, cq));
    }
    ::grpc::Status RemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncRemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncRemovePlayerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncRemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncRemovePlayerSessionRaw(context, request, cq));
    }
    ::grpc::Status DescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest& request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>> AsyncDescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>>(AsyncDescribePlayerSessionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>> PrepareAsyncDescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>>(PrepareAsyncDescribePlayerSessionsRaw(context, request, cq));
    }
    ::grpc::Status UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncUpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncUpdatePlayerSessionCreationPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncUpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncUpdatePlayerSessionCreationPolicyRaw(context, request, cq));
    }
    ::grpc::Status TerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncTerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncTerminateGameServerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncTerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncTerminateGameServerSessionRaw(context, request, cq));
    }
    ::grpc::Status ProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncProcessEndingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncProcessEndingRaw(context, request, cq));
    }
    ::grpc::Status ReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncReportCustomDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncReportCustomDataRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      void ProcessReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ProcessReady(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ProcessReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ProcessReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      void ActivateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ActivateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ActivateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ActivateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      void AcceptPlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AcceptPlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AcceptPlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AcceptPlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      void RemovePlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemovePlayerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemovePlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemovePlayerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, std::function<void(::grpc::Status)>) override;
      void DescribePlayerSessions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DescribePlayerSessions(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DescribePlayerSessions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DescribePlayerSessions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdatePlayerSessionCreationPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      void TerminateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TerminateGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TerminateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TerminateGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      void ProcessEnding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ProcessEnding(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ProcessEnding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ProcessEnding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      void ReportCustomData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReportCustomData(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReportCustomData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReportCustomData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncProcessReadyRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncProcessReadyRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncActivateGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncActivateGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncAcceptPlayerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncAcceptPlayerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncRemovePlayerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncRemovePlayerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>* AsyncDescribePlayerSessionsRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>* PrepareAsyncDescribePlayerSessionsRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncUpdatePlayerSessionCreationPolicyRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncUpdatePlayerSessionCreationPolicyRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncTerminateGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncTerminateGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncProcessEndingRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncProcessEndingRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncReportCustomDataRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncReportCustomDataRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessReady_;
    const ::grpc::internal::RpcMethod rpcmethod_ActivateGameServerSession_;
    const ::grpc::internal::RpcMethod rpcmethod_AcceptPlayerSession_;
    const ::grpc::internal::RpcMethod rpcmethod_RemovePlayerSession_;
    const ::grpc::internal::RpcMethod rpcmethod_DescribePlayerSessions_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePlayerSessionCreationPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_TerminateGameServerSession_;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessEnding_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportCustomData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 上报游戏进程已经就绪
    virtual ::grpc::Status ProcessReady(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response);
    // 激活游戏会话
    virtual ::grpc::Status ActivateGameServerSession(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response);
    // 玩家加入
    virtual ::grpc::Status AcceptPlayerSession(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response);
    // 玩家移除
    virtual ::grpc::Status RemovePlayerSession(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response);
    // 获取玩家信息
    virtual ::grpc::Status DescribePlayerSessions(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response);
    // 更新玩家加入策略
    virtual ::grpc::Status UpdatePlayerSessionCreationPolicy(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response);
    // 结束游戏会话
    virtual ::grpc::Status TerminateGameServerSession(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response);
    // 结束进程
    virtual ::grpc::Status ProcessEnding(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response);
    // 上报自定义数据
    virtual ::grpc::Status ReportCustomData(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessReady() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ProcessReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessReady(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessReady(::grpc::ServerContext* context, ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* request, ::grpc::ServerAsyncResponseWriter< ::tencentcloud::gse::grpcsdk::GseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ActivateGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ActivateGameServerSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ActivateGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActivateGameServerSession(::grpc::ServerContext* context, ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tencentcloud::gse::grpcsdk::GseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AcceptPlayerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AcceptPlayerSession() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AcceptPlayerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPlayerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptPlayerSession(::grpc::ServerContext* context, ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tencentcloud::gse::grpcsdk::GseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemovePlayerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemovePlayerSession() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RemovePlayerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePlayerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePlayerSession(::grpc::ServerContext* context, ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tencentcloud::gse::grpcsdk::GseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DescribePlayerSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DescribePlayerSessions() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DescribePlayerSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribePlayerSessions(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* /*request*/, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribePlayerSessions(::grpc::ServerContext* context, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePlayerSessionCreationPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdatePlayerSessionCreationPolicy() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdatePlayerSessionCreationPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePlayerSessionCreationPolicy(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePlayerSessionCreationPolicy(::grpc::ServerContext* context, ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::tencentcloud::gse::grpcsdk::GseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TerminateGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TerminateGameServerSession() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_TerminateGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTerminateGameServerSession(::grpc::ServerContext* context, ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tencentcloud::gse::grpcsdk::GseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessEnding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessEnding() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ProcessEnding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessEnding(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessEnding(::grpc::ServerContext* context, ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* request, ::grpc::ServerAsyncResponseWriter< ::tencentcloud::gse::grpcsdk::GseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportCustomData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReportCustomData() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ReportCustomData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCustomData(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportCustomData(::grpc::ServerContext* context, ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::tencentcloud::gse::grpcsdk::GseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ProcessReady<WithAsyncMethod_ActivateGameServerSession<WithAsyncMethod_AcceptPlayerSession<WithAsyncMethod_RemovePlayerSession<WithAsyncMethod_DescribePlayerSessions<WithAsyncMethod_UpdatePlayerSessionCreationPolicy<WithAsyncMethod_TerminateGameServerSession<WithAsyncMethod_ProcessEnding<WithAsyncMethod_ReportCustomData<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ProcessReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ProcessReady() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::ProcessReadyRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) { return this->ProcessReady(context, request, response); }));}
    void SetMessageAllocatorFor_ProcessReady(
        ::grpc::experimental::MessageAllocator< ::tencentcloud::gse::grpcsdk::ProcessReadyRequest, ::tencentcloud::gse::grpcsdk::GseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::ProcessReadyRequest, ::tencentcloud::gse::grpcsdk::GseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ProcessReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessReady(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProcessReady(
      ::grpc::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProcessReady(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ActivateGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ActivateGameServerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) { return this->ActivateGameServerSession(context, request, response); }));}
    void SetMessageAllocatorFor_ActivateGameServerSession(
        ::grpc::experimental::MessageAllocator< ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ActivateGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ActivateGameServerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ActivateGameServerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AcceptPlayerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AcceptPlayerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) { return this->AcceptPlayerSession(context, request, response); }));}
    void SetMessageAllocatorFor_AcceptPlayerSession(
        ::grpc::experimental::MessageAllocator< ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AcceptPlayerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPlayerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AcceptPlayerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AcceptPlayerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemovePlayerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemovePlayerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) { return this->RemovePlayerSession(context, request, response); }));}
    void SetMessageAllocatorFor_RemovePlayerSession(
        ::grpc::experimental::MessageAllocator< ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemovePlayerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePlayerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemovePlayerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemovePlayerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DescribePlayerSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DescribePlayerSessions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* request, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* response) { return this->DescribePlayerSessions(context, request, response); }));}
    void SetMessageAllocatorFor_DescribePlayerSessions(
        ::grpc::experimental::MessageAllocator< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DescribePlayerSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribePlayerSessions(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* /*request*/, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DescribePlayerSessions(
      ::grpc::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* /*request*/, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DescribePlayerSessions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* /*request*/, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdatePlayerSessionCreationPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdatePlayerSessionCreationPolicy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) { return this->UpdatePlayerSessionCreationPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_UpdatePlayerSessionCreationPolicy(
        ::grpc::experimental::MessageAllocator< ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest, ::tencentcloud::gse::grpcsdk::GseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest, ::tencentcloud::gse::grpcsdk::GseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdatePlayerSessionCreationPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePlayerSessionCreationPolicy(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdatePlayerSessionCreationPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdatePlayerSessionCreationPolicy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TerminateGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TerminateGameServerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) { return this->TerminateGameServerSession(context, request, response); }));}
    void SetMessageAllocatorFor_TerminateGameServerSession(
        ::grpc::experimental::MessageAllocator< ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TerminateGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TerminateGameServerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TerminateGameServerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ProcessEnding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ProcessEnding() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::ProcessEndingRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) { return this->ProcessEnding(context, request, response); }));}
    void SetMessageAllocatorFor_ProcessEnding(
        ::grpc::experimental::MessageAllocator< ::tencentcloud::gse::grpcsdk::ProcessEndingRequest, ::tencentcloud::gse::grpcsdk::GseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::ProcessEndingRequest, ::tencentcloud::gse::grpcsdk::GseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ProcessEnding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessEnding(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProcessEnding(
      ::grpc::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProcessEnding(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReportCustomData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReportCustomData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) { return this->ReportCustomData(context, request, response); }));}
    void SetMessageAllocatorFor_ReportCustomData(
        ::grpc::experimental::MessageAllocator< ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest, ::tencentcloud::gse::grpcsdk::GseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest, ::tencentcloud::gse::grpcsdk::GseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReportCustomData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCustomData(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReportCustomData(
      ::grpc::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReportCustomData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ProcessReady<ExperimentalWithCallbackMethod_ActivateGameServerSession<ExperimentalWithCallbackMethod_AcceptPlayerSession<ExperimentalWithCallbackMethod_RemovePlayerSession<ExperimentalWithCallbackMethod_DescribePlayerSessions<ExperimentalWithCallbackMethod_UpdatePlayerSessionCreationPolicy<ExperimentalWithCallbackMethod_TerminateGameServerSession<ExperimentalWithCallbackMethod_ProcessEnding<ExperimentalWithCallbackMethod_ReportCustomData<Service > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ProcessReady<ExperimentalWithCallbackMethod_ActivateGameServerSession<ExperimentalWithCallbackMethod_AcceptPlayerSession<ExperimentalWithCallbackMethod_RemovePlayerSession<ExperimentalWithCallbackMethod_DescribePlayerSessions<ExperimentalWithCallbackMethod_UpdatePlayerSessionCreationPolicy<ExperimentalWithCallbackMethod_TerminateGameServerSession<ExperimentalWithCallbackMethod_ProcessEnding<ExperimentalWithCallbackMethod_ReportCustomData<Service > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ProcessReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessReady() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ProcessReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessReady(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ActivateGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ActivateGameServerSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ActivateGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AcceptPlayerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AcceptPlayerSession() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AcceptPlayerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPlayerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemovePlayerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemovePlayerSession() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RemovePlayerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePlayerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DescribePlayerSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DescribePlayerSessions() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DescribePlayerSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribePlayerSessions(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* /*request*/, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePlayerSessionCreationPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdatePlayerSessionCreationPolicy() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdatePlayerSessionCreationPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePlayerSessionCreationPolicy(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TerminateGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TerminateGameServerSession() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_TerminateGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProcessEnding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessEnding() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ProcessEnding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessEnding(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportCustomData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReportCustomData() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ReportCustomData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCustomData(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessReady() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ProcessReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessReady(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessReady(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ActivateGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ActivateGameServerSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ActivateGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActivateGameServerSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AcceptPlayerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AcceptPlayerSession() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AcceptPlayerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPlayerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptPlayerSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemovePlayerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemovePlayerSession() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RemovePlayerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePlayerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePlayerSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DescribePlayerSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DescribePlayerSessions() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DescribePlayerSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribePlayerSessions(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* /*request*/, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDescribePlayerSessions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdatePlayerSessionCreationPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdatePlayerSessionCreationPolicy() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdatePlayerSessionCreationPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePlayerSessionCreationPolicy(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePlayerSessionCreationPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TerminateGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TerminateGameServerSession() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_TerminateGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTerminateGameServerSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessEnding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessEnding() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ProcessEnding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessEnding(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessEnding(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportCustomData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReportCustomData() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ReportCustomData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCustomData(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportCustomData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ProcessReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ProcessReady() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProcessReady(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ProcessReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessReady(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProcessReady(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProcessReady(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ActivateGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ActivateGameServerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ActivateGameServerSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ActivateGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivateGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ActivateGameServerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ActivateGameServerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AcceptPlayerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AcceptPlayerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AcceptPlayerSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AcceptPlayerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPlayerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AcceptPlayerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AcceptPlayerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemovePlayerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemovePlayerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemovePlayerSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemovePlayerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePlayerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemovePlayerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemovePlayerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DescribePlayerSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DescribePlayerSessions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DescribePlayerSessions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DescribePlayerSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DescribePlayerSessions(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* /*request*/, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DescribePlayerSessions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DescribePlayerSessions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdatePlayerSessionCreationPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdatePlayerSessionCreationPolicy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdatePlayerSessionCreationPolicy(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdatePlayerSessionCreationPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePlayerSessionCreationPolicy(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdatePlayerSessionCreationPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdatePlayerSessionCreationPolicy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TerminateGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TerminateGameServerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TerminateGameServerSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TerminateGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TerminateGameServerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TerminateGameServerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ProcessEnding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ProcessEnding() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProcessEnding(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ProcessEnding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessEnding(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProcessEnding(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProcessEnding(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReportCustomData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReportCustomData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReportCustomData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReportCustomData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCustomData(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReportCustomData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReportCustomData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProcessReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProcessReady() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::tencentcloud::gse::grpcsdk::ProcessReadyRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(std::bind(&WithStreamedUnaryMethod_ProcessReady<BaseClass>::StreamedProcessReady, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ProcessReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessReady(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcessReady(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tencentcloud::gse::grpcsdk::ProcessReadyRequest,::tencentcloud::gse::grpcsdk::GseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ActivateGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ActivateGameServerSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(std::bind(&WithStreamedUnaryMethod_ActivateGameServerSession<BaseClass>::StreamedActivateGameServerSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ActivateGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ActivateGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedActivateGameServerSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest,::tencentcloud::gse::grpcsdk::GseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AcceptPlayerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AcceptPlayerSession() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(std::bind(&WithStreamedUnaryMethod_AcceptPlayerSession<BaseClass>::StreamedAcceptPlayerSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AcceptPlayerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AcceptPlayerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAcceptPlayerSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest,::tencentcloud::gse::grpcsdk::GseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemovePlayerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemovePlayerSession() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(std::bind(&WithStreamedUnaryMethod_RemovePlayerSession<BaseClass>::StreamedRemovePlayerSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemovePlayerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemovePlayerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemovePlayerSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest,::tencentcloud::gse::grpcsdk::GseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DescribePlayerSessions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DescribePlayerSessions() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>(std::bind(&WithStreamedUnaryMethod_DescribePlayerSessions<BaseClass>::StreamedDescribePlayerSessions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DescribePlayerSessions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DescribePlayerSessions(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* /*request*/, ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDescribePlayerSessions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest,::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePlayerSessionCreationPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdatePlayerSessionCreationPolicy() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(std::bind(&WithStreamedUnaryMethod_UpdatePlayerSessionCreationPolicy<BaseClass>::StreamedUpdatePlayerSessionCreationPolicy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdatePlayerSessionCreationPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePlayerSessionCreationPolicy(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePlayerSessionCreationPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest,::tencentcloud::gse::grpcsdk::GseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TerminateGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TerminateGameServerSession() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(std::bind(&WithStreamedUnaryMethod_TerminateGameServerSession<BaseClass>::StreamedTerminateGameServerSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TerminateGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TerminateGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTerminateGameServerSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest,::tencentcloud::gse::grpcsdk::GseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProcessEnding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProcessEnding() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::tencentcloud::gse::grpcsdk::ProcessEndingRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(std::bind(&WithStreamedUnaryMethod_ProcessEnding<BaseClass>::StreamedProcessEnding, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ProcessEnding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessEnding(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcessEnding(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tencentcloud::gse::grpcsdk::ProcessEndingRequest,::tencentcloud::gse::grpcsdk::GseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportCustomData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReportCustomData() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(std::bind(&WithStreamedUnaryMethod_ReportCustomData<BaseClass>::StreamedReportCustomData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReportCustomData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportCustomData(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportCustomData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest,::tencentcloud::gse::grpcsdk::GseResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ProcessReady<WithStreamedUnaryMethod_ActivateGameServerSession<WithStreamedUnaryMethod_AcceptPlayerSession<WithStreamedUnaryMethod_RemovePlayerSession<WithStreamedUnaryMethod_DescribePlayerSessions<WithStreamedUnaryMethod_UpdatePlayerSessionCreationPolicy<WithStreamedUnaryMethod_TerminateGameServerSession<WithStreamedUnaryMethod_ProcessEnding<WithStreamedUnaryMethod_ReportCustomData<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ProcessReady<WithStreamedUnaryMethod_ActivateGameServerSession<WithStreamedUnaryMethod_AcceptPlayerSession<WithStreamedUnaryMethod_RemovePlayerSession<WithStreamedUnaryMethod_DescribePlayerSessions<WithStreamedUnaryMethod_UpdatePlayerSessionCreationPolicy<WithStreamedUnaryMethod_TerminateGameServerSession<WithStreamedUnaryMethod_ProcessEnding<WithStreamedUnaryMethod_ReportCustomData<Service > > > > > > > > > StreamedService;
};

}  // namespace grpcsdk
}  // namespace gse
}  // namespace tencentcloud


#endif  // GRPC_GseGrpcSdkService_2eproto__INCLUDED

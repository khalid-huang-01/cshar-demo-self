// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GseGrpcSdkService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GseGrpcSdkService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GseGrpcSdkService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GseGrpcSdkService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GseGrpcSdkService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GseGrpcSdkService_2eproto;
namespace tencentcloud {
namespace gse {
namespace grpcsdk {
class AcceptPlayerSessionRequest;
class AcceptPlayerSessionRequestDefaultTypeInternal;
extern AcceptPlayerSessionRequestDefaultTypeInternal _AcceptPlayerSessionRequest_default_instance_;
class ActivateGameServerSessionRequest;
class ActivateGameServerSessionRequestDefaultTypeInternal;
extern ActivateGameServerSessionRequestDefaultTypeInternal _ActivateGameServerSessionRequest_default_instance_;
class DescribePlayerSessionsRequest;
class DescribePlayerSessionsRequestDefaultTypeInternal;
extern DescribePlayerSessionsRequestDefaultTypeInternal _DescribePlayerSessionsRequest_default_instance_;
class DescribePlayerSessionsResponse;
class DescribePlayerSessionsResponseDefaultTypeInternal;
extern DescribePlayerSessionsResponseDefaultTypeInternal _DescribePlayerSessionsResponse_default_instance_;
class GseResponse;
class GseResponseDefaultTypeInternal;
extern GseResponseDefaultTypeInternal _GseResponse_default_instance_;
class PlayerSession;
class PlayerSessionDefaultTypeInternal;
extern PlayerSessionDefaultTypeInternal _PlayerSession_default_instance_;
class ProcessEndingRequest;
class ProcessEndingRequestDefaultTypeInternal;
extern ProcessEndingRequestDefaultTypeInternal _ProcessEndingRequest_default_instance_;
class ProcessReadyRequest;
class ProcessReadyRequestDefaultTypeInternal;
extern ProcessReadyRequestDefaultTypeInternal _ProcessReadyRequest_default_instance_;
class RemovePlayerSessionRequest;
class RemovePlayerSessionRequestDefaultTypeInternal;
extern RemovePlayerSessionRequestDefaultTypeInternal _RemovePlayerSessionRequest_default_instance_;
class ReportCustomDataRequest;
class ReportCustomDataRequestDefaultTypeInternal;
extern ReportCustomDataRequestDefaultTypeInternal _ReportCustomDataRequest_default_instance_;
class TerminateGameServerSessionRequest;
class TerminateGameServerSessionRequestDefaultTypeInternal;
extern TerminateGameServerSessionRequestDefaultTypeInternal _TerminateGameServerSessionRequest_default_instance_;
class UpdatePlayerSessionCreationPolicyRequest;
class UpdatePlayerSessionCreationPolicyRequestDefaultTypeInternal;
extern UpdatePlayerSessionCreationPolicyRequestDefaultTypeInternal _UpdatePlayerSessionCreationPolicyRequest_default_instance_;
}  // namespace grpcsdk
}  // namespace gse
}  // namespace tencentcloud
PROTOBUF_NAMESPACE_OPEN
template<> ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::GseResponse* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::GseResponse>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::PlayerSession* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::PlayerSession>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::ProcessEndingRequest>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::ProcessReadyRequest>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::ReportCustomDataRequest>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tencentcloud {
namespace gse {
namespace grpcsdk {

// ===================================================================

class ProcessReadyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.ProcessReadyRequest) */ {
 public:
  ProcessReadyRequest();
  virtual ~ProcessReadyRequest();

  ProcessReadyRequest(const ProcessReadyRequest& from);
  ProcessReadyRequest(ProcessReadyRequest&& from) noexcept
    : ProcessReadyRequest() {
    *this = ::std::move(from);
  }

  inline ProcessReadyRequest& operator=(const ProcessReadyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessReadyRequest& operator=(ProcessReadyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessReadyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessReadyRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessReadyRequest*>(
               &_ProcessReadyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessReadyRequest& a, ProcessReadyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessReadyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessReadyRequest* New() const final {
    return CreateMaybeMessage<ProcessReadyRequest>(nullptr);
  }

  ProcessReadyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessReadyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessReadyRequest& from);
  void MergeFrom(const ProcessReadyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessReadyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.ProcessReadyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GseGrpcSdkService_2eproto);
    return ::descriptor_table_GseGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogPathsToUploadFieldNumber = 1,
    kClientPortFieldNumber = 2,
    kGrpcPortFieldNumber = 3,
  };
  // repeated string logPathsToUpload = 1;
  int logpathstoupload_size() const;
  private:
  int _internal_logpathstoupload_size() const;
  public:
  void clear_logpathstoupload();
  const std::string& logpathstoupload(int index) const;
  std::string* mutable_logpathstoupload(int index);
  void set_logpathstoupload(int index, const std::string& value);
  void set_logpathstoupload(int index, std::string&& value);
  void set_logpathstoupload(int index, const char* value);
  void set_logpathstoupload(int index, const char* value, size_t size);
  std::string* add_logpathstoupload();
  void add_logpathstoupload(const std::string& value);
  void add_logpathstoupload(std::string&& value);
  void add_logpathstoupload(const char* value);
  void add_logpathstoupload(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& logpathstoupload() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_logpathstoupload();
  private:
  const std::string& _internal_logpathstoupload(int index) const;
  std::string* _internal_add_logpathstoupload();
  public:

  // int32 clientPort = 2;
  void clear_clientport();
  ::PROTOBUF_NAMESPACE_ID::int32 clientport() const;
  void set_clientport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientport() const;
  void _internal_set_clientport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 grpcPort = 3;
  void clear_grpcport();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcport() const;
  void set_grpcport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcport() const;
  void _internal_set_grpcport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> logpathstoupload_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientport_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GseGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class ActivateGameServerSessionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest) */ {
 public:
  ActivateGameServerSessionRequest();
  virtual ~ActivateGameServerSessionRequest();

  ActivateGameServerSessionRequest(const ActivateGameServerSessionRequest& from);
  ActivateGameServerSessionRequest(ActivateGameServerSessionRequest&& from) noexcept
    : ActivateGameServerSessionRequest() {
    *this = ::std::move(from);
  }

  inline ActivateGameServerSessionRequest& operator=(const ActivateGameServerSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivateGameServerSessionRequest& operator=(ActivateGameServerSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivateGameServerSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivateGameServerSessionRequest* internal_default_instance() {
    return reinterpret_cast<const ActivateGameServerSessionRequest*>(
               &_ActivateGameServerSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActivateGameServerSessionRequest& a, ActivateGameServerSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivateGameServerSessionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivateGameServerSessionRequest* New() const final {
    return CreateMaybeMessage<ActivateGameServerSessionRequest>(nullptr);
  }

  ActivateGameServerSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivateGameServerSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivateGameServerSessionRequest& from);
  void MergeFrom(const ActivateGameServerSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivateGameServerSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GseGrpcSdkService_2eproto);
    return ::descriptor_table_GseGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerSessionIdFieldNumber = 1,
    kMaxPlayersFieldNumber = 2,
  };
  // string gameServerSessionId = 1;
  void clear_gameserversessionid();
  const std::string& gameserversessionid() const;
  void set_gameserversessionid(const std::string& value);
  void set_gameserversessionid(std::string&& value);
  void set_gameserversessionid(const char* value);
  void set_gameserversessionid(const char* value, size_t size);
  std::string* mutable_gameserversessionid();
  std::string* release_gameserversessionid();
  void set_allocated_gameserversessionid(std::string* gameserversessionid);
  private:
  const std::string& _internal_gameserversessionid() const;
  void _internal_set_gameserversessionid(const std::string& value);
  std::string* _internal_mutable_gameserversessionid();
  public:

  // int32 maxPlayers = 2;
  void clear_maxplayers();
  ::PROTOBUF_NAMESPACE_ID::int32 maxplayers() const;
  void set_maxplayers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxplayers() const;
  void _internal_set_maxplayers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameserversessionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxplayers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GseGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class AcceptPlayerSessionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest) */ {
 public:
  AcceptPlayerSessionRequest();
  virtual ~AcceptPlayerSessionRequest();

  AcceptPlayerSessionRequest(const AcceptPlayerSessionRequest& from);
  AcceptPlayerSessionRequest(AcceptPlayerSessionRequest&& from) noexcept
    : AcceptPlayerSessionRequest() {
    *this = ::std::move(from);
  }

  inline AcceptPlayerSessionRequest& operator=(const AcceptPlayerSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptPlayerSessionRequest& operator=(AcceptPlayerSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptPlayerSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptPlayerSessionRequest* internal_default_instance() {
    return reinterpret_cast<const AcceptPlayerSessionRequest*>(
               &_AcceptPlayerSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AcceptPlayerSessionRequest& a, AcceptPlayerSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptPlayerSessionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcceptPlayerSessionRequest* New() const final {
    return CreateMaybeMessage<AcceptPlayerSessionRequest>(nullptr);
  }

  AcceptPlayerSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptPlayerSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptPlayerSessionRequest& from);
  void MergeFrom(const AcceptPlayerSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptPlayerSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GseGrpcSdkService_2eproto);
    return ::descriptor_table_GseGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerSessionIdFieldNumber = 1,
    kPlayerSessionIdFieldNumber = 2,
  };
  // string gameServerSessionId = 1;
  void clear_gameserversessionid();
  const std::string& gameserversessionid() const;
  void set_gameserversessionid(const std::string& value);
  void set_gameserversessionid(std::string&& value);
  void set_gameserversessionid(const char* value);
  void set_gameserversessionid(const char* value, size_t size);
  std::string* mutable_gameserversessionid();
  std::string* release_gameserversessionid();
  void set_allocated_gameserversessionid(std::string* gameserversessionid);
  private:
  const std::string& _internal_gameserversessionid() const;
  void _internal_set_gameserversessionid(const std::string& value);
  std::string* _internal_mutable_gameserversessionid();
  public:

  // string playerSessionId = 2;
  void clear_playersessionid();
  const std::string& playersessionid() const;
  void set_playersessionid(const std::string& value);
  void set_playersessionid(std::string&& value);
  void set_playersessionid(const char* value);
  void set_playersessionid(const char* value, size_t size);
  std::string* mutable_playersessionid();
  std::string* release_playersessionid();
  void set_allocated_playersessionid(std::string* playersessionid);
  private:
  const std::string& _internal_playersessionid() const;
  void _internal_set_playersessionid(const std::string& value);
  std::string* _internal_mutable_playersessionid();
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameserversessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playersessionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GseGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class RemovePlayerSessionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest) */ {
 public:
  RemovePlayerSessionRequest();
  virtual ~RemovePlayerSessionRequest();

  RemovePlayerSessionRequest(const RemovePlayerSessionRequest& from);
  RemovePlayerSessionRequest(RemovePlayerSessionRequest&& from) noexcept
    : RemovePlayerSessionRequest() {
    *this = ::std::move(from);
  }

  inline RemovePlayerSessionRequest& operator=(const RemovePlayerSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePlayerSessionRequest& operator=(RemovePlayerSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePlayerSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePlayerSessionRequest* internal_default_instance() {
    return reinterpret_cast<const RemovePlayerSessionRequest*>(
               &_RemovePlayerSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemovePlayerSessionRequest& a, RemovePlayerSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePlayerSessionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePlayerSessionRequest* New() const final {
    return CreateMaybeMessage<RemovePlayerSessionRequest>(nullptr);
  }

  RemovePlayerSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePlayerSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePlayerSessionRequest& from);
  void MergeFrom(const RemovePlayerSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePlayerSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GseGrpcSdkService_2eproto);
    return ::descriptor_table_GseGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerSessionIdFieldNumber = 1,
    kPlayerSessionIdFieldNumber = 2,
  };
  // string gameServerSessionId = 1;
  void clear_gameserversessionid();
  const std::string& gameserversessionid() const;
  void set_gameserversessionid(const std::string& value);
  void set_gameserversessionid(std::string&& value);
  void set_gameserversessionid(const char* value);
  void set_gameserversessionid(const char* value, size_t size);
  std::string* mutable_gameserversessionid();
  std::string* release_gameserversessionid();
  void set_allocated_gameserversessionid(std::string* gameserversessionid);
  private:
  const std::string& _internal_gameserversessionid() const;
  void _internal_set_gameserversessionid(const std::string& value);
  std::string* _internal_mutable_gameserversessionid();
  public:

  // string playerSessionId = 2;
  void clear_playersessionid();
  const std::string& playersessionid() const;
  void set_playersessionid(const std::string& value);
  void set_playersessionid(std::string&& value);
  void set_playersessionid(const char* value);
  void set_playersessionid(const char* value, size_t size);
  std::string* mutable_playersessionid();
  std::string* release_playersessionid();
  void set_allocated_playersessionid(std::string* playersessionid);
  private:
  const std::string& _internal_playersessionid() const;
  void _internal_set_playersessionid(const std::string& value);
  std::string* _internal_mutable_playersessionid();
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameserversessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playersessionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GseGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class PlayerSession :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.PlayerSession) */ {
 public:
  PlayerSession();
  virtual ~PlayerSession();

  PlayerSession(const PlayerSession& from);
  PlayerSession(PlayerSession&& from) noexcept
    : PlayerSession() {
    *this = ::std::move(from);
  }

  inline PlayerSession& operator=(const PlayerSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSession& operator=(PlayerSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSession* internal_default_instance() {
    return reinterpret_cast<const PlayerSession*>(
               &_PlayerSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerSession& a, PlayerSession& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSession* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerSession* New() const final {
    return CreateMaybeMessage<PlayerSession>(nullptr);
  }

  PlayerSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerSession& from);
  void MergeFrom(const PlayerSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.PlayerSession";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GseGrpcSdkService_2eproto);
    return ::descriptor_table_GseGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSessionIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kGameServerSessionIdFieldNumber = 3,
    kFleetIdFieldNumber = 4,
    kIpAddressFieldNumber = 5,
    kStatusFieldNumber = 6,
    kPlayerDataFieldNumber = 10,
    kDnsNameFieldNumber = 11,
    kCreationTimeFieldNumber = 7,
    kTerminationTimeFieldNumber = 8,
    kPortFieldNumber = 9,
  };
  // string playerSessionId = 1;
  void clear_playersessionid();
  const std::string& playersessionid() const;
  void set_playersessionid(const std::string& value);
  void set_playersessionid(std::string&& value);
  void set_playersessionid(const char* value);
  void set_playersessionid(const char* value, size_t size);
  std::string* mutable_playersessionid();
  std::string* release_playersessionid();
  void set_allocated_playersessionid(std::string* playersessionid);
  private:
  const std::string& _internal_playersessionid() const;
  void _internal_set_playersessionid(const std::string& value);
  std::string* _internal_mutable_playersessionid();
  public:

  // string playerId = 2;
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // string gameServerSessionId = 3;
  void clear_gameserversessionid();
  const std::string& gameserversessionid() const;
  void set_gameserversessionid(const std::string& value);
  void set_gameserversessionid(std::string&& value);
  void set_gameserversessionid(const char* value);
  void set_gameserversessionid(const char* value, size_t size);
  std::string* mutable_gameserversessionid();
  std::string* release_gameserversessionid();
  void set_allocated_gameserversessionid(std::string* gameserversessionid);
  private:
  const std::string& _internal_gameserversessionid() const;
  void _internal_set_gameserversessionid(const std::string& value);
  std::string* _internal_mutable_gameserversessionid();
  public:

  // string fleetId = 4;
  void clear_fleetid();
  const std::string& fleetid() const;
  void set_fleetid(const std::string& value);
  void set_fleetid(std::string&& value);
  void set_fleetid(const char* value);
  void set_fleetid(const char* value, size_t size);
  std::string* mutable_fleetid();
  std::string* release_fleetid();
  void set_allocated_fleetid(std::string* fleetid);
  private:
  const std::string& _internal_fleetid() const;
  void _internal_set_fleetid(const std::string& value);
  std::string* _internal_mutable_fleetid();
  public:

  // string ipAddress = 5;
  void clear_ipaddress();
  const std::string& ipaddress() const;
  void set_ipaddress(const std::string& value);
  void set_ipaddress(std::string&& value);
  void set_ipaddress(const char* value);
  void set_ipaddress(const char* value, size_t size);
  std::string* mutable_ipaddress();
  std::string* release_ipaddress();
  void set_allocated_ipaddress(std::string* ipaddress);
  private:
  const std::string& _internal_ipaddress() const;
  void _internal_set_ipaddress(const std::string& value);
  std::string* _internal_mutable_ipaddress();
  public:

  // string status = 6;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string playerData = 10;
  void clear_playerdata();
  const std::string& playerdata() const;
  void set_playerdata(const std::string& value);
  void set_playerdata(std::string&& value);
  void set_playerdata(const char* value);
  void set_playerdata(const char* value, size_t size);
  std::string* mutable_playerdata();
  std::string* release_playerdata();
  void set_allocated_playerdata(std::string* playerdata);
  private:
  const std::string& _internal_playerdata() const;
  void _internal_set_playerdata(const std::string& value);
  std::string* _internal_mutable_playerdata();
  public:

  // string dnsName = 11;
  void clear_dnsname();
  const std::string& dnsname() const;
  void set_dnsname(const std::string& value);
  void set_dnsname(std::string&& value);
  void set_dnsname(const char* value);
  void set_dnsname(const char* value, size_t size);
  std::string* mutable_dnsname();
  std::string* release_dnsname();
  void set_allocated_dnsname(std::string* dnsname);
  private:
  const std::string& _internal_dnsname() const;
  void _internal_set_dnsname(const std::string& value);
  std::string* _internal_mutable_dnsname();
  public:

  // int64 creationTime = 7;
  void clear_creationtime();
  ::PROTOBUF_NAMESPACE_ID::int64 creationtime() const;
  void set_creationtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_creationtime() const;
  void _internal_set_creationtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 terminationTime = 8;
  void clear_terminationtime();
  ::PROTOBUF_NAMESPACE_ID::int64 terminationtime() const;
  void set_terminationtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_terminationtime() const;
  void _internal_set_terminationtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 port = 9;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.PlayerSession)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playersessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameserversessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fleetid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dnsname_;
  ::PROTOBUF_NAMESPACE_ID::int64 creationtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 terminationtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GseGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class DescribePlayerSessionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest) */ {
 public:
  DescribePlayerSessionsRequest();
  virtual ~DescribePlayerSessionsRequest();

  DescribePlayerSessionsRequest(const DescribePlayerSessionsRequest& from);
  DescribePlayerSessionsRequest(DescribePlayerSessionsRequest&& from) noexcept
    : DescribePlayerSessionsRequest() {
    *this = ::std::move(from);
  }

  inline DescribePlayerSessionsRequest& operator=(const DescribePlayerSessionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribePlayerSessionsRequest& operator=(DescribePlayerSessionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribePlayerSessionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribePlayerSessionsRequest* internal_default_instance() {
    return reinterpret_cast<const DescribePlayerSessionsRequest*>(
               &_DescribePlayerSessionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DescribePlayerSessionsRequest& a, DescribePlayerSessionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribePlayerSessionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribePlayerSessionsRequest* New() const final {
    return CreateMaybeMessage<DescribePlayerSessionsRequest>(nullptr);
  }

  DescribePlayerSessionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribePlayerSessionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribePlayerSessionsRequest& from);
  void MergeFrom(const DescribePlayerSessionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribePlayerSessionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GseGrpcSdkService_2eproto);
    return ::descriptor_table_GseGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerSessionIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kPlayerSessionIdFieldNumber = 3,
    kPlayerSessionStatusFilterFieldNumber = 4,
    kNextTokenFieldNumber = 5,
    kLimitFieldNumber = 6,
  };
  // string gameServerSessionId = 1;
  void clear_gameserversessionid();
  const std::string& gameserversessionid() const;
  void set_gameserversessionid(const std::string& value);
  void set_gameserversessionid(std::string&& value);
  void set_gameserversessionid(const char* value);
  void set_gameserversessionid(const char* value, size_t size);
  std::string* mutable_gameserversessionid();
  std::string* release_gameserversessionid();
  void set_allocated_gameserversessionid(std::string* gameserversessionid);
  private:
  const std::string& _internal_gameserversessionid() const;
  void _internal_set_gameserversessionid(const std::string& value);
  std::string* _internal_mutable_gameserversessionid();
  public:

  // string playerId = 2;
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // string playerSessionId = 3;
  void clear_playersessionid();
  const std::string& playersessionid() const;
  void set_playersessionid(const std::string& value);
  void set_playersessionid(std::string&& value);
  void set_playersessionid(const char* value);
  void set_playersessionid(const char* value, size_t size);
  std::string* mutable_playersessionid();
  std::string* release_playersessionid();
  void set_allocated_playersessionid(std::string* playersessionid);
  private:
  const std::string& _internal_playersessionid() const;
  void _internal_set_playersessionid(const std::string& value);
  std::string* _internal_mutable_playersessionid();
  public:

  // string playerSessionStatusFilter = 4;
  void clear_playersessionstatusfilter();
  const std::string& playersessionstatusfilter() const;
  void set_playersessionstatusfilter(const std::string& value);
  void set_playersessionstatusfilter(std::string&& value);
  void set_playersessionstatusfilter(const char* value);
  void set_playersessionstatusfilter(const char* value, size_t size);
  std::string* mutable_playersessionstatusfilter();
  std::string* release_playersessionstatusfilter();
  void set_allocated_playersessionstatusfilter(std::string* playersessionstatusfilter);
  private:
  const std::string& _internal_playersessionstatusfilter() const;
  void _internal_set_playersessionstatusfilter(const std::string& value);
  std::string* _internal_mutable_playersessionstatusfilter();
  public:

  // string nextToken = 5;
  void clear_nexttoken();
  const std::string& nexttoken() const;
  void set_nexttoken(const std::string& value);
  void set_nexttoken(std::string&& value);
  void set_nexttoken(const char* value);
  void set_nexttoken(const char* value, size_t size);
  std::string* mutable_nexttoken();
  std::string* release_nexttoken();
  void set_allocated_nexttoken(std::string* nexttoken);
  private:
  const std::string& _internal_nexttoken() const;
  void _internal_set_nexttoken(const std::string& value);
  std::string* _internal_mutable_nexttoken();
  public:

  // int32 limit = 6;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameserversessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playersessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playersessionstatusfilter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nexttoken_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GseGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class DescribePlayerSessionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse) */ {
 public:
  DescribePlayerSessionsResponse();
  virtual ~DescribePlayerSessionsResponse();

  DescribePlayerSessionsResponse(const DescribePlayerSessionsResponse& from);
  DescribePlayerSessionsResponse(DescribePlayerSessionsResponse&& from) noexcept
    : DescribePlayerSessionsResponse() {
    *this = ::std::move(from);
  }

  inline DescribePlayerSessionsResponse& operator=(const DescribePlayerSessionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescribePlayerSessionsResponse& operator=(DescribePlayerSessionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescribePlayerSessionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescribePlayerSessionsResponse* internal_default_instance() {
    return reinterpret_cast<const DescribePlayerSessionsResponse*>(
               &_DescribePlayerSessionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DescribePlayerSessionsResponse& a, DescribePlayerSessionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DescribePlayerSessionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescribePlayerSessionsResponse* New() const final {
    return CreateMaybeMessage<DescribePlayerSessionsResponse>(nullptr);
  }

  DescribePlayerSessionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescribePlayerSessionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescribePlayerSessionsResponse& from);
  void MergeFrom(const DescribePlayerSessionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescribePlayerSessionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GseGrpcSdkService_2eproto);
    return ::descriptor_table_GseGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSessionsFieldNumber = 2,
    kNextTokenFieldNumber = 1,
  };
  // repeated .tencentcloud.gse.grpcsdk.PlayerSession playerSessions = 2;
  int playersessions_size() const;
  private:
  int _internal_playersessions_size() const;
  public:
  void clear_playersessions();
  ::tencentcloud::gse::grpcsdk::PlayerSession* mutable_playersessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tencentcloud::gse::grpcsdk::PlayerSession >*
      mutable_playersessions();
  private:
  const ::tencentcloud::gse::grpcsdk::PlayerSession& _internal_playersessions(int index) const;
  ::tencentcloud::gse::grpcsdk::PlayerSession* _internal_add_playersessions();
  public:
  const ::tencentcloud::gse::grpcsdk::PlayerSession& playersessions(int index) const;
  ::tencentcloud::gse::grpcsdk::PlayerSession* add_playersessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tencentcloud::gse::grpcsdk::PlayerSession >&
      playersessions() const;

  // string nextToken = 1;
  void clear_nexttoken();
  const std::string& nexttoken() const;
  void set_nexttoken(const std::string& value);
  void set_nexttoken(std::string&& value);
  void set_nexttoken(const char* value);
  void set_nexttoken(const char* value, size_t size);
  std::string* mutable_nexttoken();
  std::string* release_nexttoken();
  void set_allocated_nexttoken(std::string* nexttoken);
  private:
  const std::string& _internal_nexttoken() const;
  void _internal_set_nexttoken(const std::string& value);
  std::string* _internal_mutable_nexttoken();
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tencentcloud::gse::grpcsdk::PlayerSession > playersessions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nexttoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GseGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class UpdatePlayerSessionCreationPolicyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest) */ {
 public:
  UpdatePlayerSessionCreationPolicyRequest();
  virtual ~UpdatePlayerSessionCreationPolicyRequest();

  UpdatePlayerSessionCreationPolicyRequest(const UpdatePlayerSessionCreationPolicyRequest& from);
  UpdatePlayerSessionCreationPolicyRequest(UpdatePlayerSessionCreationPolicyRequest&& from) noexcept
    : UpdatePlayerSessionCreationPolicyRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePlayerSessionCreationPolicyRequest& operator=(const UpdatePlayerSessionCreationPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePlayerSessionCreationPolicyRequest& operator=(UpdatePlayerSessionCreationPolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePlayerSessionCreationPolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePlayerSessionCreationPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePlayerSessionCreationPolicyRequest*>(
               &_UpdatePlayerSessionCreationPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdatePlayerSessionCreationPolicyRequest& a, UpdatePlayerSessionCreationPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePlayerSessionCreationPolicyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePlayerSessionCreationPolicyRequest* New() const final {
    return CreateMaybeMessage<UpdatePlayerSessionCreationPolicyRequest>(nullptr);
  }

  UpdatePlayerSessionCreationPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePlayerSessionCreationPolicyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePlayerSessionCreationPolicyRequest& from);
  void MergeFrom(const UpdatePlayerSessionCreationPolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePlayerSessionCreationPolicyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GseGrpcSdkService_2eproto);
    return ::descriptor_table_GseGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerSessionIdFieldNumber = 1,
    kNewPlayerSessionCreationPolicyFieldNumber = 2,
  };
  // string gameServerSessionId = 1;
  void clear_gameserversessionid();
  const std::string& gameserversessionid() const;
  void set_gameserversessionid(const std::string& value);
  void set_gameserversessionid(std::string&& value);
  void set_gameserversessionid(const char* value);
  void set_gameserversessionid(const char* value, size_t size);
  std::string* mutable_gameserversessionid();
  std::string* release_gameserversessionid();
  void set_allocated_gameserversessionid(std::string* gameserversessionid);
  private:
  const std::string& _internal_gameserversessionid() const;
  void _internal_set_gameserversessionid(const std::string& value);
  std::string* _internal_mutable_gameserversessionid();
  public:

  // string newPlayerSessionCreationPolicy = 2;
  void clear_newplayersessioncreationpolicy();
  const std::string& newplayersessioncreationpolicy() const;
  void set_newplayersessioncreationpolicy(const std::string& value);
  void set_newplayersessioncreationpolicy(std::string&& value);
  void set_newplayersessioncreationpolicy(const char* value);
  void set_newplayersessioncreationpolicy(const char* value, size_t size);
  std::string* mutable_newplayersessioncreationpolicy();
  std::string* release_newplayersessioncreationpolicy();
  void set_allocated_newplayersessioncreationpolicy(std::string* newplayersessioncreationpolicy);
  private:
  const std::string& _internal_newplayersessioncreationpolicy() const;
  void _internal_set_newplayersessioncreationpolicy(const std::string& value);
  std::string* _internal_mutable_newplayersessioncreationpolicy();
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameserversessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newplayersessioncreationpolicy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GseGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class TerminateGameServerSessionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest) */ {
 public:
  TerminateGameServerSessionRequest();
  virtual ~TerminateGameServerSessionRequest();

  TerminateGameServerSessionRequest(const TerminateGameServerSessionRequest& from);
  TerminateGameServerSessionRequest(TerminateGameServerSessionRequest&& from) noexcept
    : TerminateGameServerSessionRequest() {
    *this = ::std::move(from);
  }

  inline TerminateGameServerSessionRequest& operator=(const TerminateGameServerSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminateGameServerSessionRequest& operator=(TerminateGameServerSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TerminateGameServerSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TerminateGameServerSessionRequest* internal_default_instance() {
    return reinterpret_cast<const TerminateGameServerSessionRequest*>(
               &_TerminateGameServerSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TerminateGameServerSessionRequest& a, TerminateGameServerSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminateGameServerSessionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TerminateGameServerSessionRequest* New() const final {
    return CreateMaybeMessage<TerminateGameServerSessionRequest>(nullptr);
  }

  TerminateGameServerSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TerminateGameServerSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TerminateGameServerSessionRequest& from);
  void MergeFrom(const TerminateGameServerSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TerminateGameServerSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GseGrpcSdkService_2eproto);
    return ::descriptor_table_GseGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerSessionIdFieldNumber = 1,
  };
  // string gameServerSessionId = 1;
  void clear_gameserversessionid();
  const std::string& gameserversessionid() const;
  void set_gameserversessionid(const std::string& value);
  void set_gameserversessionid(std::string&& value);
  void set_gameserversessionid(const char* value);
  void set_gameserversessionid(const char* value, size_t size);
  std::string* mutable_gameserversessionid();
  std::string* release_gameserversessionid();
  void set_allocated_gameserversessionid(std::string* gameserversessionid);
  private:
  const std::string& _internal_gameserversessionid() const;
  void _internal_set_gameserversessionid(const std::string& value);
  std::string* _internal_mutable_gameserversessionid();
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameserversessionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GseGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class ProcessEndingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.ProcessEndingRequest) */ {
 public:
  ProcessEndingRequest();
  virtual ~ProcessEndingRequest();

  ProcessEndingRequest(const ProcessEndingRequest& from);
  ProcessEndingRequest(ProcessEndingRequest&& from) noexcept
    : ProcessEndingRequest() {
    *this = ::std::move(from);
  }

  inline ProcessEndingRequest& operator=(const ProcessEndingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessEndingRequest& operator=(ProcessEndingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessEndingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessEndingRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessEndingRequest*>(
               &_ProcessEndingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ProcessEndingRequest& a, ProcessEndingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessEndingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessEndingRequest* New() const final {
    return CreateMaybeMessage<ProcessEndingRequest>(nullptr);
  }

  ProcessEndingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessEndingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessEndingRequest& from);
  void MergeFrom(const ProcessEndingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessEndingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.ProcessEndingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GseGrpcSdkService_2eproto);
    return ::descriptor_table_GseGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GseGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class ReportCustomDataRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.ReportCustomDataRequest) */ {
 public:
  ReportCustomDataRequest();
  virtual ~ReportCustomDataRequest();

  ReportCustomDataRequest(const ReportCustomDataRequest& from);
  ReportCustomDataRequest(ReportCustomDataRequest&& from) noexcept
    : ReportCustomDataRequest() {
    *this = ::std::move(from);
  }

  inline ReportCustomDataRequest& operator=(const ReportCustomDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportCustomDataRequest& operator=(ReportCustomDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportCustomDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportCustomDataRequest* internal_default_instance() {
    return reinterpret_cast<const ReportCustomDataRequest*>(
               &_ReportCustomDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReportCustomDataRequest& a, ReportCustomDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportCustomDataRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportCustomDataRequest* New() const final {
    return CreateMaybeMessage<ReportCustomDataRequest>(nullptr);
  }

  ReportCustomDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportCustomDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportCustomDataRequest& from);
  void MergeFrom(const ReportCustomDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportCustomDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.ReportCustomDataRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GseGrpcSdkService_2eproto);
    return ::descriptor_table_GseGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentCustomCountFieldNumber = 1,
    kMaxCustomCountFieldNumber = 2,
  };
  // int32 currentCustomCount = 1;
  void clear_currentcustomcount();
  ::PROTOBUF_NAMESPACE_ID::int32 currentcustomcount() const;
  void set_currentcustomcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currentcustomcount() const;
  void _internal_set_currentcustomcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxCustomCount = 2;
  void clear_maxcustomcount();
  ::PROTOBUF_NAMESPACE_ID::int32 maxcustomcount() const;
  void set_maxcustomcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxcustomcount() const;
  void _internal_set_maxcustomcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentcustomcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxcustomcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GseGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class GseResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.GseResponse) */ {
 public:
  GseResponse();
  virtual ~GseResponse();

  GseResponse(const GseResponse& from);
  GseResponse(GseResponse&& from) noexcept
    : GseResponse() {
    *this = ::std::move(from);
  }

  inline GseResponse& operator=(const GseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GseResponse& operator=(GseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GseResponse* internal_default_instance() {
    return reinterpret_cast<const GseResponse*>(
               &_GseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GseResponse& a, GseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GseResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GseResponse* New() const final {
    return CreateMaybeMessage<GseResponse>(nullptr);
  }

  GseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GseResponse& from);
  void MergeFrom(const GseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.GseResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GseGrpcSdkService_2eproto);
    return ::descriptor_table_GseGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.GseResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GseGrpcSdkService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessReadyRequest

// repeated string logPathsToUpload = 1;
inline int ProcessReadyRequest::_internal_logpathstoupload_size() const {
  return logpathstoupload_.size();
}
inline int ProcessReadyRequest::logpathstoupload_size() const {
  return _internal_logpathstoupload_size();
}
inline void ProcessReadyRequest::clear_logpathstoupload() {
  logpathstoupload_.Clear();
}
inline std::string* ProcessReadyRequest::add_logpathstoupload() {
  // @@protoc_insertion_point(field_add_mutable:tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload)
  return _internal_add_logpathstoupload();
}
inline const std::string& ProcessReadyRequest::_internal_logpathstoupload(int index) const {
  return logpathstoupload_.Get(index);
}
inline const std::string& ProcessReadyRequest::logpathstoupload(int index) const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload)
  return _internal_logpathstoupload(index);
}
inline std::string* ProcessReadyRequest::mutable_logpathstoupload(int index) {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload)
  return logpathstoupload_.Mutable(index);
}
inline void ProcessReadyRequest::set_logpathstoupload(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload)
  logpathstoupload_.Mutable(index)->assign(value);
}
inline void ProcessReadyRequest::set_logpathstoupload(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload)
  logpathstoupload_.Mutable(index)->assign(std::move(value));
}
inline void ProcessReadyRequest::set_logpathstoupload(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logpathstoupload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload)
}
inline void ProcessReadyRequest::set_logpathstoupload(int index, const char* value, size_t size) {
  logpathstoupload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload)
}
inline std::string* ProcessReadyRequest::_internal_add_logpathstoupload() {
  return logpathstoupload_.Add();
}
inline void ProcessReadyRequest::add_logpathstoupload(const std::string& value) {
  logpathstoupload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload)
}
inline void ProcessReadyRequest::add_logpathstoupload(std::string&& value) {
  logpathstoupload_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload)
}
inline void ProcessReadyRequest::add_logpathstoupload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logpathstoupload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload)
}
inline void ProcessReadyRequest::add_logpathstoupload(const char* value, size_t size) {
  logpathstoupload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessReadyRequest::logpathstoupload() const {
  // @@protoc_insertion_point(field_list:tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload)
  return logpathstoupload_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessReadyRequest::mutable_logpathstoupload() {
  // @@protoc_insertion_point(field_mutable_list:tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload)
  return &logpathstoupload_;
}

// int32 clientPort = 2;
inline void ProcessReadyRequest::clear_clientport() {
  clientport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessReadyRequest::_internal_clientport() const {
  return clientport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessReadyRequest::clientport() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.ProcessReadyRequest.clientPort)
  return _internal_clientport();
}
inline void ProcessReadyRequest::_internal_set_clientport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clientport_ = value;
}
inline void ProcessReadyRequest::set_clientport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientport(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.ProcessReadyRequest.clientPort)
}

// int32 grpcPort = 3;
inline void ProcessReadyRequest::clear_grpcport() {
  grpcport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessReadyRequest::_internal_grpcport() const {
  return grpcport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessReadyRequest::grpcport() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.ProcessReadyRequest.grpcPort)
  return _internal_grpcport();
}
inline void ProcessReadyRequest::_internal_set_grpcport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcport_ = value;
}
inline void ProcessReadyRequest::set_grpcport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcport(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.ProcessReadyRequest.grpcPort)
}

// -------------------------------------------------------------------

// ActivateGameServerSessionRequest

// string gameServerSessionId = 1;
inline void ActivateGameServerSessionRequest::clear_gameserversessionid() {
  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivateGameServerSessionRequest::gameserversessionid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest.gameServerSessionId)
  return _internal_gameserversessionid();
}
inline void ActivateGameServerSessionRequest::set_gameserversessionid(const std::string& value) {
  _internal_set_gameserversessionid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest.gameServerSessionId)
}
inline std::string* ActivateGameServerSessionRequest::mutable_gameserversessionid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest.gameServerSessionId)
  return _internal_mutable_gameserversessionid();
}
inline const std::string& ActivateGameServerSessionRequest::_internal_gameserversessionid() const {
  return gameserversessionid_.GetNoArena();
}
inline void ActivateGameServerSessionRequest::_internal_set_gameserversessionid(const std::string& value) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivateGameServerSessionRequest::set_gameserversessionid(std::string&& value) {
  
  gameserversessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest.gameServerSessionId)
}
inline void ActivateGameServerSessionRequest::set_gameserversessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest.gameServerSessionId)
}
inline void ActivateGameServerSessionRequest::set_gameserversessionid(const char* value, size_t size) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest.gameServerSessionId)
}
inline std::string* ActivateGameServerSessionRequest::_internal_mutable_gameserversessionid() {
  
  return gameserversessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivateGameServerSessionRequest::release_gameserversessionid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest.gameServerSessionId)
  
  return gameserversessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivateGameServerSessionRequest::set_allocated_gameserversessionid(std::string* gameserversessionid) {
  if (gameserversessionid != nullptr) {
    
  } else {
    
  }
  gameserversessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameserversessionid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest.gameServerSessionId)
}

// int32 maxPlayers = 2;
inline void ActivateGameServerSessionRequest::clear_maxplayers() {
  maxplayers_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivateGameServerSessionRequest::_internal_maxplayers() const {
  return maxplayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivateGameServerSessionRequest::maxplayers() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest.maxPlayers)
  return _internal_maxplayers();
}
inline void ActivateGameServerSessionRequest::_internal_set_maxplayers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxplayers_ = value;
}
inline void ActivateGameServerSessionRequest::set_maxplayers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxplayers(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest.maxPlayers)
}

// -------------------------------------------------------------------

// AcceptPlayerSessionRequest

// string gameServerSessionId = 1;
inline void AcceptPlayerSessionRequest::clear_gameserversessionid() {
  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AcceptPlayerSessionRequest::gameserversessionid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.gameServerSessionId)
  return _internal_gameserversessionid();
}
inline void AcceptPlayerSessionRequest::set_gameserversessionid(const std::string& value) {
  _internal_set_gameserversessionid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.gameServerSessionId)
}
inline std::string* AcceptPlayerSessionRequest::mutable_gameserversessionid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.gameServerSessionId)
  return _internal_mutable_gameserversessionid();
}
inline const std::string& AcceptPlayerSessionRequest::_internal_gameserversessionid() const {
  return gameserversessionid_.GetNoArena();
}
inline void AcceptPlayerSessionRequest::_internal_set_gameserversessionid(const std::string& value) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AcceptPlayerSessionRequest::set_gameserversessionid(std::string&& value) {
  
  gameserversessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.gameServerSessionId)
}
inline void AcceptPlayerSessionRequest::set_gameserversessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.gameServerSessionId)
}
inline void AcceptPlayerSessionRequest::set_gameserversessionid(const char* value, size_t size) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.gameServerSessionId)
}
inline std::string* AcceptPlayerSessionRequest::_internal_mutable_gameserversessionid() {
  
  return gameserversessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AcceptPlayerSessionRequest::release_gameserversessionid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.gameServerSessionId)
  
  return gameserversessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptPlayerSessionRequest::set_allocated_gameserversessionid(std::string* gameserversessionid) {
  if (gameserversessionid != nullptr) {
    
  } else {
    
  }
  gameserversessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameserversessionid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.gameServerSessionId)
}

// string playerSessionId = 2;
inline void AcceptPlayerSessionRequest::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AcceptPlayerSessionRequest::playersessionid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.playerSessionId)
  return _internal_playersessionid();
}
inline void AcceptPlayerSessionRequest::set_playersessionid(const std::string& value) {
  _internal_set_playersessionid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.playerSessionId)
}
inline std::string* AcceptPlayerSessionRequest::mutable_playersessionid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.playerSessionId)
  return _internal_mutable_playersessionid();
}
inline const std::string& AcceptPlayerSessionRequest::_internal_playersessionid() const {
  return playersessionid_.GetNoArena();
}
inline void AcceptPlayerSessionRequest::_internal_set_playersessionid(const std::string& value) {
  
  playersessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AcceptPlayerSessionRequest::set_playersessionid(std::string&& value) {
  
  playersessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.playerSessionId)
}
inline void AcceptPlayerSessionRequest::set_playersessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playersessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.playerSessionId)
}
inline void AcceptPlayerSessionRequest::set_playersessionid(const char* value, size_t size) {
  
  playersessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.playerSessionId)
}
inline std::string* AcceptPlayerSessionRequest::_internal_mutable_playersessionid() {
  
  return playersessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AcceptPlayerSessionRequest::release_playersessionid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.playerSessionId)
  
  return playersessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptPlayerSessionRequest::set_allocated_playersessionid(std::string* playersessionid) {
  if (playersessionid != nullptr) {
    
  } else {
    
  }
  playersessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.playerSessionId)
}

// -------------------------------------------------------------------

// RemovePlayerSessionRequest

// string gameServerSessionId = 1;
inline void RemovePlayerSessionRequest::clear_gameserversessionid() {
  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemovePlayerSessionRequest::gameserversessionid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.gameServerSessionId)
  return _internal_gameserversessionid();
}
inline void RemovePlayerSessionRequest::set_gameserversessionid(const std::string& value) {
  _internal_set_gameserversessionid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.gameServerSessionId)
}
inline std::string* RemovePlayerSessionRequest::mutable_gameserversessionid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.gameServerSessionId)
  return _internal_mutable_gameserversessionid();
}
inline const std::string& RemovePlayerSessionRequest::_internal_gameserversessionid() const {
  return gameserversessionid_.GetNoArena();
}
inline void RemovePlayerSessionRequest::_internal_set_gameserversessionid(const std::string& value) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemovePlayerSessionRequest::set_gameserversessionid(std::string&& value) {
  
  gameserversessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.gameServerSessionId)
}
inline void RemovePlayerSessionRequest::set_gameserversessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.gameServerSessionId)
}
inline void RemovePlayerSessionRequest::set_gameserversessionid(const char* value, size_t size) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.gameServerSessionId)
}
inline std::string* RemovePlayerSessionRequest::_internal_mutable_gameserversessionid() {
  
  return gameserversessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemovePlayerSessionRequest::release_gameserversessionid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.gameServerSessionId)
  
  return gameserversessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePlayerSessionRequest::set_allocated_gameserversessionid(std::string* gameserversessionid) {
  if (gameserversessionid != nullptr) {
    
  } else {
    
  }
  gameserversessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameserversessionid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.gameServerSessionId)
}

// string playerSessionId = 2;
inline void RemovePlayerSessionRequest::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemovePlayerSessionRequest::playersessionid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.playerSessionId)
  return _internal_playersessionid();
}
inline void RemovePlayerSessionRequest::set_playersessionid(const std::string& value) {
  _internal_set_playersessionid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.playerSessionId)
}
inline std::string* RemovePlayerSessionRequest::mutable_playersessionid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.playerSessionId)
  return _internal_mutable_playersessionid();
}
inline const std::string& RemovePlayerSessionRequest::_internal_playersessionid() const {
  return playersessionid_.GetNoArena();
}
inline void RemovePlayerSessionRequest::_internal_set_playersessionid(const std::string& value) {
  
  playersessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemovePlayerSessionRequest::set_playersessionid(std::string&& value) {
  
  playersessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.playerSessionId)
}
inline void RemovePlayerSessionRequest::set_playersessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playersessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.playerSessionId)
}
inline void RemovePlayerSessionRequest::set_playersessionid(const char* value, size_t size) {
  
  playersessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.playerSessionId)
}
inline std::string* RemovePlayerSessionRequest::_internal_mutable_playersessionid() {
  
  return playersessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemovePlayerSessionRequest::release_playersessionid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.playerSessionId)
  
  return playersessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePlayerSessionRequest::set_allocated_playersessionid(std::string* playersessionid) {
  if (playersessionid != nullptr) {
    
  } else {
    
  }
  playersessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.playerSessionId)
}

// -------------------------------------------------------------------

// PlayerSession

// string playerSessionId = 1;
inline void PlayerSession::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerSession::playersessionid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.PlayerSession.playerSessionId)
  return _internal_playersessionid();
}
inline void PlayerSession::set_playersessionid(const std::string& value) {
  _internal_set_playersessionid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.PlayerSession.playerSessionId)
}
inline std::string* PlayerSession::mutable_playersessionid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.PlayerSession.playerSessionId)
  return _internal_mutable_playersessionid();
}
inline const std::string& PlayerSession::_internal_playersessionid() const {
  return playersessionid_.GetNoArena();
}
inline void PlayerSession::_internal_set_playersessionid(const std::string& value) {
  
  playersessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerSession::set_playersessionid(std::string&& value) {
  
  playersessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.PlayerSession.playerSessionId)
}
inline void PlayerSession::set_playersessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playersessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.PlayerSession.playerSessionId)
}
inline void PlayerSession::set_playersessionid(const char* value, size_t size) {
  
  playersessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.PlayerSession.playerSessionId)
}
inline std::string* PlayerSession::_internal_mutable_playersessionid() {
  
  return playersessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerSession::release_playersessionid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.PlayerSession.playerSessionId)
  
  return playersessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_playersessionid(std::string* playersessionid) {
  if (playersessionid != nullptr) {
    
  } else {
    
  }
  playersessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.PlayerSession.playerSessionId)
}

// string playerId = 2;
inline void PlayerSession::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerSession::playerid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.PlayerSession.playerId)
  return _internal_playerid();
}
inline void PlayerSession::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.PlayerSession.playerId)
}
inline std::string* PlayerSession::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.PlayerSession.playerId)
  return _internal_mutable_playerid();
}
inline const std::string& PlayerSession::_internal_playerid() const {
  return playerid_.GetNoArena();
}
inline void PlayerSession::_internal_set_playerid(const std::string& value) {
  
  playerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerSession::set_playerid(std::string&& value) {
  
  playerid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.PlayerSession.playerId)
}
inline void PlayerSession::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.PlayerSession.playerId)
}
inline void PlayerSession::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.PlayerSession.playerId)
}
inline std::string* PlayerSession::_internal_mutable_playerid() {
  
  return playerid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerSession::release_playerid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.PlayerSession.playerId)
  
  return playerid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.PlayerSession.playerId)
}

// string gameServerSessionId = 3;
inline void PlayerSession::clear_gameserversessionid() {
  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerSession::gameserversessionid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.PlayerSession.gameServerSessionId)
  return _internal_gameserversessionid();
}
inline void PlayerSession::set_gameserversessionid(const std::string& value) {
  _internal_set_gameserversessionid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.PlayerSession.gameServerSessionId)
}
inline std::string* PlayerSession::mutable_gameserversessionid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.PlayerSession.gameServerSessionId)
  return _internal_mutable_gameserversessionid();
}
inline const std::string& PlayerSession::_internal_gameserversessionid() const {
  return gameserversessionid_.GetNoArena();
}
inline void PlayerSession::_internal_set_gameserversessionid(const std::string& value) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerSession::set_gameserversessionid(std::string&& value) {
  
  gameserversessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.PlayerSession.gameServerSessionId)
}
inline void PlayerSession::set_gameserversessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.PlayerSession.gameServerSessionId)
}
inline void PlayerSession::set_gameserversessionid(const char* value, size_t size) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.PlayerSession.gameServerSessionId)
}
inline std::string* PlayerSession::_internal_mutable_gameserversessionid() {
  
  return gameserversessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerSession::release_gameserversessionid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.PlayerSession.gameServerSessionId)
  
  return gameserversessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_gameserversessionid(std::string* gameserversessionid) {
  if (gameserversessionid != nullptr) {
    
  } else {
    
  }
  gameserversessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameserversessionid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.PlayerSession.gameServerSessionId)
}

// string fleetId = 4;
inline void PlayerSession::clear_fleetid() {
  fleetid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerSession::fleetid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.PlayerSession.fleetId)
  return _internal_fleetid();
}
inline void PlayerSession::set_fleetid(const std::string& value) {
  _internal_set_fleetid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.PlayerSession.fleetId)
}
inline std::string* PlayerSession::mutable_fleetid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.PlayerSession.fleetId)
  return _internal_mutable_fleetid();
}
inline const std::string& PlayerSession::_internal_fleetid() const {
  return fleetid_.GetNoArena();
}
inline void PlayerSession::_internal_set_fleetid(const std::string& value) {
  
  fleetid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerSession::set_fleetid(std::string&& value) {
  
  fleetid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.PlayerSession.fleetId)
}
inline void PlayerSession::set_fleetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fleetid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.PlayerSession.fleetId)
}
inline void PlayerSession::set_fleetid(const char* value, size_t size) {
  
  fleetid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.PlayerSession.fleetId)
}
inline std::string* PlayerSession::_internal_mutable_fleetid() {
  
  return fleetid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerSession::release_fleetid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.PlayerSession.fleetId)
  
  return fleetid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_fleetid(std::string* fleetid) {
  if (fleetid != nullptr) {
    
  } else {
    
  }
  fleetid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fleetid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.PlayerSession.fleetId)
}

// string ipAddress = 5;
inline void PlayerSession::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerSession::ipaddress() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.PlayerSession.ipAddress)
  return _internal_ipaddress();
}
inline void PlayerSession::set_ipaddress(const std::string& value) {
  _internal_set_ipaddress(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.PlayerSession.ipAddress)
}
inline std::string* PlayerSession::mutable_ipaddress() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.PlayerSession.ipAddress)
  return _internal_mutable_ipaddress();
}
inline const std::string& PlayerSession::_internal_ipaddress() const {
  return ipaddress_.GetNoArena();
}
inline void PlayerSession::_internal_set_ipaddress(const std::string& value) {
  
  ipaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerSession::set_ipaddress(std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.PlayerSession.ipAddress)
}
inline void PlayerSession::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.PlayerSession.ipAddress)
}
inline void PlayerSession::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.PlayerSession.ipAddress)
}
inline std::string* PlayerSession::_internal_mutable_ipaddress() {
  
  return ipaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerSession::release_ipaddress() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.PlayerSession.ipAddress)
  
  return ipaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_ipaddress(std::string* ipaddress) {
  if (ipaddress != nullptr) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.PlayerSession.ipAddress)
}

// string status = 6;
inline void PlayerSession::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerSession::status() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.PlayerSession.status)
  return _internal_status();
}
inline void PlayerSession::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.PlayerSession.status)
}
inline std::string* PlayerSession::mutable_status() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.PlayerSession.status)
  return _internal_mutable_status();
}
inline const std::string& PlayerSession::_internal_status() const {
  return status_.GetNoArena();
}
inline void PlayerSession::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerSession::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.PlayerSession.status)
}
inline void PlayerSession::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.PlayerSession.status)
}
inline void PlayerSession::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.PlayerSession.status)
}
inline std::string* PlayerSession::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerSession::release_status() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.PlayerSession.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.PlayerSession.status)
}

// int64 creationTime = 7;
inline void PlayerSession::clear_creationtime() {
  creationtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerSession::_internal_creationtime() const {
  return creationtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerSession::creationtime() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.PlayerSession.creationTime)
  return _internal_creationtime();
}
inline void PlayerSession::_internal_set_creationtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  creationtime_ = value;
}
inline void PlayerSession::set_creationtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_creationtime(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.PlayerSession.creationTime)
}

// int64 terminationTime = 8;
inline void PlayerSession::clear_terminationtime() {
  terminationtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerSession::_internal_terminationtime() const {
  return terminationtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerSession::terminationtime() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.PlayerSession.terminationTime)
  return _internal_terminationtime();
}
inline void PlayerSession::_internal_set_terminationtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  terminationtime_ = value;
}
inline void PlayerSession::set_terminationtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_terminationtime(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.PlayerSession.terminationTime)
}

// int32 port = 9;
inline void PlayerSession::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSession::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSession::port() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.PlayerSession.port)
  return _internal_port();
}
inline void PlayerSession::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void PlayerSession::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.PlayerSession.port)
}

// string playerData = 10;
inline void PlayerSession::clear_playerdata() {
  playerdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerSession::playerdata() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.PlayerSession.playerData)
  return _internal_playerdata();
}
inline void PlayerSession::set_playerdata(const std::string& value) {
  _internal_set_playerdata(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.PlayerSession.playerData)
}
inline std::string* PlayerSession::mutable_playerdata() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.PlayerSession.playerData)
  return _internal_mutable_playerdata();
}
inline const std::string& PlayerSession::_internal_playerdata() const {
  return playerdata_.GetNoArena();
}
inline void PlayerSession::_internal_set_playerdata(const std::string& value) {
  
  playerdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerSession::set_playerdata(std::string&& value) {
  
  playerdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.PlayerSession.playerData)
}
inline void PlayerSession::set_playerdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playerdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.PlayerSession.playerData)
}
inline void PlayerSession::set_playerdata(const char* value, size_t size) {
  
  playerdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.PlayerSession.playerData)
}
inline std::string* PlayerSession::_internal_mutable_playerdata() {
  
  return playerdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerSession::release_playerdata() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.PlayerSession.playerData)
  
  return playerdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_playerdata(std::string* playerdata) {
  if (playerdata != nullptr) {
    
  } else {
    
  }
  playerdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerdata);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.PlayerSession.playerData)
}

// string dnsName = 11;
inline void PlayerSession::clear_dnsname() {
  dnsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerSession::dnsname() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.PlayerSession.dnsName)
  return _internal_dnsname();
}
inline void PlayerSession::set_dnsname(const std::string& value) {
  _internal_set_dnsname(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.PlayerSession.dnsName)
}
inline std::string* PlayerSession::mutable_dnsname() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.PlayerSession.dnsName)
  return _internal_mutable_dnsname();
}
inline const std::string& PlayerSession::_internal_dnsname() const {
  return dnsname_.GetNoArena();
}
inline void PlayerSession::_internal_set_dnsname(const std::string& value) {
  
  dnsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerSession::set_dnsname(std::string&& value) {
  
  dnsname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.PlayerSession.dnsName)
}
inline void PlayerSession::set_dnsname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dnsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.PlayerSession.dnsName)
}
inline void PlayerSession::set_dnsname(const char* value, size_t size) {
  
  dnsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.PlayerSession.dnsName)
}
inline std::string* PlayerSession::_internal_mutable_dnsname() {
  
  return dnsname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerSession::release_dnsname() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.PlayerSession.dnsName)
  
  return dnsname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_dnsname(std::string* dnsname) {
  if (dnsname != nullptr) {
    
  } else {
    
  }
  dnsname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dnsname);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.PlayerSession.dnsName)
}

// -------------------------------------------------------------------

// DescribePlayerSessionsRequest

// string gameServerSessionId = 1;
inline void DescribePlayerSessionsRequest::clear_gameserversessionid() {
  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribePlayerSessionsRequest::gameserversessionid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.gameServerSessionId)
  return _internal_gameserversessionid();
}
inline void DescribePlayerSessionsRequest::set_gameserversessionid(const std::string& value) {
  _internal_set_gameserversessionid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.gameServerSessionId)
}
inline std::string* DescribePlayerSessionsRequest::mutable_gameserversessionid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.gameServerSessionId)
  return _internal_mutable_gameserversessionid();
}
inline const std::string& DescribePlayerSessionsRequest::_internal_gameserversessionid() const {
  return gameserversessionid_.GetNoArena();
}
inline void DescribePlayerSessionsRequest::_internal_set_gameserversessionid(const std::string& value) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DescribePlayerSessionsRequest::set_gameserversessionid(std::string&& value) {
  
  gameserversessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.gameServerSessionId)
}
inline void DescribePlayerSessionsRequest::set_gameserversessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.gameServerSessionId)
}
inline void DescribePlayerSessionsRequest::set_gameserversessionid(const char* value, size_t size) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.gameServerSessionId)
}
inline std::string* DescribePlayerSessionsRequest::_internal_mutable_gameserversessionid() {
  
  return gameserversessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribePlayerSessionsRequest::release_gameserversessionid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.gameServerSessionId)
  
  return gameserversessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribePlayerSessionsRequest::set_allocated_gameserversessionid(std::string* gameserversessionid) {
  if (gameserversessionid != nullptr) {
    
  } else {
    
  }
  gameserversessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameserversessionid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.gameServerSessionId)
}

// string playerId = 2;
inline void DescribePlayerSessionsRequest::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribePlayerSessionsRequest::playerid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerId)
  return _internal_playerid();
}
inline void DescribePlayerSessionsRequest::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerId)
}
inline std::string* DescribePlayerSessionsRequest::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerId)
  return _internal_mutable_playerid();
}
inline const std::string& DescribePlayerSessionsRequest::_internal_playerid() const {
  return playerid_.GetNoArena();
}
inline void DescribePlayerSessionsRequest::_internal_set_playerid(const std::string& value) {
  
  playerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DescribePlayerSessionsRequest::set_playerid(std::string&& value) {
  
  playerid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerId)
}
inline void DescribePlayerSessionsRequest::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerId)
}
inline void DescribePlayerSessionsRequest::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerId)
}
inline std::string* DescribePlayerSessionsRequest::_internal_mutable_playerid() {
  
  return playerid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribePlayerSessionsRequest::release_playerid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerId)
  
  return playerid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribePlayerSessionsRequest::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerId)
}

// string playerSessionId = 3;
inline void DescribePlayerSessionsRequest::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribePlayerSessionsRequest::playersessionid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionId)
  return _internal_playersessionid();
}
inline void DescribePlayerSessionsRequest::set_playersessionid(const std::string& value) {
  _internal_set_playersessionid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionId)
}
inline std::string* DescribePlayerSessionsRequest::mutable_playersessionid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionId)
  return _internal_mutable_playersessionid();
}
inline const std::string& DescribePlayerSessionsRequest::_internal_playersessionid() const {
  return playersessionid_.GetNoArena();
}
inline void DescribePlayerSessionsRequest::_internal_set_playersessionid(const std::string& value) {
  
  playersessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DescribePlayerSessionsRequest::set_playersessionid(std::string&& value) {
  
  playersessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionId)
}
inline void DescribePlayerSessionsRequest::set_playersessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playersessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionId)
}
inline void DescribePlayerSessionsRequest::set_playersessionid(const char* value, size_t size) {
  
  playersessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionId)
}
inline std::string* DescribePlayerSessionsRequest::_internal_mutable_playersessionid() {
  
  return playersessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribePlayerSessionsRequest::release_playersessionid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionId)
  
  return playersessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribePlayerSessionsRequest::set_allocated_playersessionid(std::string* playersessionid) {
  if (playersessionid != nullptr) {
    
  } else {
    
  }
  playersessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionId)
}

// string playerSessionStatusFilter = 4;
inline void DescribePlayerSessionsRequest::clear_playersessionstatusfilter() {
  playersessionstatusfilter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribePlayerSessionsRequest::playersessionstatusfilter() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionStatusFilter)
  return _internal_playersessionstatusfilter();
}
inline void DescribePlayerSessionsRequest::set_playersessionstatusfilter(const std::string& value) {
  _internal_set_playersessionstatusfilter(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
inline std::string* DescribePlayerSessionsRequest::mutable_playersessionstatusfilter() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionStatusFilter)
  return _internal_mutable_playersessionstatusfilter();
}
inline const std::string& DescribePlayerSessionsRequest::_internal_playersessionstatusfilter() const {
  return playersessionstatusfilter_.GetNoArena();
}
inline void DescribePlayerSessionsRequest::_internal_set_playersessionstatusfilter(const std::string& value) {
  
  playersessionstatusfilter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DescribePlayerSessionsRequest::set_playersessionstatusfilter(std::string&& value) {
  
  playersessionstatusfilter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
inline void DescribePlayerSessionsRequest::set_playersessionstatusfilter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playersessionstatusfilter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
inline void DescribePlayerSessionsRequest::set_playersessionstatusfilter(const char* value, size_t size) {
  
  playersessionstatusfilter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
inline std::string* DescribePlayerSessionsRequest::_internal_mutable_playersessionstatusfilter() {
  
  return playersessionstatusfilter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribePlayerSessionsRequest::release_playersessionstatusfilter() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionStatusFilter)
  
  return playersessionstatusfilter_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribePlayerSessionsRequest::set_allocated_playersessionstatusfilter(std::string* playersessionstatusfilter) {
  if (playersessionstatusfilter != nullptr) {
    
  } else {
    
  }
  playersessionstatusfilter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playersessionstatusfilter);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}

// string nextToken = 5;
inline void DescribePlayerSessionsRequest::clear_nexttoken() {
  nexttoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribePlayerSessionsRequest::nexttoken() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.nextToken)
  return _internal_nexttoken();
}
inline void DescribePlayerSessionsRequest::set_nexttoken(const std::string& value) {
  _internal_set_nexttoken(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.nextToken)
}
inline std::string* DescribePlayerSessionsRequest::mutable_nexttoken() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.nextToken)
  return _internal_mutable_nexttoken();
}
inline const std::string& DescribePlayerSessionsRequest::_internal_nexttoken() const {
  return nexttoken_.GetNoArena();
}
inline void DescribePlayerSessionsRequest::_internal_set_nexttoken(const std::string& value) {
  
  nexttoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DescribePlayerSessionsRequest::set_nexttoken(std::string&& value) {
  
  nexttoken_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.nextToken)
}
inline void DescribePlayerSessionsRequest::set_nexttoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nexttoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.nextToken)
}
inline void DescribePlayerSessionsRequest::set_nexttoken(const char* value, size_t size) {
  
  nexttoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.nextToken)
}
inline std::string* DescribePlayerSessionsRequest::_internal_mutable_nexttoken() {
  
  return nexttoken_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribePlayerSessionsRequest::release_nexttoken() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.nextToken)
  
  return nexttoken_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribePlayerSessionsRequest::set_allocated_nexttoken(std::string* nexttoken) {
  if (nexttoken != nullptr) {
    
  } else {
    
  }
  nexttoken_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nexttoken);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.nextToken)
}

// int32 limit = 6;
inline void DescribePlayerSessionsRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DescribePlayerSessionsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DescribePlayerSessionsRequest::limit() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.limit)
  return _internal_limit();
}
inline void DescribePlayerSessionsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void DescribePlayerSessionsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.limit)
}

// -------------------------------------------------------------------

// DescribePlayerSessionsResponse

// string nextToken = 1;
inline void DescribePlayerSessionsResponse::clear_nexttoken() {
  nexttoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DescribePlayerSessionsResponse::nexttoken() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.nextToken)
  return _internal_nexttoken();
}
inline void DescribePlayerSessionsResponse::set_nexttoken(const std::string& value) {
  _internal_set_nexttoken(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.nextToken)
}
inline std::string* DescribePlayerSessionsResponse::mutable_nexttoken() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.nextToken)
  return _internal_mutable_nexttoken();
}
inline const std::string& DescribePlayerSessionsResponse::_internal_nexttoken() const {
  return nexttoken_.GetNoArena();
}
inline void DescribePlayerSessionsResponse::_internal_set_nexttoken(const std::string& value) {
  
  nexttoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DescribePlayerSessionsResponse::set_nexttoken(std::string&& value) {
  
  nexttoken_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.nextToken)
}
inline void DescribePlayerSessionsResponse::set_nexttoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nexttoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.nextToken)
}
inline void DescribePlayerSessionsResponse::set_nexttoken(const char* value, size_t size) {
  
  nexttoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.nextToken)
}
inline std::string* DescribePlayerSessionsResponse::_internal_mutable_nexttoken() {
  
  return nexttoken_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DescribePlayerSessionsResponse::release_nexttoken() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.nextToken)
  
  return nexttoken_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DescribePlayerSessionsResponse::set_allocated_nexttoken(std::string* nexttoken) {
  if (nexttoken != nullptr) {
    
  } else {
    
  }
  nexttoken_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nexttoken);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.nextToken)
}

// repeated .tencentcloud.gse.grpcsdk.PlayerSession playerSessions = 2;
inline int DescribePlayerSessionsResponse::_internal_playersessions_size() const {
  return playersessions_.size();
}
inline int DescribePlayerSessionsResponse::playersessions_size() const {
  return _internal_playersessions_size();
}
inline void DescribePlayerSessionsResponse::clear_playersessions() {
  playersessions_.Clear();
}
inline ::tencentcloud::gse::grpcsdk::PlayerSession* DescribePlayerSessionsResponse::mutable_playersessions(int index) {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tencentcloud::gse::grpcsdk::PlayerSession >*
DescribePlayerSessionsResponse::mutable_playersessions() {
  // @@protoc_insertion_point(field_mutable_list:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.playerSessions)
  return &playersessions_;
}
inline const ::tencentcloud::gse::grpcsdk::PlayerSession& DescribePlayerSessionsResponse::_internal_playersessions(int index) const {
  return playersessions_.Get(index);
}
inline const ::tencentcloud::gse::grpcsdk::PlayerSession& DescribePlayerSessionsResponse::playersessions(int index) const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.playerSessions)
  return _internal_playersessions(index);
}
inline ::tencentcloud::gse::grpcsdk::PlayerSession* DescribePlayerSessionsResponse::_internal_add_playersessions() {
  return playersessions_.Add();
}
inline ::tencentcloud::gse::grpcsdk::PlayerSession* DescribePlayerSessionsResponse::add_playersessions() {
  // @@protoc_insertion_point(field_add:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.playerSessions)
  return _internal_add_playersessions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tencentcloud::gse::grpcsdk::PlayerSession >&
DescribePlayerSessionsResponse::playersessions() const {
  // @@protoc_insertion_point(field_list:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_;
}

// -------------------------------------------------------------------

// UpdatePlayerSessionCreationPolicyRequest

// string gameServerSessionId = 1;
inline void UpdatePlayerSessionCreationPolicyRequest::clear_gameserversessionid() {
  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdatePlayerSessionCreationPolicyRequest::gameserversessionid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.gameServerSessionId)
  return _internal_gameserversessionid();
}
inline void UpdatePlayerSessionCreationPolicyRequest::set_gameserversessionid(const std::string& value) {
  _internal_set_gameserversessionid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.gameServerSessionId)
}
inline std::string* UpdatePlayerSessionCreationPolicyRequest::mutable_gameserversessionid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.gameServerSessionId)
  return _internal_mutable_gameserversessionid();
}
inline const std::string& UpdatePlayerSessionCreationPolicyRequest::_internal_gameserversessionid() const {
  return gameserversessionid_.GetNoArena();
}
inline void UpdatePlayerSessionCreationPolicyRequest::_internal_set_gameserversessionid(const std::string& value) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdatePlayerSessionCreationPolicyRequest::set_gameserversessionid(std::string&& value) {
  
  gameserversessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.gameServerSessionId)
}
inline void UpdatePlayerSessionCreationPolicyRequest::set_gameserversessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.gameServerSessionId)
}
inline void UpdatePlayerSessionCreationPolicyRequest::set_gameserversessionid(const char* value, size_t size) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.gameServerSessionId)
}
inline std::string* UpdatePlayerSessionCreationPolicyRequest::_internal_mutable_gameserversessionid() {
  
  return gameserversessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdatePlayerSessionCreationPolicyRequest::release_gameserversessionid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.gameServerSessionId)
  
  return gameserversessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdatePlayerSessionCreationPolicyRequest::set_allocated_gameserversessionid(std::string* gameserversessionid) {
  if (gameserversessionid != nullptr) {
    
  } else {
    
  }
  gameserversessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameserversessionid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.gameServerSessionId)
}

// string newPlayerSessionCreationPolicy = 2;
inline void UpdatePlayerSessionCreationPolicyRequest::clear_newplayersessioncreationpolicy() {
  newplayersessioncreationpolicy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdatePlayerSessionCreationPolicyRequest::newplayersessioncreationpolicy() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.newPlayerSessionCreationPolicy)
  return _internal_newplayersessioncreationpolicy();
}
inline void UpdatePlayerSessionCreationPolicyRequest::set_newplayersessioncreationpolicy(const std::string& value) {
  _internal_set_newplayersessioncreationpolicy(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.newPlayerSessionCreationPolicy)
}
inline std::string* UpdatePlayerSessionCreationPolicyRequest::mutable_newplayersessioncreationpolicy() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.newPlayerSessionCreationPolicy)
  return _internal_mutable_newplayersessioncreationpolicy();
}
inline const std::string& UpdatePlayerSessionCreationPolicyRequest::_internal_newplayersessioncreationpolicy() const {
  return newplayersessioncreationpolicy_.GetNoArena();
}
inline void UpdatePlayerSessionCreationPolicyRequest::_internal_set_newplayersessioncreationpolicy(const std::string& value) {
  
  newplayersessioncreationpolicy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdatePlayerSessionCreationPolicyRequest::set_newplayersessioncreationpolicy(std::string&& value) {
  
  newplayersessioncreationpolicy_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.newPlayerSessionCreationPolicy)
}
inline void UpdatePlayerSessionCreationPolicyRequest::set_newplayersessioncreationpolicy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newplayersessioncreationpolicy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.newPlayerSessionCreationPolicy)
}
inline void UpdatePlayerSessionCreationPolicyRequest::set_newplayersessioncreationpolicy(const char* value, size_t size) {
  
  newplayersessioncreationpolicy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.newPlayerSessionCreationPolicy)
}
inline std::string* UpdatePlayerSessionCreationPolicyRequest::_internal_mutable_newplayersessioncreationpolicy() {
  
  return newplayersessioncreationpolicy_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdatePlayerSessionCreationPolicyRequest::release_newplayersessioncreationpolicy() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.newPlayerSessionCreationPolicy)
  
  return newplayersessioncreationpolicy_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdatePlayerSessionCreationPolicyRequest::set_allocated_newplayersessioncreationpolicy(std::string* newplayersessioncreationpolicy) {
  if (newplayersessioncreationpolicy != nullptr) {
    
  } else {
    
  }
  newplayersessioncreationpolicy_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newplayersessioncreationpolicy);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.newPlayerSessionCreationPolicy)
}

// -------------------------------------------------------------------

// TerminateGameServerSessionRequest

// string gameServerSessionId = 1;
inline void TerminateGameServerSessionRequest::clear_gameserversessionid() {
  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TerminateGameServerSessionRequest::gameserversessionid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest.gameServerSessionId)
  return _internal_gameserversessionid();
}
inline void TerminateGameServerSessionRequest::set_gameserversessionid(const std::string& value) {
  _internal_set_gameserversessionid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest.gameServerSessionId)
}
inline std::string* TerminateGameServerSessionRequest::mutable_gameserversessionid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest.gameServerSessionId)
  return _internal_mutable_gameserversessionid();
}
inline const std::string& TerminateGameServerSessionRequest::_internal_gameserversessionid() const {
  return gameserversessionid_.GetNoArena();
}
inline void TerminateGameServerSessionRequest::_internal_set_gameserversessionid(const std::string& value) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TerminateGameServerSessionRequest::set_gameserversessionid(std::string&& value) {
  
  gameserversessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest.gameServerSessionId)
}
inline void TerminateGameServerSessionRequest::set_gameserversessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest.gameServerSessionId)
}
inline void TerminateGameServerSessionRequest::set_gameserversessionid(const char* value, size_t size) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest.gameServerSessionId)
}
inline std::string* TerminateGameServerSessionRequest::_internal_mutable_gameserversessionid() {
  
  return gameserversessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TerminateGameServerSessionRequest::release_gameserversessionid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest.gameServerSessionId)
  
  return gameserversessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TerminateGameServerSessionRequest::set_allocated_gameserversessionid(std::string* gameserversessionid) {
  if (gameserversessionid != nullptr) {
    
  } else {
    
  }
  gameserversessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameserversessionid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest.gameServerSessionId)
}

// -------------------------------------------------------------------

// ProcessEndingRequest

// -------------------------------------------------------------------

// ReportCustomDataRequest

// int32 currentCustomCount = 1;
inline void ReportCustomDataRequest::clear_currentcustomcount() {
  currentcustomcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportCustomDataRequest::_internal_currentcustomcount() const {
  return currentcustomcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportCustomDataRequest::currentcustomcount() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.ReportCustomDataRequest.currentCustomCount)
  return _internal_currentcustomcount();
}
inline void ReportCustomDataRequest::_internal_set_currentcustomcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currentcustomcount_ = value;
}
inline void ReportCustomDataRequest::set_currentcustomcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currentcustomcount(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.ReportCustomDataRequest.currentCustomCount)
}

// int32 maxCustomCount = 2;
inline void ReportCustomDataRequest::clear_maxcustomcount() {
  maxcustomcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportCustomDataRequest::_internal_maxcustomcount() const {
  return maxcustomcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportCustomDataRequest::maxcustomcount() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.ReportCustomDataRequest.maxCustomCount)
  return _internal_maxcustomcount();
}
inline void ReportCustomDataRequest::_internal_set_maxcustomcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxcustomcount_ = value;
}
inline void ReportCustomDataRequest::set_maxcustomcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxcustomcount(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.ReportCustomDataRequest.maxCustomCount)
}

// -------------------------------------------------------------------

// GseResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcsdk
}  // namespace gse
}  // namespace tencentcloud

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GseGrpcSdkService_2eproto

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: GameServerGrpcSdkService.proto
#ifndef GRPC_GameServerGrpcSdkService_2eproto__INCLUDED
#define GRPC_GameServerGrpcSdkService_2eproto__INCLUDED

#include "GameServerGrpcSdkService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace tencentcloud {
namespace gse {
namespace grpcsdk {

class GameServerGrpcSdkService final {
 public:
  static constexpr char const* service_full_name() {
    return "tencentcloud.gse.grpcsdk.GameServerGrpcSdkService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 接收健康检查请求
    virtual ::grpc::Status OnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest& request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>> AsyncOnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>>(AsyncOnHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>> PrepareAsyncOnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>>(PrepareAsyncOnHealthCheckRaw(context, request, cq));
    }
    // 接收游戏会话
    virtual ::grpc::Status OnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncOnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncOnStartGameServerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncOnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncOnStartGameServerSessionRaw(context, request, cq));
    }
    // 结束游戏进程
    virtual ::grpc::Status OnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncOnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncOnProcessTerminateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncOnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncOnProcessTerminateRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 接收健康检查请求
      virtual void OnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnHealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OnHealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OnHealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 接收游戏会话
      virtual void OnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnStartGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OnStartGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OnStartGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 结束游戏进程
      virtual void OnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnProcessTerminate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OnProcessTerminate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OnProcessTerminate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>* AsyncOnHealthCheckRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>* PrepareAsyncOnHealthCheckRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncOnStartGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncOnStartGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncOnProcessTerminateRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncOnProcessTerminateRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status OnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest& request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>> AsyncOnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>>(AsyncOnHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>> PrepareAsyncOnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>>(PrepareAsyncOnHealthCheckRaw(context, request, cq));
    }
    ::grpc::Status OnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncOnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncOnStartGameServerSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncOnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncOnStartGameServerSessionRaw(context, request, cq));
    }
    ::grpc::Status OnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest& request, ::tencentcloud::gse::grpcsdk::GseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> AsyncOnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(AsyncOnProcessTerminateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>> PrepareAsyncOnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>>(PrepareAsyncOnProcessTerminateRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void OnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void OnHealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OnHealthCheck(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OnHealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OnHealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void OnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      void OnStartGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OnStartGameServerSession(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OnStartGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OnStartGameServerSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void OnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      void OnProcessTerminate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OnProcessTerminate(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OnProcessTerminate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OnProcessTerminate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tencentcloud::gse::grpcsdk::GseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>* AsyncOnHealthCheckRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>* PrepareAsyncOnHealthCheckRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncOnStartGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncOnStartGameServerSessionRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* AsyncOnProcessTerminateRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tencentcloud::gse::grpcsdk::GseResponse>* PrepareAsyncOnProcessTerminateRaw(::grpc::ClientContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_OnHealthCheck_;
    const ::grpc::internal::RpcMethod rpcmethod_OnStartGameServerSession_;
    const ::grpc::internal::RpcMethod rpcmethod_OnProcessTerminate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 接收健康检查请求
    virtual ::grpc::Status OnHealthCheck(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response);
    // 接收游戏会话
    virtual ::grpc::Status OnStartGameServerSession(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response);
    // 结束游戏进程
    virtual ::grpc::Status OnProcessTerminate(::grpc::ServerContext* context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_OnHealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnHealthCheck() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_OnHealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnHealthCheck(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* /*request*/, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnHealthCheck(::grpc::ServerContext* context, ::tencentcloud::gse::grpcsdk::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::tencentcloud::gse::grpcsdk::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnStartGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnStartGameServerSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OnStartGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStartGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnStartGameServerSession(::grpc::ServerContext* context, ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tencentcloud::gse::grpcsdk::GseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnProcessTerminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnProcessTerminate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OnProcessTerminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnProcessTerminate(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnProcessTerminate(::grpc::ServerContext* context, ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* request, ::grpc::ServerAsyncResponseWriter< ::tencentcloud::gse::grpcsdk::GseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_OnHealthCheck<WithAsyncMethod_OnStartGameServerSession<WithAsyncMethod_OnProcessTerminate<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OnHealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OnHealthCheck() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::HealthCheckRequest, ::tencentcloud::gse::grpcsdk::HealthCheckResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* request, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* response) { return this->OnHealthCheck(context, request, response); }));}
    void SetMessageAllocatorFor_OnHealthCheck(
        ::grpc::experimental::MessageAllocator< ::tencentcloud::gse::grpcsdk::HealthCheckRequest, ::tencentcloud::gse::grpcsdk::HealthCheckResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::HealthCheckRequest, ::tencentcloud::gse::grpcsdk::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OnHealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnHealthCheck(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* /*request*/, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OnHealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* /*request*/, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OnHealthCheck(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* /*request*/, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OnStartGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OnStartGameServerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) { return this->OnStartGameServerSession(context, request, response); }));}
    void SetMessageAllocatorFor_OnStartGameServerSession(
        ::grpc::experimental::MessageAllocator< ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OnStartGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStartGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OnStartGameServerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OnStartGameServerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OnProcessTerminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OnProcessTerminate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* request, ::tencentcloud::gse::grpcsdk::GseResponse* response) { return this->OnProcessTerminate(context, request, response); }));}
    void SetMessageAllocatorFor_OnProcessTerminate(
        ::grpc::experimental::MessageAllocator< ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest, ::tencentcloud::gse::grpcsdk::GseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest, ::tencentcloud::gse::grpcsdk::GseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OnProcessTerminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnProcessTerminate(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OnProcessTerminate(
      ::grpc::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OnProcessTerminate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_OnHealthCheck<ExperimentalWithCallbackMethod_OnStartGameServerSession<ExperimentalWithCallbackMethod_OnProcessTerminate<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_OnHealthCheck<ExperimentalWithCallbackMethod_OnStartGameServerSession<ExperimentalWithCallbackMethod_OnProcessTerminate<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_OnHealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnHealthCheck() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_OnHealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnHealthCheck(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* /*request*/, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnStartGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnStartGameServerSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OnStartGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStartGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnProcessTerminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnProcessTerminate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OnProcessTerminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnProcessTerminate(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnHealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnHealthCheck() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_OnHealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnHealthCheck(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* /*request*/, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnStartGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnStartGameServerSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_OnStartGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStartGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnStartGameServerSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnProcessTerminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnProcessTerminate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_OnProcessTerminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnProcessTerminate(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnProcessTerminate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OnHealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OnHealthCheck() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OnHealthCheck(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OnHealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnHealthCheck(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* /*request*/, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OnHealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OnHealthCheck(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OnStartGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OnStartGameServerSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OnStartGameServerSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OnStartGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStartGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OnStartGameServerSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OnStartGameServerSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OnProcessTerminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OnProcessTerminate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OnProcessTerminate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OnProcessTerminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnProcessTerminate(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OnProcessTerminate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OnProcessTerminate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnHealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OnHealthCheck() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::tencentcloud::gse::grpcsdk::HealthCheckRequest, ::tencentcloud::gse::grpcsdk::HealthCheckResponse>(std::bind(&WithStreamedUnaryMethod_OnHealthCheck<BaseClass>::StreamedOnHealthCheck, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OnHealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnHealthCheck(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::HealthCheckRequest* /*request*/, ::tencentcloud::gse::grpcsdk::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tencentcloud::gse::grpcsdk::HealthCheckRequest,::tencentcloud::gse::grpcsdk::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnStartGameServerSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OnStartGameServerSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(std::bind(&WithStreamedUnaryMethod_OnStartGameServerSession<BaseClass>::StreamedOnStartGameServerSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OnStartGameServerSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnStartGameServerSession(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnStartGameServerSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest,::tencentcloud::gse::grpcsdk::GseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnProcessTerminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OnProcessTerminate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest, ::tencentcloud::gse::grpcsdk::GseResponse>(std::bind(&WithStreamedUnaryMethod_OnProcessTerminate<BaseClass>::StreamedOnProcessTerminate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OnProcessTerminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnProcessTerminate(::grpc::ServerContext* /*context*/, const ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* /*request*/, ::tencentcloud::gse::grpcsdk::GseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnProcessTerminate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest,::tencentcloud::gse::grpcsdk::GseResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_OnHealthCheck<WithStreamedUnaryMethod_OnStartGameServerSession<WithStreamedUnaryMethod_OnProcessTerminate<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_OnHealthCheck<WithStreamedUnaryMethod_OnStartGameServerSession<WithStreamedUnaryMethod_OnProcessTerminate<Service > > > StreamedService;
};

}  // namespace grpcsdk
}  // namespace gse
}  // namespace tencentcloud


#endif  // GRPC_GameServerGrpcSdkService_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GseGrpcSdkService.proto

#include "GseGrpcSdkService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_GseGrpcSdkService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerSession_GseGrpcSdkService_2eproto;
namespace tencentcloud {
namespace gse {
namespace grpcsdk {
class ProcessReadyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessReadyRequest> _instance;
} _ProcessReadyRequest_default_instance_;
class ActivateGameServerSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivateGameServerSessionRequest> _instance;
} _ActivateGameServerSessionRequest_default_instance_;
class AcceptPlayerSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptPlayerSessionRequest> _instance;
} _AcceptPlayerSessionRequest_default_instance_;
class RemovePlayerSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemovePlayerSessionRequest> _instance;
} _RemovePlayerSessionRequest_default_instance_;
class PlayerSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerSession> _instance;
} _PlayerSession_default_instance_;
class DescribePlayerSessionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribePlayerSessionsRequest> _instance;
} _DescribePlayerSessionsRequest_default_instance_;
class DescribePlayerSessionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescribePlayerSessionsResponse> _instance;
} _DescribePlayerSessionsResponse_default_instance_;
class UpdatePlayerSessionCreationPolicyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePlayerSessionCreationPolicyRequest> _instance;
} _UpdatePlayerSessionCreationPolicyRequest_default_instance_;
class TerminateGameServerSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TerminateGameServerSessionRequest> _instance;
} _TerminateGameServerSessionRequest_default_instance_;
class ProcessEndingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessEndingRequest> _instance;
} _ProcessEndingRequest_default_instance_;
class ReportCustomDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportCustomDataRequest> _instance;
} _ReportCustomDataRequest_default_instance_;
class GseResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GseResponse> _instance;
} _GseResponse_default_instance_;
}  // namespace grpcsdk
}  // namespace gse
}  // namespace tencentcloud
static void InitDefaultsscc_info_AcceptPlayerSessionRequest_GseGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_AcceptPlayerSessionRequest_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcceptPlayerSessionRequest_GseGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AcceptPlayerSessionRequest_GseGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_ActivateGameServerSessionRequest_GseGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_ActivateGameServerSessionRequest_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivateGameServerSessionRequest_GseGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActivateGameServerSessionRequest_GseGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_DescribePlayerSessionsRequest_GseGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_DescribePlayerSessionsRequest_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DescribePlayerSessionsRequest_GseGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DescribePlayerSessionsRequest_GseGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_DescribePlayerSessionsResponse_GseGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_DescribePlayerSessionsResponse_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescribePlayerSessionsResponse_GseGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DescribePlayerSessionsResponse_GseGrpcSdkService_2eproto}, {
      &scc_info_PlayerSession_GseGrpcSdkService_2eproto.base,}};

static void InitDefaultsscc_info_GseResponse_GseGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_GseResponse_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::GseResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::GseResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GseResponse_GseGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GseResponse_GseGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_PlayerSession_GseGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_PlayerSession_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::PlayerSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::PlayerSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerSession_GseGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerSession_GseGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_ProcessEndingRequest_GseGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_ProcessEndingRequest_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::ProcessEndingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::ProcessEndingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessEndingRequest_GseGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessEndingRequest_GseGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_ProcessReadyRequest_GseGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_ProcessReadyRequest_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::ProcessReadyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::ProcessReadyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessReadyRequest_GseGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessReadyRequest_GseGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_RemovePlayerSessionRequest_GseGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_RemovePlayerSessionRequest_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemovePlayerSessionRequest_GseGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemovePlayerSessionRequest_GseGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_ReportCustomDataRequest_GseGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_ReportCustomDataRequest_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportCustomDataRequest_GseGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReportCustomDataRequest_GseGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_TerminateGameServerSessionRequest_GseGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_TerminateGameServerSessionRequest_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TerminateGameServerSessionRequest_GseGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TerminateGameServerSessionRequest_GseGrpcSdkService_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePlayerSessionCreationPolicyRequest_GseGrpcSdkService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencentcloud::gse::grpcsdk::_UpdatePlayerSessionCreationPolicyRequest_default_instance_;
    new (ptr) ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePlayerSessionCreationPolicyRequest_GseGrpcSdkService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdatePlayerSessionCreationPolicyRequest_GseGrpcSdkService_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GseGrpcSdkService_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_GseGrpcSdkService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GseGrpcSdkService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GseGrpcSdkService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::ProcessReadyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::ProcessReadyRequest, logpathstoupload_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::ProcessReadyRequest, clientport_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::ProcessReadyRequest, grpcport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest, gameserversessionid_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest, maxplayers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest, gameserversessionid_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest, playersessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest, gameserversessionid_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest, playersessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::PlayerSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::PlayerSession, playersessionid_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::PlayerSession, playerid_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::PlayerSession, gameserversessionid_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::PlayerSession, fleetid_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::PlayerSession, ipaddress_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::PlayerSession, status_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::PlayerSession, creationtime_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::PlayerSession, terminationtime_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::PlayerSession, port_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::PlayerSession, playerdata_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::PlayerSession, dnsname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest, gameserversessionid_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest, playerid_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest, playersessionid_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest, playersessionstatusfilter_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest, nexttoken_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse, nexttoken_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse, playersessions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest, gameserversessionid_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest, newplayersessioncreationpolicy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest, gameserversessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::ProcessEndingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::ReportCustomDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::ReportCustomDataRequest, currentcustomcount_),
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::ReportCustomDataRequest, maxcustomcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tencentcloud::gse::grpcsdk::GseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tencentcloud::gse::grpcsdk::ProcessReadyRequest)},
  { 8, -1, sizeof(::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest)},
  { 15, -1, sizeof(::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest)},
  { 22, -1, sizeof(::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest)},
  { 29, -1, sizeof(::tencentcloud::gse::grpcsdk::PlayerSession)},
  { 45, -1, sizeof(::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest)},
  { 56, -1, sizeof(::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse)},
  { 63, -1, sizeof(::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest)},
  { 70, -1, sizeof(::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest)},
  { 76, -1, sizeof(::tencentcloud::gse::grpcsdk::ProcessEndingRequest)},
  { 81, -1, sizeof(::tencentcloud::gse::grpcsdk::ReportCustomDataRequest)},
  { 88, -1, sizeof(::tencentcloud::gse::grpcsdk::GseResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_ProcessReadyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_ActivateGameServerSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_AcceptPlayerSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_RemovePlayerSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_PlayerSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_DescribePlayerSessionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_DescribePlayerSessionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_UpdatePlayerSessionCreationPolicyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_TerminateGameServerSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_ProcessEndingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_ReportCustomDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencentcloud::gse::grpcsdk::_GseResponse_default_instance_),
};

const char descriptor_table_protodef_GseGrpcSdkService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027GseGrpcSdkService.proto\022\030tencentcloud."
  "gse.grpcsdk\"U\n\023ProcessReadyRequest\022\030\n\020lo"
  "gPathsToUpload\030\001 \003(\t\022\022\n\nclientPort\030\002 \001(\005"
  "\022\020\n\010grpcPort\030\003 \001(\005\"S\n ActivateGameServer"
  "SessionRequest\022\033\n\023gameServerSessionId\030\001 "
  "\001(\t\022\022\n\nmaxPlayers\030\002 \001(\005\"R\n\032AcceptPlayerS"
  "essionRequest\022\033\n\023gameServerSessionId\030\001 \001"
  "(\t\022\027\n\017playerSessionId\030\002 \001(\t\"R\n\032RemovePla"
  "yerSessionRequest\022\033\n\023gameServerSessionId"
  "\030\001 \001(\t\022\027\n\017playerSessionId\030\002 \001(\t\"\355\001\n\rPlay"
  "erSession\022\027\n\017playerSessionId\030\001 \001(\t\022\020\n\010pl"
  "ayerId\030\002 \001(\t\022\033\n\023gameServerSessionId\030\003 \001("
  "\t\022\017\n\007fleetId\030\004 \001(\t\022\021\n\tipAddress\030\005 \001(\t\022\016\n"
  "\006status\030\006 \001(\t\022\024\n\014creationTime\030\007 \001(\003\022\027\n\017t"
  "erminationTime\030\010 \001(\003\022\014\n\004port\030\t \001(\005\022\022\n\npl"
  "ayerData\030\n \001(\t\022\017\n\007dnsName\030\013 \001(\t\"\254\001\n\035Desc"
  "ribePlayerSessionsRequest\022\033\n\023gameServerS"
  "essionId\030\001 \001(\t\022\020\n\010playerId\030\002 \001(\t\022\027\n\017play"
  "erSessionId\030\003 \001(\t\022!\n\031playerSessionStatus"
  "Filter\030\004 \001(\t\022\021\n\tnextToken\030\005 \001(\t\022\r\n\005limit"
  "\030\006 \001(\005\"t\n\036DescribePlayerSessionsResponse"
  "\022\021\n\tnextToken\030\001 \001(\t\022\?\n\016playerSessions\030\002 "
  "\003(\0132\'.tencentcloud.gse.grpcsdk.PlayerSes"
  "sion\"o\n(UpdatePlayerSessionCreationPolic"
  "yRequest\022\033\n\023gameServerSessionId\030\001 \001(\t\022&\n"
  "\036newPlayerSessionCreationPolicy\030\002 \001(\t\"@\n"
  "!TerminateGameServerSessionRequest\022\033\n\023ga"
  "meServerSessionId\030\001 \001(\t\"\026\n\024ProcessEnding"
  "Request\"M\n\027ReportCustomDataRequest\022\032\n\022cu"
  "rrentCustomCount\030\001 \001(\005\022\026\n\016maxCustomCount"
  "\030\002 \001(\005\"\r\n\013GseResponse2\354\010\n\021GseGrpcSdkServ"
  "ice\022f\n\014ProcessReady\022-.tencentcloud.gse.g"
  "rpcsdk.ProcessReadyRequest\032%.tencentclou"
  "d.gse.grpcsdk.GseResponse\"\000\022\200\001\n\031Activate"
  "GameServerSession\022:.tencentcloud.gse.grp"
  "csdk.ActivateGameServerSessionRequest\032%."
  "tencentcloud.gse.grpcsdk.GseResponse\"\000\022t"
  "\n\023AcceptPlayerSession\0224.tencentcloud.gse"
  ".grpcsdk.AcceptPlayerSessionRequest\032%.te"
  "ncentcloud.gse.grpcsdk.GseResponse\"\000\022t\n\023"
  "RemovePlayerSession\0224.tencentcloud.gse.g"
  "rpcsdk.RemovePlayerSessionRequest\032%.tenc"
  "entcloud.gse.grpcsdk.GseResponse\"\000\022\215\001\n\026D"
  "escribePlayerSessions\0227.tencentcloud.gse"
  ".grpcsdk.DescribePlayerSessionsRequest\0328"
  ".tencentcloud.gse.grpcsdk.DescribePlayer"
  "SessionsResponse\"\000\022\220\001\n!UpdatePlayerSessi"
  "onCreationPolicy\022B.tencentcloud.gse.grpc"
  "sdk.UpdatePlayerSessionCreationPolicyReq"
  "uest\032%.tencentcloud.gse.grpcsdk.GseRespo"
  "nse\"\000\022\202\001\n\032TerminateGameServerSession\022;.t"
  "encentcloud.gse.grpcsdk.TerminateGameSer"
  "verSessionRequest\032%.tencentcloud.gse.grp"
  "csdk.GseResponse\"\000\022h\n\rProcessEnding\022..te"
  "ncentcloud.gse.grpcsdk.ProcessEndingRequ"
  "est\032%.tencentcloud.gse.grpcsdk.GseRespon"
  "se\"\000\022n\n\020ReportCustomData\0221.tencentcloud."
  "gse.grpcsdk.ReportCustomDataRequest\032%.te"
  "ncentcloud.gse.grpcsdk.GseResponse\"\000B\021Z\017"
  "go-demo/grpcsdkb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GseGrpcSdkService_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GseGrpcSdkService_2eproto_sccs[12] = {
  &scc_info_AcceptPlayerSessionRequest_GseGrpcSdkService_2eproto.base,
  &scc_info_ActivateGameServerSessionRequest_GseGrpcSdkService_2eproto.base,
  &scc_info_DescribePlayerSessionsRequest_GseGrpcSdkService_2eproto.base,
  &scc_info_DescribePlayerSessionsResponse_GseGrpcSdkService_2eproto.base,
  &scc_info_GseResponse_GseGrpcSdkService_2eproto.base,
  &scc_info_PlayerSession_GseGrpcSdkService_2eproto.base,
  &scc_info_ProcessEndingRequest_GseGrpcSdkService_2eproto.base,
  &scc_info_ProcessReadyRequest_GseGrpcSdkService_2eproto.base,
  &scc_info_RemovePlayerSessionRequest_GseGrpcSdkService_2eproto.base,
  &scc_info_ReportCustomDataRequest_GseGrpcSdkService_2eproto.base,
  &scc_info_TerminateGameServerSessionRequest_GseGrpcSdkService_2eproto.base,
  &scc_info_UpdatePlayerSessionCreationPolicyRequest_GseGrpcSdkService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GseGrpcSdkService_2eproto_once;
static bool descriptor_table_GseGrpcSdkService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GseGrpcSdkService_2eproto = {
  &descriptor_table_GseGrpcSdkService_2eproto_initialized, descriptor_table_protodef_GseGrpcSdkService_2eproto, "GseGrpcSdkService.proto", 2383,
  &descriptor_table_GseGrpcSdkService_2eproto_once, descriptor_table_GseGrpcSdkService_2eproto_sccs, descriptor_table_GseGrpcSdkService_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_GseGrpcSdkService_2eproto::offsets,
  file_level_metadata_GseGrpcSdkService_2eproto, 12, file_level_enum_descriptors_GseGrpcSdkService_2eproto, file_level_service_descriptors_GseGrpcSdkService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GseGrpcSdkService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GseGrpcSdkService_2eproto), true);
namespace tencentcloud {
namespace gse {
namespace grpcsdk {

// ===================================================================

void ProcessReadyRequest::InitAsDefaultInstance() {
}
class ProcessReadyRequest::_Internal {
 public:
};

ProcessReadyRequest::ProcessReadyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
}
ProcessReadyRequest::ProcessReadyRequest(const ProcessReadyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      logpathstoupload_(from.logpathstoupload_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&clientport_, &from.clientport_,
    static_cast<size_t>(reinterpret_cast<char*>(&grpcport_) -
    reinterpret_cast<char*>(&clientport_)) + sizeof(grpcport_));
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
}

void ProcessReadyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessReadyRequest_GseGrpcSdkService_2eproto.base);
  ::memset(&clientport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grpcport_) -
      reinterpret_cast<char*>(&clientport_)) + sizeof(grpcport_));
}

ProcessReadyRequest::~ProcessReadyRequest() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
  SharedDtor();
}

void ProcessReadyRequest::SharedDtor() {
}

void ProcessReadyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessReadyRequest& ProcessReadyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessReadyRequest_GseGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void ProcessReadyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logpathstoupload_.Clear();
  ::memset(&clientport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grpcport_) -
      reinterpret_cast<char*>(&clientport_)) + sizeof(grpcport_));
  _internal_metadata_.Clear();
}

const char* ProcessReadyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string logPathsToUpload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_logpathstoupload();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 clientPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clientport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 grpcPort = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          grpcport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessReadyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string logPathsToUpload = 1;
  for (int i = 0, n = this->_internal_logpathstoupload_size(); i < n; i++) {
    const auto& s = this->_internal_logpathstoupload(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.ProcessReadyRequest.logPathsToUpload");
    target = stream->WriteString(1, s, target);
  }

  // int32 clientPort = 2;
  if (this->clientport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_clientport(), target);
  }

  // int32 grpcPort = 3;
  if (this->grpcport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_grpcport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
  return target;
}

size_t ProcessReadyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string logPathsToUpload = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(logpathstoupload_.size());
  for (int i = 0, n = logpathstoupload_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      logpathstoupload_.Get(i));
  }

  // int32 clientPort = 2;
  if (this->clientport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clientport());
  }

  // int32 grpcPort = 3;
  if (this->grpcport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessReadyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessReadyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessReadyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
    MergeFrom(*source);
  }
}

void ProcessReadyRequest::MergeFrom(const ProcessReadyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logpathstoupload_.MergeFrom(from.logpathstoupload_);
  if (from.clientport() != 0) {
    _internal_set_clientport(from._internal_clientport());
  }
  if (from.grpcport() != 0) {
    _internal_set_grpcport(from._internal_grpcport());
  }
}

void ProcessReadyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessReadyRequest::CopyFrom(const ProcessReadyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.ProcessReadyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessReadyRequest::IsInitialized() const {
  return true;
}

void ProcessReadyRequest::InternalSwap(ProcessReadyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  logpathstoupload_.InternalSwap(&other->logpathstoupload_);
  swap(clientport_, other->clientport_);
  swap(grpcport_, other->grpcport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessReadyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivateGameServerSessionRequest::InitAsDefaultInstance() {
}
class ActivateGameServerSessionRequest::_Internal {
 public:
};

ActivateGameServerSessionRequest::ActivateGameServerSessionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
}
ActivateGameServerSessionRequest::ActivateGameServerSessionRequest(const ActivateGameServerSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameserversessionid().empty()) {
    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  maxplayers_ = from.maxplayers_;
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
}

void ActivateGameServerSessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivateGameServerSessionRequest_GseGrpcSdkService_2eproto.base);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxplayers_ = 0;
}

ActivateGameServerSessionRequest::~ActivateGameServerSessionRequest() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
  SharedDtor();
}

void ActivateGameServerSessionRequest::SharedDtor() {
  gameserversessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivateGameServerSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivateGameServerSessionRequest& ActivateGameServerSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivateGameServerSessionRequest_GseGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void ActivateGameServerSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxplayers_ = 0;
  _internal_metadata_.Clear();
}

const char* ActivateGameServerSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gameServerSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gameserversessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest.gameServerSessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxPlayers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxplayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivateGameServerSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameserversessionid().data(), static_cast<int>(this->_internal_gameserversessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest.gameServerSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gameserversessionid(), target);
  }

  // int32 maxPlayers = 2;
  if (this->maxplayers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxplayers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
  return target;
}

size_t ActivateGameServerSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameserversessionid());
  }

  // int32 maxPlayers = 2;
  if (this->maxplayers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxplayers());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivateGameServerSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivateGameServerSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivateGameServerSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
    MergeFrom(*source);
  }
}

void ActivateGameServerSessionRequest::MergeFrom(const ActivateGameServerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameserversessionid().size() > 0) {

    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  if (from.maxplayers() != 0) {
    _internal_set_maxplayers(from._internal_maxplayers());
  }
}

void ActivateGameServerSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivateGameServerSessionRequest::CopyFrom(const ActivateGameServerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.ActivateGameServerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateGameServerSessionRequest::IsInitialized() const {
  return true;
}

void ActivateGameServerSessionRequest::InternalSwap(ActivateGameServerSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameserversessionid_.Swap(&other->gameserversessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maxplayers_, other->maxplayers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivateGameServerSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AcceptPlayerSessionRequest::InitAsDefaultInstance() {
}
class AcceptPlayerSessionRequest::_Internal {
 public:
};

AcceptPlayerSessionRequest::AcceptPlayerSessionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
}
AcceptPlayerSessionRequest::AcceptPlayerSessionRequest(const AcceptPlayerSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameserversessionid().empty()) {
    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_playersessionid().empty()) {
    playersessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
}

void AcceptPlayerSessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcceptPlayerSessionRequest_GseGrpcSdkService_2eproto.base);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AcceptPlayerSessionRequest::~AcceptPlayerSessionRequest() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
  SharedDtor();
}

void AcceptPlayerSessionRequest::SharedDtor() {
  gameserversessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AcceptPlayerSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptPlayerSessionRequest& AcceptPlayerSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptPlayerSessionRequest_GseGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void AcceptPlayerSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AcceptPlayerSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gameServerSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gameserversessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.gameServerSessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string playerSessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_playersessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.playerSessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptPlayerSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameserversessionid().data(), static_cast<int>(this->_internal_gameserversessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.gameServerSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gameserversessionid(), target);
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playersessionid().data(), static_cast<int>(this->_internal_playersessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest.playerSessionId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playersessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
  return target;
}

size_t AcceptPlayerSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameserversessionid());
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playersessionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptPlayerSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptPlayerSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptPlayerSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
    MergeFrom(*source);
  }
}

void AcceptPlayerSessionRequest::MergeFrom(const AcceptPlayerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameserversessionid().size() > 0) {

    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  if (from.playersessionid().size() > 0) {

    playersessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
}

void AcceptPlayerSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptPlayerSessionRequest::CopyFrom(const AcceptPlayerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.AcceptPlayerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptPlayerSessionRequest::IsInitialized() const {
  return true;
}

void AcceptPlayerSessionRequest::InternalSwap(AcceptPlayerSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameserversessionid_.Swap(&other->gameserversessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playersessionid_.Swap(&other->playersessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptPlayerSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemovePlayerSessionRequest::InitAsDefaultInstance() {
}
class RemovePlayerSessionRequest::_Internal {
 public:
};

RemovePlayerSessionRequest::RemovePlayerSessionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
}
RemovePlayerSessionRequest::RemovePlayerSessionRequest(const RemovePlayerSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameserversessionid().empty()) {
    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_playersessionid().empty()) {
    playersessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
}

void RemovePlayerSessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemovePlayerSessionRequest_GseGrpcSdkService_2eproto.base);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemovePlayerSessionRequest::~RemovePlayerSessionRequest() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
  SharedDtor();
}

void RemovePlayerSessionRequest::SharedDtor() {
  gameserversessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemovePlayerSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemovePlayerSessionRequest& RemovePlayerSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemovePlayerSessionRequest_GseGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void RemovePlayerSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RemovePlayerSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gameServerSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gameserversessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.gameServerSessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string playerSessionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_playersessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.playerSessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemovePlayerSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameserversessionid().data(), static_cast<int>(this->_internal_gameserversessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.gameServerSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gameserversessionid(), target);
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playersessionid().data(), static_cast<int>(this->_internal_playersessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest.playerSessionId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playersessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
  return target;
}

size_t RemovePlayerSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameserversessionid());
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playersessionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovePlayerSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePlayerSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemovePlayerSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
    MergeFrom(*source);
  }
}

void RemovePlayerSessionRequest::MergeFrom(const RemovePlayerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameserversessionid().size() > 0) {

    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  if (from.playersessionid().size() > 0) {

    playersessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
}

void RemovePlayerSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePlayerSessionRequest::CopyFrom(const RemovePlayerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.RemovePlayerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePlayerSessionRequest::IsInitialized() const {
  return true;
}

void RemovePlayerSessionRequest::InternalSwap(RemovePlayerSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameserversessionid_.Swap(&other->gameserversessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playersessionid_.Swap(&other->playersessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovePlayerSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerSession::InitAsDefaultInstance() {
}
class PlayerSession::_Internal {
 public:
};

PlayerSession::PlayerSession()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.PlayerSession)
}
PlayerSession::PlayerSession(const PlayerSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_playersessionid().empty()) {
    playersessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_playerid().empty()) {
    playerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameserversessionid().empty()) {
    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  fleetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fleetid().empty()) {
    fleetid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipaddress().empty()) {
    ipaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  playerdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_playerdata().empty()) {
    playerdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playerdata_);
  }
  dnsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dnsname().empty()) {
    dnsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dnsname_);
  }
  ::memcpy(&creationtime_, &from.creationtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&creationtime_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.PlayerSession)
}

void PlayerSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerSession_GseGrpcSdkService_2eproto.base);
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fleetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dnsname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&creationtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&creationtime_)) + sizeof(port_));
}

PlayerSession::~PlayerSession() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.PlayerSession)
  SharedDtor();
}

void PlayerSession::SharedDtor() {
  playersessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameserversessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fleetid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dnsname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerSession& PlayerSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerSession_GseGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void PlayerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.PlayerSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playersessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fleetid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dnsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&creationtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&creationtime_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

const char* PlayerSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string playerSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_playersessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.PlayerSession.playerSessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.PlayerSession.playerId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gameServerSessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gameserversessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.PlayerSession.gameServerSessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fleetId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fleetid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.PlayerSession.fleetId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipAddress = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ipaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.PlayerSession.ipAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.PlayerSession.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 creationTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          creationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 terminationTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          terminationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string playerData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_playerdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.PlayerSession.playerData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dnsName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_dnsname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.PlayerSession.dnsName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.PlayerSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerSessionId = 1;
  if (this->playersessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playersessionid().data(), static_cast<int>(this->_internal_playersessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.PlayerSession.playerSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playersessionid(), target);
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.PlayerSession.playerId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playerid(), target);
  }

  // string gameServerSessionId = 3;
  if (this->gameserversessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameserversessionid().data(), static_cast<int>(this->_internal_gameserversessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.PlayerSession.gameServerSessionId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gameserversessionid(), target);
  }

  // string fleetId = 4;
  if (this->fleetid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fleetid().data(), static_cast<int>(this->_internal_fleetid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.PlayerSession.fleetId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fleetid(), target);
  }

  // string ipAddress = 5;
  if (this->ipaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipaddress().data(), static_cast<int>(this->_internal_ipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.PlayerSession.ipAddress");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ipaddress(), target);
  }

  // string status = 6;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.PlayerSession.status");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_status(), target);
  }

  // int64 creationTime = 7;
  if (this->creationtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_creationtime(), target);
  }

  // int64 terminationTime = 8;
  if (this->terminationtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_terminationtime(), target);
  }

  // int32 port = 9;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_port(), target);
  }

  // string playerData = 10;
  if (this->playerdata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerdata().data(), static_cast<int>(this->_internal_playerdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.PlayerSession.playerData");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_playerdata(), target);
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dnsname().data(), static_cast<int>(this->_internal_dnsname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.PlayerSession.dnsName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_dnsname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.PlayerSession)
  return target;
}

size_t PlayerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.PlayerSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerSessionId = 1;
  if (this->playersessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playersessionid());
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerid());
  }

  // string gameServerSessionId = 3;
  if (this->gameserversessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameserversessionid());
  }

  // string fleetId = 4;
  if (this->fleetid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fleetid());
  }

  // string ipAddress = 5;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipaddress());
  }

  // string status = 6;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string playerData = 10;
  if (this->playerdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerdata());
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dnsname());
  }

  // int64 creationTime = 7;
  if (this->creationtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_creationtime());
  }

  // int64 terminationTime = 8;
  if (this->terminationtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_terminationtime());
  }

  // int32 port = 9;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.PlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.PlayerSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.PlayerSession)
    MergeFrom(*source);
  }
}

void PlayerSession::MergeFrom(const PlayerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.PlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playersessionid().size() > 0) {

    playersessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  if (from.playerid().size() > 0) {

    playerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  if (from.gameserversessionid().size() > 0) {

    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  if (from.fleetid().size() > 0) {

    fleetid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.playerdata().size() > 0) {

    playerdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playerdata_);
  }
  if (from.dnsname().size() > 0) {

    dnsname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dnsname_);
  }
  if (from.creationtime() != 0) {
    _internal_set_creationtime(from._internal_creationtime());
  }
  if (from.terminationtime() != 0) {
    _internal_set_terminationtime(from._internal_terminationtime());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void PlayerSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.PlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSession::CopyFrom(const PlayerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.PlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSession::IsInitialized() const {
  return true;
}

void PlayerSession::InternalSwap(PlayerSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  playersessionid_.Swap(&other->playersessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gameserversessionid_.Swap(&other->gameserversessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fleetid_.Swap(&other->fleetid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipaddress_.Swap(&other->ipaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playerdata_.Swap(&other->playerdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dnsname_.Swap(&other->dnsname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(creationtime_, other->creationtime_);
  swap(terminationtime_, other->terminationtime_);
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribePlayerSessionsRequest::InitAsDefaultInstance() {
}
class DescribePlayerSessionsRequest::_Internal {
 public:
};

DescribePlayerSessionsRequest::DescribePlayerSessionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
}
DescribePlayerSessionsRequest::DescribePlayerSessionsRequest(const DescribePlayerSessionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameserversessionid().empty()) {
    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_playerid().empty()) {
    playerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_playersessionid().empty()) {
    playersessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  playersessionstatusfilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_playersessionstatusfilter().empty()) {
    playersessionstatusfilter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playersessionstatusfilter_);
  }
  nexttoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nexttoken().empty()) {
    nexttoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
}

void DescribePlayerSessionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribePlayerSessionsRequest_GseGrpcSdkService_2eproto.base);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionstatusfilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nexttoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

DescribePlayerSessionsRequest::~DescribePlayerSessionsRequest() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
  SharedDtor();
}

void DescribePlayerSessionsRequest::SharedDtor() {
  gameserversessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionstatusfilter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nexttoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DescribePlayerSessionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribePlayerSessionsRequest& DescribePlayerSessionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribePlayerSessionsRequest_GseGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void DescribePlayerSessionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playersessionstatusfilter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nexttoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

const char* DescribePlayerSessionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gameServerSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gameserversessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.gameServerSessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_playerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string playerSessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_playersessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string playerSessionStatusFilter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_playersessionstatusfilter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionStatusFilter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nextToken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nexttoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.nextToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribePlayerSessionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameserversessionid().data(), static_cast<int>(this->_internal_gameserversessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.gameServerSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gameserversessionid(), target);
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playerid(), target);
  }

  // string playerSessionId = 3;
  if (this->playersessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playersessionid().data(), static_cast<int>(this->_internal_playersessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_playersessionid(), target);
  }

  // string playerSessionStatusFilter = 4;
  if (this->playersessionstatusfilter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playersessionstatusfilter().data(), static_cast<int>(this->_internal_playersessionstatusfilter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.playerSessionStatusFilter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_playersessionstatusfilter(), target);
  }

  // string nextToken = 5;
  if (this->nexttoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nexttoken().data(), static_cast<int>(this->_internal_nexttoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest.nextToken");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nexttoken(), target);
  }

  // int32 limit = 6;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
  return target;
}

size_t DescribePlayerSessionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameserversessionid());
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerid());
  }

  // string playerSessionId = 3;
  if (this->playersessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playersessionid());
  }

  // string playerSessionStatusFilter = 4;
  if (this->playersessionstatusfilter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playersessionstatusfilter());
  }

  // string nextToken = 5;
  if (this->nexttoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nexttoken());
  }

  // int32 limit = 6;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribePlayerSessionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribePlayerSessionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribePlayerSessionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
    MergeFrom(*source);
  }
}

void DescribePlayerSessionsRequest::MergeFrom(const DescribePlayerSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameserversessionid().size() > 0) {

    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  if (from.playerid().size() > 0) {

    playerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  if (from.playersessionid().size() > 0) {

    playersessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  if (from.playersessionstatusfilter().size() > 0) {

    playersessionstatusfilter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.playersessionstatusfilter_);
  }
  if (from.nexttoken().size() > 0) {

    nexttoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void DescribePlayerSessionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribePlayerSessionsRequest::CopyFrom(const DescribePlayerSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribePlayerSessionsRequest::IsInitialized() const {
  return true;
}

void DescribePlayerSessionsRequest::InternalSwap(DescribePlayerSessionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameserversessionid_.Swap(&other->gameserversessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playerid_.Swap(&other->playerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playersessionid_.Swap(&other->playersessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  playersessionstatusfilter_.Swap(&other->playersessionstatusfilter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nexttoken_.Swap(&other->nexttoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribePlayerSessionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescribePlayerSessionsResponse::InitAsDefaultInstance() {
}
class DescribePlayerSessionsResponse::_Internal {
 public:
};

DescribePlayerSessionsResponse::DescribePlayerSessionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
}
DescribePlayerSessionsResponse::DescribePlayerSessionsResponse(const DescribePlayerSessionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      playersessions_(from.playersessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nexttoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nexttoken().empty()) {
    nexttoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
  }
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
}

void DescribePlayerSessionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescribePlayerSessionsResponse_GseGrpcSdkService_2eproto.base);
  nexttoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DescribePlayerSessionsResponse::~DescribePlayerSessionsResponse() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
  SharedDtor();
}

void DescribePlayerSessionsResponse::SharedDtor() {
  nexttoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DescribePlayerSessionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescribePlayerSessionsResponse& DescribePlayerSessionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescribePlayerSessionsResponse_GseGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void DescribePlayerSessionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playersessions_.Clear();
  nexttoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DescribePlayerSessionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nextToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nexttoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.nextToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tencentcloud.gse.grpcsdk.PlayerSession playerSessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playersessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescribePlayerSessionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nextToken = 1;
  if (this->nexttoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nexttoken().data(), static_cast<int>(this->_internal_nexttoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse.nextToken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nexttoken(), target);
  }

  // repeated .tencentcloud.gse.grpcsdk.PlayerSession playerSessions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playersessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_playersessions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
  return target;
}

size_t DescribePlayerSessionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tencentcloud.gse.grpcsdk.PlayerSession playerSessions = 2;
  total_size += 1UL * this->_internal_playersessions_size();
  for (const auto& msg : this->playersessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string nextToken = 1;
  if (this->nexttoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nexttoken());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescribePlayerSessionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribePlayerSessionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescribePlayerSessionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
    MergeFrom(*source);
  }
}

void DescribePlayerSessionsResponse::MergeFrom(const DescribePlayerSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playersessions_.MergeFrom(from.playersessions_);
  if (from.nexttoken().size() > 0) {

    nexttoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
  }
}

void DescribePlayerSessionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribePlayerSessionsResponse::CopyFrom(const DescribePlayerSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.DescribePlayerSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribePlayerSessionsResponse::IsInitialized() const {
  return true;
}

void DescribePlayerSessionsResponse::InternalSwap(DescribePlayerSessionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  playersessions_.InternalSwap(&other->playersessions_);
  nexttoken_.Swap(&other->nexttoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DescribePlayerSessionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePlayerSessionCreationPolicyRequest::InitAsDefaultInstance() {
}
class UpdatePlayerSessionCreationPolicyRequest::_Internal {
 public:
};

UpdatePlayerSessionCreationPolicyRequest::UpdatePlayerSessionCreationPolicyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
}
UpdatePlayerSessionCreationPolicyRequest::UpdatePlayerSessionCreationPolicyRequest(const UpdatePlayerSessionCreationPolicyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameserversessionid().empty()) {
    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  newplayersessioncreationpolicy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newplayersessioncreationpolicy().empty()) {
    newplayersessioncreationpolicy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newplayersessioncreationpolicy_);
  }
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
}

void UpdatePlayerSessionCreationPolicyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePlayerSessionCreationPolicyRequest_GseGrpcSdkService_2eproto.base);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newplayersessioncreationpolicy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdatePlayerSessionCreationPolicyRequest::~UpdatePlayerSessionCreationPolicyRequest() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
  SharedDtor();
}

void UpdatePlayerSessionCreationPolicyRequest::SharedDtor() {
  gameserversessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newplayersessioncreationpolicy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdatePlayerSessionCreationPolicyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePlayerSessionCreationPolicyRequest& UpdatePlayerSessionCreationPolicyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePlayerSessionCreationPolicyRequest_GseGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void UpdatePlayerSessionCreationPolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newplayersessioncreationpolicy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UpdatePlayerSessionCreationPolicyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gameServerSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gameserversessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.gameServerSessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string newPlayerSessionCreationPolicy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_newplayersessioncreationpolicy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.newPlayerSessionCreationPolicy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlayerSessionCreationPolicyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameserversessionid().data(), static_cast<int>(this->_internal_gameserversessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.gameServerSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gameserversessionid(), target);
  }

  // string newPlayerSessionCreationPolicy = 2;
  if (this->newplayersessioncreationpolicy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newplayersessioncreationpolicy().data(), static_cast<int>(this->_internal_newplayersessioncreationpolicy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest.newPlayerSessionCreationPolicy");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_newplayersessioncreationpolicy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
  return target;
}

size_t UpdatePlayerSessionCreationPolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameserversessionid());
  }

  // string newPlayerSessionCreationPolicy = 2;
  if (this->newplayersessioncreationpolicy().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newplayersessioncreationpolicy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlayerSessionCreationPolicyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlayerSessionCreationPolicyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePlayerSessionCreationPolicyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
    MergeFrom(*source);
  }
}

void UpdatePlayerSessionCreationPolicyRequest::MergeFrom(const UpdatePlayerSessionCreationPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameserversessionid().size() > 0) {

    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  if (from.newplayersessioncreationpolicy().size() > 0) {

    newplayersessioncreationpolicy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newplayersessioncreationpolicy_);
  }
}

void UpdatePlayerSessionCreationPolicyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerSessionCreationPolicyRequest::CopyFrom(const UpdatePlayerSessionCreationPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.UpdatePlayerSessionCreationPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerSessionCreationPolicyRequest::IsInitialized() const {
  return true;
}

void UpdatePlayerSessionCreationPolicyRequest::InternalSwap(UpdatePlayerSessionCreationPolicyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameserversessionid_.Swap(&other->gameserversessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  newplayersessioncreationpolicy_.Swap(&other->newplayersessioncreationpolicy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerSessionCreationPolicyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TerminateGameServerSessionRequest::InitAsDefaultInstance() {
}
class TerminateGameServerSessionRequest::_Internal {
 public:
};

TerminateGameServerSessionRequest::TerminateGameServerSessionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
}
TerminateGameServerSessionRequest::TerminateGameServerSessionRequest(const TerminateGameServerSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameserversessionid().empty()) {
    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
}

void TerminateGameServerSessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TerminateGameServerSessionRequest_GseGrpcSdkService_2eproto.base);
  gameserversessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TerminateGameServerSessionRequest::~TerminateGameServerSessionRequest() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
  SharedDtor();
}

void TerminateGameServerSessionRequest::SharedDtor() {
  gameserversessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TerminateGameServerSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TerminateGameServerSessionRequest& TerminateGameServerSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TerminateGameServerSessionRequest_GseGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void TerminateGameServerSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TerminateGameServerSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gameServerSessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gameserversessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest.gameServerSessionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TerminateGameServerSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameserversessionid().data(), static_cast<int>(this->_internal_gameserversessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest.gameServerSessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gameserversessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
  return target;
}

size_t TerminateGameServerSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameServerSessionId = 1;
  if (this->gameserversessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameserversessionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TerminateGameServerSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TerminateGameServerSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TerminateGameServerSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
    MergeFrom(*source);
  }
}

void TerminateGameServerSessionRequest::MergeFrom(const TerminateGameServerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gameserversessionid().size() > 0) {

    gameserversessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gameserversessionid_);
  }
}

void TerminateGameServerSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminateGameServerSessionRequest::CopyFrom(const TerminateGameServerSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.TerminateGameServerSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminateGameServerSessionRequest::IsInitialized() const {
  return true;
}

void TerminateGameServerSessionRequest::InternalSwap(TerminateGameServerSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gameserversessionid_.Swap(&other->gameserversessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminateGameServerSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessEndingRequest::InitAsDefaultInstance() {
}
class ProcessEndingRequest::_Internal {
 public:
};

ProcessEndingRequest::ProcessEndingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
}
ProcessEndingRequest::ProcessEndingRequest(const ProcessEndingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
}

void ProcessEndingRequest::SharedCtor() {
}

ProcessEndingRequest::~ProcessEndingRequest() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
  SharedDtor();
}

void ProcessEndingRequest::SharedDtor() {
}

void ProcessEndingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessEndingRequest& ProcessEndingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessEndingRequest_GseGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void ProcessEndingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ProcessEndingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessEndingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
  return target;
}

size_t ProcessEndingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessEndingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessEndingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessEndingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
    MergeFrom(*source);
  }
}

void ProcessEndingRequest::MergeFrom(const ProcessEndingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProcessEndingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessEndingRequest::CopyFrom(const ProcessEndingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.ProcessEndingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessEndingRequest::IsInitialized() const {
  return true;
}

void ProcessEndingRequest::InternalSwap(ProcessEndingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessEndingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReportCustomDataRequest::InitAsDefaultInstance() {
}
class ReportCustomDataRequest::_Internal {
 public:
};

ReportCustomDataRequest::ReportCustomDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
}
ReportCustomDataRequest::ReportCustomDataRequest(const ReportCustomDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currentcustomcount_, &from.currentcustomcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxcustomcount_) -
    reinterpret_cast<char*>(&currentcustomcount_)) + sizeof(maxcustomcount_));
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
}

void ReportCustomDataRequest::SharedCtor() {
  ::memset(&currentcustomcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxcustomcount_) -
      reinterpret_cast<char*>(&currentcustomcount_)) + sizeof(maxcustomcount_));
}

ReportCustomDataRequest::~ReportCustomDataRequest() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
  SharedDtor();
}

void ReportCustomDataRequest::SharedDtor() {
}

void ReportCustomDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportCustomDataRequest& ReportCustomDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportCustomDataRequest_GseGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void ReportCustomDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&currentcustomcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxcustomcount_) -
      reinterpret_cast<char*>(&currentcustomcount_)) + sizeof(maxcustomcount_));
  _internal_metadata_.Clear();
}

const char* ReportCustomDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 currentCustomCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          currentcustomcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxCustomCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxcustomcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportCustomDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 currentCustomCount = 1;
  if (this->currentcustomcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_currentcustomcount(), target);
  }

  // int32 maxCustomCount = 2;
  if (this->maxcustomcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxcustomcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
  return target;
}

size_t ReportCustomDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 currentCustomCount = 1;
  if (this->currentcustomcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currentcustomcount());
  }

  // int32 maxCustomCount = 2;
  if (this->maxcustomcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxcustomcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportCustomDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportCustomDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportCustomDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
    MergeFrom(*source);
  }
}

void ReportCustomDataRequest::MergeFrom(const ReportCustomDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currentcustomcount() != 0) {
    _internal_set_currentcustomcount(from._internal_currentcustomcount());
  }
  if (from.maxcustomcount() != 0) {
    _internal_set_maxcustomcount(from._internal_maxcustomcount());
  }
}

void ReportCustomDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportCustomDataRequest::CopyFrom(const ReportCustomDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.ReportCustomDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportCustomDataRequest::IsInitialized() const {
  return true;
}

void ReportCustomDataRequest::InternalSwap(ReportCustomDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(currentcustomcount_, other->currentcustomcount_);
  swap(maxcustomcount_, other->maxcustomcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportCustomDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GseResponse::InitAsDefaultInstance() {
}
class GseResponse::_Internal {
 public:
};

GseResponse::GseResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencentcloud.gse.grpcsdk.GseResponse)
}
GseResponse::GseResponse(const GseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tencentcloud.gse.grpcsdk.GseResponse)
}

void GseResponse::SharedCtor() {
}

GseResponse::~GseResponse() {
  // @@protoc_insertion_point(destructor:tencentcloud.gse.grpcsdk.GseResponse)
  SharedDtor();
}

void GseResponse::SharedDtor() {
}

void GseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GseResponse& GseResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GseResponse_GseGrpcSdkService_2eproto.base);
  return *internal_default_instance();
}


void GseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tencentcloud.gse.grpcsdk.GseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GseResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencentcloud.gse.grpcsdk.GseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencentcloud.gse.grpcsdk.GseResponse)
  return target;
}

size_t GseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencentcloud.gse.grpcsdk.GseResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GseResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencentcloud.gse.grpcsdk.GseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GseResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencentcloud.gse.grpcsdk.GseResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencentcloud.gse.grpcsdk.GseResponse)
    MergeFrom(*source);
  }
}

void GseResponse::MergeFrom(const GseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencentcloud.gse.grpcsdk.GseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GseResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencentcloud.gse.grpcsdk.GseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GseResponse::CopyFrom(const GseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencentcloud.gse.grpcsdk.GseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GseResponse::IsInitialized() const {
  return true;
}

void GseResponse::InternalSwap(GseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GseResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcsdk
}  // namespace gse
}  // namespace tencentcloud
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::ProcessReadyRequest* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::ProcessReadyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::ProcessReadyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::ActivateGameServerSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::AcceptPlayerSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::RemovePlayerSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::PlayerSession* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::PlayerSession >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::PlayerSession >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::DescribePlayerSessionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::UpdatePlayerSessionCreationPolicyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::TerminateGameServerSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::ProcessEndingRequest* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::ProcessEndingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::ProcessEndingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::ReportCustomDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tencentcloud::gse::grpcsdk::GseResponse* Arena::CreateMaybeMessage< ::tencentcloud::gse::grpcsdk::GseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tencentcloud::gse::grpcsdk::GseResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

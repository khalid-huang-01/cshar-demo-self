// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameServerGrpcSdkService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameServerGrpcSdkService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameServerGrpcSdkService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "GseGrpcSdkService.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameServerGrpcSdkService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameServerGrpcSdkService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameServerGrpcSdkService_2eproto;
namespace tencentcloud {
namespace gse {
namespace grpcsdk {
class GameProperty;
class GamePropertyDefaultTypeInternal;
extern GamePropertyDefaultTypeInternal _GameProperty_default_instance_;
class GameServerSession;
class GameServerSessionDefaultTypeInternal;
extern GameServerSessionDefaultTypeInternal _GameServerSession_default_instance_;
class HealthCheckRequest;
class HealthCheckRequestDefaultTypeInternal;
extern HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
class HealthCheckResponse;
class HealthCheckResponseDefaultTypeInternal;
extern HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
class ProcessTerminateRequest;
class ProcessTerminateRequestDefaultTypeInternal;
extern ProcessTerminateRequestDefaultTypeInternal _ProcessTerminateRequest_default_instance_;
class StartGameServerSessionRequest;
class StartGameServerSessionRequestDefaultTypeInternal;
extern StartGameServerSessionRequestDefaultTypeInternal _StartGameServerSessionRequest_default_instance_;
}  // namespace grpcsdk
}  // namespace gse
}  // namespace tencentcloud
PROTOBUF_NAMESPACE_OPEN
template<> ::tencentcloud::gse::grpcsdk::GameProperty* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::GameProperty>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::GameServerSession* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::GameServerSession>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::HealthCheckRequest* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::HealthCheckRequest>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::HealthCheckResponse* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::HealthCheckResponse>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::ProcessTerminateRequest* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::ProcessTerminateRequest>(Arena*);
template<> ::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest* Arena::CreateMaybeMessage<::tencentcloud::gse::grpcsdk::StartGameServerSessionRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tencentcloud {
namespace gse {
namespace grpcsdk {

// ===================================================================

class HealthCheckRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.HealthCheckRequest) */ {
 public:
  HealthCheckRequest();
  virtual ~HealthCheckRequest();

  HealthCheckRequest(const HealthCheckRequest& from);
  HealthCheckRequest(HealthCheckRequest&& from) noexcept
    : HealthCheckRequest() {
    *this = ::std::move(from);
  }

  inline HealthCheckRequest& operator=(const HealthCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckRequest& operator=(HealthCheckRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthCheckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthCheckRequest* internal_default_instance() {
    return reinterpret_cast<const HealthCheckRequest*>(
               &_HealthCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HealthCheckRequest& a, HealthCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthCheckRequest* New() const final {
    return CreateMaybeMessage<HealthCheckRequest>(nullptr);
  }

  HealthCheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthCheckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthCheckRequest& from);
  void MergeFrom(const HealthCheckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthCheckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.HealthCheckRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameServerGrpcSdkService_2eproto);
    return ::descriptor_table_GameServerGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.HealthCheckRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class HealthCheckResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.HealthCheckResponse) */ {
 public:
  HealthCheckResponse();
  virtual ~HealthCheckResponse();

  HealthCheckResponse(const HealthCheckResponse& from);
  HealthCheckResponse(HealthCheckResponse&& from) noexcept
    : HealthCheckResponse() {
    *this = ::std::move(from);
  }

  inline HealthCheckResponse& operator=(const HealthCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckResponse& operator=(HealthCheckResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthCheckResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthCheckResponse* internal_default_instance() {
    return reinterpret_cast<const HealthCheckResponse*>(
               &_HealthCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HealthCheckResponse& a, HealthCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthCheckResponse* New() const final {
    return CreateMaybeMessage<HealthCheckResponse>(nullptr);
  }

  HealthCheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthCheckResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthCheckResponse& from);
  void MergeFrom(const HealthCheckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthCheckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.HealthCheckResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameServerGrpcSdkService_2eproto);
    return ::descriptor_table_GameServerGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthStatusFieldNumber = 1,
  };
  // bool healthStatus = 1;
  void clear_healthstatus();
  bool healthstatus() const;
  void set_healthstatus(bool value);
  private:
  bool _internal_healthstatus() const;
  void _internal_set_healthstatus(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.HealthCheckResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool healthstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class GameProperty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.GameProperty) */ {
 public:
  GameProperty();
  virtual ~GameProperty();

  GameProperty(const GameProperty& from);
  GameProperty(GameProperty&& from) noexcept
    : GameProperty() {
    *this = ::std::move(from);
  }

  inline GameProperty& operator=(const GameProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameProperty& operator=(GameProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameProperty* internal_default_instance() {
    return reinterpret_cast<const GameProperty*>(
               &_GameProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameProperty& a, GameProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(GameProperty* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameProperty* New() const final {
    return CreateMaybeMessage<GameProperty>(nullptr);
  }

  GameProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameProperty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameProperty& from);
  void MergeFrom(const GameProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.GameProperty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameServerGrpcSdkService_2eproto);
    return ::descriptor_table_GameServerGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.GameProperty)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class GameServerSession :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.GameServerSession) */ {
 public:
  GameServerSession();
  virtual ~GameServerSession();

  GameServerSession(const GameServerSession& from);
  GameServerSession(GameServerSession&& from) noexcept
    : GameServerSession() {
    *this = ::std::move(from);
  }

  inline GameServerSession& operator=(const GameServerSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerSession& operator=(GameServerSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServerSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServerSession* internal_default_instance() {
    return reinterpret_cast<const GameServerSession*>(
               &_GameServerSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameServerSession& a, GameServerSession& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerSession* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerSession* New() const final {
    return CreateMaybeMessage<GameServerSession>(nullptr);
  }

  GameServerSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerSession& from);
  void MergeFrom(const GameServerSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.GameServerSession";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameServerGrpcSdkService_2eproto);
    return ::descriptor_table_GameServerGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamePropertiesFieldNumber = 6,
    kGameServerSessionIdFieldNumber = 1,
    kFleetIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kIpAddressFieldNumber = 8,
    kGameServerSessionDataFieldNumber = 9,
    kMatchmakerDataFieldNumber = 10,
    kDnsNameFieldNumber = 11,
    kMaxPlayersFieldNumber = 4,
    kJoinableFieldNumber = 5,
    kPortFieldNumber = 7,
  };
  // repeated .tencentcloud.gse.grpcsdk.GameProperty gameProperties = 6;
  int gameproperties_size() const;
  private:
  int _internal_gameproperties_size() const;
  public:
  void clear_gameproperties();
  ::tencentcloud::gse::grpcsdk::GameProperty* mutable_gameproperties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tencentcloud::gse::grpcsdk::GameProperty >*
      mutable_gameproperties();
  private:
  const ::tencentcloud::gse::grpcsdk::GameProperty& _internal_gameproperties(int index) const;
  ::tencentcloud::gse::grpcsdk::GameProperty* _internal_add_gameproperties();
  public:
  const ::tencentcloud::gse::grpcsdk::GameProperty& gameproperties(int index) const;
  ::tencentcloud::gse::grpcsdk::GameProperty* add_gameproperties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tencentcloud::gse::grpcsdk::GameProperty >&
      gameproperties() const;

  // string gameServerSessionId = 1;
  void clear_gameserversessionid();
  const std::string& gameserversessionid() const;
  void set_gameserversessionid(const std::string& value);
  void set_gameserversessionid(std::string&& value);
  void set_gameserversessionid(const char* value);
  void set_gameserversessionid(const char* value, size_t size);
  std::string* mutable_gameserversessionid();
  std::string* release_gameserversessionid();
  void set_allocated_gameserversessionid(std::string* gameserversessionid);
  private:
  const std::string& _internal_gameserversessionid() const;
  void _internal_set_gameserversessionid(const std::string& value);
  std::string* _internal_mutable_gameserversessionid();
  public:

  // string fleetId = 2;
  void clear_fleetid();
  const std::string& fleetid() const;
  void set_fleetid(const std::string& value);
  void set_fleetid(std::string&& value);
  void set_fleetid(const char* value);
  void set_fleetid(const char* value, size_t size);
  std::string* mutable_fleetid();
  std::string* release_fleetid();
  void set_allocated_fleetid(std::string* fleetid);
  private:
  const std::string& _internal_fleetid() const;
  void _internal_set_fleetid(const std::string& value);
  std::string* _internal_mutable_fleetid();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ipAddress = 8;
  void clear_ipaddress();
  const std::string& ipaddress() const;
  void set_ipaddress(const std::string& value);
  void set_ipaddress(std::string&& value);
  void set_ipaddress(const char* value);
  void set_ipaddress(const char* value, size_t size);
  std::string* mutable_ipaddress();
  std::string* release_ipaddress();
  void set_allocated_ipaddress(std::string* ipaddress);
  private:
  const std::string& _internal_ipaddress() const;
  void _internal_set_ipaddress(const std::string& value);
  std::string* _internal_mutable_ipaddress();
  public:

  // string gameServerSessionData = 9;
  void clear_gameserversessiondata();
  const std::string& gameserversessiondata() const;
  void set_gameserversessiondata(const std::string& value);
  void set_gameserversessiondata(std::string&& value);
  void set_gameserversessiondata(const char* value);
  void set_gameserversessiondata(const char* value, size_t size);
  std::string* mutable_gameserversessiondata();
  std::string* release_gameserversessiondata();
  void set_allocated_gameserversessiondata(std::string* gameserversessiondata);
  private:
  const std::string& _internal_gameserversessiondata() const;
  void _internal_set_gameserversessiondata(const std::string& value);
  std::string* _internal_mutable_gameserversessiondata();
  public:

  // string matchmakerData = 10;
  void clear_matchmakerdata();
  const std::string& matchmakerdata() const;
  void set_matchmakerdata(const std::string& value);
  void set_matchmakerdata(std::string&& value);
  void set_matchmakerdata(const char* value);
  void set_matchmakerdata(const char* value, size_t size);
  std::string* mutable_matchmakerdata();
  std::string* release_matchmakerdata();
  void set_allocated_matchmakerdata(std::string* matchmakerdata);
  private:
  const std::string& _internal_matchmakerdata() const;
  void _internal_set_matchmakerdata(const std::string& value);
  std::string* _internal_mutable_matchmakerdata();
  public:

  // string dnsName = 11;
  void clear_dnsname();
  const std::string& dnsname() const;
  void set_dnsname(const std::string& value);
  void set_dnsname(std::string&& value);
  void set_dnsname(const char* value);
  void set_dnsname(const char* value, size_t size);
  std::string* mutable_dnsname();
  std::string* release_dnsname();
  void set_allocated_dnsname(std::string* dnsname);
  private:
  const std::string& _internal_dnsname() const;
  void _internal_set_dnsname(const std::string& value);
  std::string* _internal_mutable_dnsname();
  public:

  // int32 maxPlayers = 4;
  void clear_maxplayers();
  ::PROTOBUF_NAMESPACE_ID::int32 maxplayers() const;
  void set_maxplayers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxplayers() const;
  void _internal_set_maxplayers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool joinable = 5;
  void clear_joinable();
  bool joinable() const;
  void set_joinable(bool value);
  private:
  bool _internal_joinable() const;
  void _internal_set_joinable(bool value);
  public:

  // int32 port = 7;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.GameServerSession)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tencentcloud::gse::grpcsdk::GameProperty > gameproperties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameserversessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fleetid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameserversessiondata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matchmakerdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dnsname_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxplayers_;
  bool joinable_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class StartGameServerSessionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest) */ {
 public:
  StartGameServerSessionRequest();
  virtual ~StartGameServerSessionRequest();

  StartGameServerSessionRequest(const StartGameServerSessionRequest& from);
  StartGameServerSessionRequest(StartGameServerSessionRequest&& from) noexcept
    : StartGameServerSessionRequest() {
    *this = ::std::move(from);
  }

  inline StartGameServerSessionRequest& operator=(const StartGameServerSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartGameServerSessionRequest& operator=(StartGameServerSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartGameServerSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartGameServerSessionRequest* internal_default_instance() {
    return reinterpret_cast<const StartGameServerSessionRequest*>(
               &_StartGameServerSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StartGameServerSessionRequest& a, StartGameServerSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartGameServerSessionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartGameServerSessionRequest* New() const final {
    return CreateMaybeMessage<StartGameServerSessionRequest>(nullptr);
  }

  StartGameServerSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartGameServerSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartGameServerSessionRequest& from);
  void MergeFrom(const StartGameServerSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartGameServerSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.StartGameServerSessionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameServerGrpcSdkService_2eproto);
    return ::descriptor_table_GameServerGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerSessionFieldNumber = 1,
  };
  // .tencentcloud.gse.grpcsdk.GameServerSession gameServerSession = 1;
  bool has_gameserversession() const;
  private:
  bool _internal_has_gameserversession() const;
  public:
  void clear_gameserversession();
  const ::tencentcloud::gse::grpcsdk::GameServerSession& gameserversession() const;
  ::tencentcloud::gse::grpcsdk::GameServerSession* release_gameserversession();
  ::tencentcloud::gse::grpcsdk::GameServerSession* mutable_gameserversession();
  void set_allocated_gameserversession(::tencentcloud::gse::grpcsdk::GameServerSession* gameserversession);
  private:
  const ::tencentcloud::gse::grpcsdk::GameServerSession& _internal_gameserversession() const;
  ::tencentcloud::gse::grpcsdk::GameServerSession* _internal_mutable_gameserversession();
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::tencentcloud::gse::grpcsdk::GameServerSession* gameserversession_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerGrpcSdkService_2eproto;
};
// -------------------------------------------------------------------

class ProcessTerminateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencentcloud.gse.grpcsdk.ProcessTerminateRequest) */ {
 public:
  ProcessTerminateRequest();
  virtual ~ProcessTerminateRequest();

  ProcessTerminateRequest(const ProcessTerminateRequest& from);
  ProcessTerminateRequest(ProcessTerminateRequest&& from) noexcept
    : ProcessTerminateRequest() {
    *this = ::std::move(from);
  }

  inline ProcessTerminateRequest& operator=(const ProcessTerminateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTerminateRequest& operator=(ProcessTerminateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessTerminateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessTerminateRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessTerminateRequest*>(
               &_ProcessTerminateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProcessTerminateRequest& a, ProcessTerminateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTerminateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessTerminateRequest* New() const final {
    return CreateMaybeMessage<ProcessTerminateRequest>(nullptr);
  }

  ProcessTerminateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessTerminateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessTerminateRequest& from);
  void MergeFrom(const ProcessTerminateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessTerminateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencentcloud.gse.grpcsdk.ProcessTerminateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameServerGrpcSdkService_2eproto);
    return ::descriptor_table_GameServerGrpcSdkService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTerminationTimeFieldNumber = 1,
  };
  // int64 terminationTime = 1;
  void clear_terminationtime();
  ::PROTOBUF_NAMESPACE_ID::int64 terminationtime() const;
  void set_terminationtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_terminationtime() const;
  void _internal_set_terminationtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:tencentcloud.gse.grpcsdk.ProcessTerminateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 terminationtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerGrpcSdkService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HealthCheckRequest

// -------------------------------------------------------------------

// HealthCheckResponse

// bool healthStatus = 1;
inline void HealthCheckResponse::clear_healthstatus() {
  healthstatus_ = false;
}
inline bool HealthCheckResponse::_internal_healthstatus() const {
  return healthstatus_;
}
inline bool HealthCheckResponse::healthstatus() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.HealthCheckResponse.healthStatus)
  return _internal_healthstatus();
}
inline void HealthCheckResponse::_internal_set_healthstatus(bool value) {
  
  healthstatus_ = value;
}
inline void HealthCheckResponse::set_healthstatus(bool value) {
  _internal_set_healthstatus(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.HealthCheckResponse.healthStatus)
}

// -------------------------------------------------------------------

// GameProperty

// string key = 1;
inline void GameProperty::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameProperty::key() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.GameProperty.key)
  return _internal_key();
}
inline void GameProperty::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.GameProperty.key)
}
inline std::string* GameProperty::mutable_key() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.GameProperty.key)
  return _internal_mutable_key();
}
inline const std::string& GameProperty::_internal_key() const {
  return key_.GetNoArena();
}
inline void GameProperty::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameProperty::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.GameProperty.key)
}
inline void GameProperty::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.GameProperty.key)
}
inline void GameProperty::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.GameProperty.key)
}
inline std::string* GameProperty::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameProperty::release_key() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.GameProperty.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameProperty::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.GameProperty.key)
}

// string value = 2;
inline void GameProperty::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameProperty::value() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.GameProperty.value)
  return _internal_value();
}
inline void GameProperty::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.GameProperty.value)
}
inline std::string* GameProperty::mutable_value() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.GameProperty.value)
  return _internal_mutable_value();
}
inline const std::string& GameProperty::_internal_value() const {
  return value_.GetNoArena();
}
inline void GameProperty::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameProperty::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.GameProperty.value)
}
inline void GameProperty::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.GameProperty.value)
}
inline void GameProperty::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.GameProperty.value)
}
inline std::string* GameProperty::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameProperty::release_value() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.GameProperty.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameProperty::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.GameProperty.value)
}

// -------------------------------------------------------------------

// GameServerSession

// string gameServerSessionId = 1;
inline void GameServerSession::clear_gameserversessionid() {
  gameserversessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameServerSession::gameserversessionid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionId)
  return _internal_gameserversessionid();
}
inline void GameServerSession::set_gameserversessionid(const std::string& value) {
  _internal_set_gameserversessionid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionId)
}
inline std::string* GameServerSession::mutable_gameserversessionid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionId)
  return _internal_mutable_gameserversessionid();
}
inline const std::string& GameServerSession::_internal_gameserversessionid() const {
  return gameserversessionid_.GetNoArena();
}
inline void GameServerSession::_internal_set_gameserversessionid(const std::string& value) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameServerSession::set_gameserversessionid(std::string&& value) {
  
  gameserversessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionId)
}
inline void GameServerSession::set_gameserversessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionId)
}
inline void GameServerSession::set_gameserversessionid(const char* value, size_t size) {
  
  gameserversessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionId)
}
inline std::string* GameServerSession::_internal_mutable_gameserversessionid() {
  
  return gameserversessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameServerSession::release_gameserversessionid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionId)
  
  return gameserversessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameServerSession::set_allocated_gameserversessionid(std::string* gameserversessionid) {
  if (gameserversessionid != nullptr) {
    
  } else {
    
  }
  gameserversessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameserversessionid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionId)
}

// string fleetId = 2;
inline void GameServerSession::clear_fleetid() {
  fleetid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameServerSession::fleetid() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.GameServerSession.fleetId)
  return _internal_fleetid();
}
inline void GameServerSession::set_fleetid(const std::string& value) {
  _internal_set_fleetid(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.GameServerSession.fleetId)
}
inline std::string* GameServerSession::mutable_fleetid() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.GameServerSession.fleetId)
  return _internal_mutable_fleetid();
}
inline const std::string& GameServerSession::_internal_fleetid() const {
  return fleetid_.GetNoArena();
}
inline void GameServerSession::_internal_set_fleetid(const std::string& value) {
  
  fleetid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameServerSession::set_fleetid(std::string&& value) {
  
  fleetid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.GameServerSession.fleetId)
}
inline void GameServerSession::set_fleetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fleetid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.GameServerSession.fleetId)
}
inline void GameServerSession::set_fleetid(const char* value, size_t size) {
  
  fleetid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.GameServerSession.fleetId)
}
inline std::string* GameServerSession::_internal_mutable_fleetid() {
  
  return fleetid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameServerSession::release_fleetid() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.GameServerSession.fleetId)
  
  return fleetid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameServerSession::set_allocated_fleetid(std::string* fleetid) {
  if (fleetid != nullptr) {
    
  } else {
    
  }
  fleetid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fleetid);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.GameServerSession.fleetId)
}

// string name = 3;
inline void GameServerSession::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameServerSession::name() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.GameServerSession.name)
  return _internal_name();
}
inline void GameServerSession::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.GameServerSession.name)
}
inline std::string* GameServerSession::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.GameServerSession.name)
  return _internal_mutable_name();
}
inline const std::string& GameServerSession::_internal_name() const {
  return name_.GetNoArena();
}
inline void GameServerSession::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameServerSession::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.GameServerSession.name)
}
inline void GameServerSession::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.GameServerSession.name)
}
inline void GameServerSession::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.GameServerSession.name)
}
inline std::string* GameServerSession::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameServerSession::release_name() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.GameServerSession.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameServerSession::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.GameServerSession.name)
}

// int32 maxPlayers = 4;
inline void GameServerSession::clear_maxplayers() {
  maxplayers_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerSession::_internal_maxplayers() const {
  return maxplayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerSession::maxplayers() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.GameServerSession.maxPlayers)
  return _internal_maxplayers();
}
inline void GameServerSession::_internal_set_maxplayers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxplayers_ = value;
}
inline void GameServerSession::set_maxplayers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxplayers(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.GameServerSession.maxPlayers)
}

// bool joinable = 5;
inline void GameServerSession::clear_joinable() {
  joinable_ = false;
}
inline bool GameServerSession::_internal_joinable() const {
  return joinable_;
}
inline bool GameServerSession::joinable() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.GameServerSession.joinable)
  return _internal_joinable();
}
inline void GameServerSession::_internal_set_joinable(bool value) {
  
  joinable_ = value;
}
inline void GameServerSession::set_joinable(bool value) {
  _internal_set_joinable(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.GameServerSession.joinable)
}

// repeated .tencentcloud.gse.grpcsdk.GameProperty gameProperties = 6;
inline int GameServerSession::_internal_gameproperties_size() const {
  return gameproperties_.size();
}
inline int GameServerSession::gameproperties_size() const {
  return _internal_gameproperties_size();
}
inline void GameServerSession::clear_gameproperties() {
  gameproperties_.Clear();
}
inline ::tencentcloud::gse::grpcsdk::GameProperty* GameServerSession::mutable_gameproperties(int index) {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.GameServerSession.gameProperties)
  return gameproperties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tencentcloud::gse::grpcsdk::GameProperty >*
GameServerSession::mutable_gameproperties() {
  // @@protoc_insertion_point(field_mutable_list:tencentcloud.gse.grpcsdk.GameServerSession.gameProperties)
  return &gameproperties_;
}
inline const ::tencentcloud::gse::grpcsdk::GameProperty& GameServerSession::_internal_gameproperties(int index) const {
  return gameproperties_.Get(index);
}
inline const ::tencentcloud::gse::grpcsdk::GameProperty& GameServerSession::gameproperties(int index) const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.GameServerSession.gameProperties)
  return _internal_gameproperties(index);
}
inline ::tencentcloud::gse::grpcsdk::GameProperty* GameServerSession::_internal_add_gameproperties() {
  return gameproperties_.Add();
}
inline ::tencentcloud::gse::grpcsdk::GameProperty* GameServerSession::add_gameproperties() {
  // @@protoc_insertion_point(field_add:tencentcloud.gse.grpcsdk.GameServerSession.gameProperties)
  return _internal_add_gameproperties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tencentcloud::gse::grpcsdk::GameProperty >&
GameServerSession::gameproperties() const {
  // @@protoc_insertion_point(field_list:tencentcloud.gse.grpcsdk.GameServerSession.gameProperties)
  return gameproperties_;
}

// int32 port = 7;
inline void GameServerSession::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerSession::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerSession::port() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.GameServerSession.port)
  return _internal_port();
}
inline void GameServerSession::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void GameServerSession::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.GameServerSession.port)
}

// string ipAddress = 8;
inline void GameServerSession::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameServerSession::ipaddress() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.GameServerSession.ipAddress)
  return _internal_ipaddress();
}
inline void GameServerSession::set_ipaddress(const std::string& value) {
  _internal_set_ipaddress(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.GameServerSession.ipAddress)
}
inline std::string* GameServerSession::mutable_ipaddress() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.GameServerSession.ipAddress)
  return _internal_mutable_ipaddress();
}
inline const std::string& GameServerSession::_internal_ipaddress() const {
  return ipaddress_.GetNoArena();
}
inline void GameServerSession::_internal_set_ipaddress(const std::string& value) {
  
  ipaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameServerSession::set_ipaddress(std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.GameServerSession.ipAddress)
}
inline void GameServerSession::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.GameServerSession.ipAddress)
}
inline void GameServerSession::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.GameServerSession.ipAddress)
}
inline std::string* GameServerSession::_internal_mutable_ipaddress() {
  
  return ipaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameServerSession::release_ipaddress() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.GameServerSession.ipAddress)
  
  return ipaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameServerSession::set_allocated_ipaddress(std::string* ipaddress) {
  if (ipaddress != nullptr) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.GameServerSession.ipAddress)
}

// string gameServerSessionData = 9;
inline void GameServerSession::clear_gameserversessiondata() {
  gameserversessiondata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameServerSession::gameserversessiondata() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionData)
  return _internal_gameserversessiondata();
}
inline void GameServerSession::set_gameserversessiondata(const std::string& value) {
  _internal_set_gameserversessiondata(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionData)
}
inline std::string* GameServerSession::mutable_gameserversessiondata() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionData)
  return _internal_mutable_gameserversessiondata();
}
inline const std::string& GameServerSession::_internal_gameserversessiondata() const {
  return gameserversessiondata_.GetNoArena();
}
inline void GameServerSession::_internal_set_gameserversessiondata(const std::string& value) {
  
  gameserversessiondata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameServerSession::set_gameserversessiondata(std::string&& value) {
  
  gameserversessiondata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionData)
}
inline void GameServerSession::set_gameserversessiondata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gameserversessiondata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionData)
}
inline void GameServerSession::set_gameserversessiondata(const char* value, size_t size) {
  
  gameserversessiondata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionData)
}
inline std::string* GameServerSession::_internal_mutable_gameserversessiondata() {
  
  return gameserversessiondata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameServerSession::release_gameserversessiondata() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionData)
  
  return gameserversessiondata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameServerSession::set_allocated_gameserversessiondata(std::string* gameserversessiondata) {
  if (gameserversessiondata != nullptr) {
    
  } else {
    
  }
  gameserversessiondata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameserversessiondata);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.GameServerSession.gameServerSessionData)
}

// string matchmakerData = 10;
inline void GameServerSession::clear_matchmakerdata() {
  matchmakerdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameServerSession::matchmakerdata() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.GameServerSession.matchmakerData)
  return _internal_matchmakerdata();
}
inline void GameServerSession::set_matchmakerdata(const std::string& value) {
  _internal_set_matchmakerdata(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.GameServerSession.matchmakerData)
}
inline std::string* GameServerSession::mutable_matchmakerdata() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.GameServerSession.matchmakerData)
  return _internal_mutable_matchmakerdata();
}
inline const std::string& GameServerSession::_internal_matchmakerdata() const {
  return matchmakerdata_.GetNoArena();
}
inline void GameServerSession::_internal_set_matchmakerdata(const std::string& value) {
  
  matchmakerdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameServerSession::set_matchmakerdata(std::string&& value) {
  
  matchmakerdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.GameServerSession.matchmakerData)
}
inline void GameServerSession::set_matchmakerdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matchmakerdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.GameServerSession.matchmakerData)
}
inline void GameServerSession::set_matchmakerdata(const char* value, size_t size) {
  
  matchmakerdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.GameServerSession.matchmakerData)
}
inline std::string* GameServerSession::_internal_mutable_matchmakerdata() {
  
  return matchmakerdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameServerSession::release_matchmakerdata() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.GameServerSession.matchmakerData)
  
  return matchmakerdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameServerSession::set_allocated_matchmakerdata(std::string* matchmakerdata) {
  if (matchmakerdata != nullptr) {
    
  } else {
    
  }
  matchmakerdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matchmakerdata);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.GameServerSession.matchmakerData)
}

// string dnsName = 11;
inline void GameServerSession::clear_dnsname() {
  dnsname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameServerSession::dnsname() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.GameServerSession.dnsName)
  return _internal_dnsname();
}
inline void GameServerSession::set_dnsname(const std::string& value) {
  _internal_set_dnsname(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.GameServerSession.dnsName)
}
inline std::string* GameServerSession::mutable_dnsname() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.GameServerSession.dnsName)
  return _internal_mutable_dnsname();
}
inline const std::string& GameServerSession::_internal_dnsname() const {
  return dnsname_.GetNoArena();
}
inline void GameServerSession::_internal_set_dnsname(const std::string& value) {
  
  dnsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameServerSession::set_dnsname(std::string&& value) {
  
  dnsname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencentcloud.gse.grpcsdk.GameServerSession.dnsName)
}
inline void GameServerSession::set_dnsname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dnsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencentcloud.gse.grpcsdk.GameServerSession.dnsName)
}
inline void GameServerSession::set_dnsname(const char* value, size_t size) {
  
  dnsname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencentcloud.gse.grpcsdk.GameServerSession.dnsName)
}
inline std::string* GameServerSession::_internal_mutable_dnsname() {
  
  return dnsname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameServerSession::release_dnsname() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.GameServerSession.dnsName)
  
  return dnsname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameServerSession::set_allocated_dnsname(std::string* dnsname) {
  if (dnsname != nullptr) {
    
  } else {
    
  }
  dnsname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dnsname);
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.GameServerSession.dnsName)
}

// -------------------------------------------------------------------

// StartGameServerSessionRequest

// .tencentcloud.gse.grpcsdk.GameServerSession gameServerSession = 1;
inline bool StartGameServerSessionRequest::_internal_has_gameserversession() const {
  return this != internal_default_instance() && gameserversession_ != nullptr;
}
inline bool StartGameServerSessionRequest::has_gameserversession() const {
  return _internal_has_gameserversession();
}
inline void StartGameServerSessionRequest::clear_gameserversession() {
  if (GetArenaNoVirtual() == nullptr && gameserversession_ != nullptr) {
    delete gameserversession_;
  }
  gameserversession_ = nullptr;
}
inline const ::tencentcloud::gse::grpcsdk::GameServerSession& StartGameServerSessionRequest::_internal_gameserversession() const {
  const ::tencentcloud::gse::grpcsdk::GameServerSession* p = gameserversession_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tencentcloud::gse::grpcsdk::GameServerSession*>(
      &::tencentcloud::gse::grpcsdk::_GameServerSession_default_instance_);
}
inline const ::tencentcloud::gse::grpcsdk::GameServerSession& StartGameServerSessionRequest::gameserversession() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest.gameServerSession)
  return _internal_gameserversession();
}
inline ::tencentcloud::gse::grpcsdk::GameServerSession* StartGameServerSessionRequest::release_gameserversession() {
  // @@protoc_insertion_point(field_release:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest.gameServerSession)
  
  ::tencentcloud::gse::grpcsdk::GameServerSession* temp = gameserversession_;
  gameserversession_ = nullptr;
  return temp;
}
inline ::tencentcloud::gse::grpcsdk::GameServerSession* StartGameServerSessionRequest::_internal_mutable_gameserversession() {
  
  if (gameserversession_ == nullptr) {
    auto* p = CreateMaybeMessage<::tencentcloud::gse::grpcsdk::GameServerSession>(GetArenaNoVirtual());
    gameserversession_ = p;
  }
  return gameserversession_;
}
inline ::tencentcloud::gse::grpcsdk::GameServerSession* StartGameServerSessionRequest::mutable_gameserversession() {
  // @@protoc_insertion_point(field_mutable:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest.gameServerSession)
  return _internal_mutable_gameserversession();
}
inline void StartGameServerSessionRequest::set_allocated_gameserversession(::tencentcloud::gse::grpcsdk::GameServerSession* gameserversession) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gameserversession_;
  }
  if (gameserversession) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gameserversession = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameserversession, submessage_arena);
    }
    
  } else {
    
  }
  gameserversession_ = gameserversession;
  // @@protoc_insertion_point(field_set_allocated:tencentcloud.gse.grpcsdk.StartGameServerSessionRequest.gameServerSession)
}

// -------------------------------------------------------------------

// ProcessTerminateRequest

// int64 terminationTime = 1;
inline void ProcessTerminateRequest::clear_terminationtime() {
  terminationtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessTerminateRequest::_internal_terminationtime() const {
  return terminationtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessTerminateRequest::terminationtime() const {
  // @@protoc_insertion_point(field_get:tencentcloud.gse.grpcsdk.ProcessTerminateRequest.terminationTime)
  return _internal_terminationtime();
}
inline void ProcessTerminateRequest::_internal_set_terminationtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  terminationtime_ = value;
}
inline void ProcessTerminateRequest::set_terminationtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_terminationtime(value);
  // @@protoc_insertion_point(field_set:tencentcloud.gse.grpcsdk.ProcessTerminateRequest.terminationTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcsdk
}  // namespace gse
}  // namespace tencentcloud

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameServerGrpcSdkService_2eproto

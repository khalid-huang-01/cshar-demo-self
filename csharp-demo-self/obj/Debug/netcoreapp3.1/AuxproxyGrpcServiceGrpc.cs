// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AuxproxyGrpcService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace AuxproxyService {
  public static partial class ScaseGrpcSdkService
  {
    static readonly string __ServiceName = "auxproxyService.ScaseGrpcSdkService";

    static readonly grpc::Marshaller<global::AuxproxyService.ProcessReadyRequest> __Marshaller_auxproxyService_ProcessReadyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AuxproxyService.ProcessReadyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::AuxproxyService.AuxProxyResponse> __Marshaller_auxproxyService_AuxProxyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AuxproxyService.AuxProxyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::AuxproxyService.ActivateServerSessionRequest> __Marshaller_auxproxyService_ActivateServerSessionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AuxproxyService.ActivateServerSessionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::AuxproxyService.AcceptClientSessionRequest> __Marshaller_auxproxyService_AcceptClientSessionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AuxproxyService.AcceptClientSessionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::AuxproxyService.RemoveClientSessionRequest> __Marshaller_auxproxyService_RemoveClientSessionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AuxproxyService.RemoveClientSessionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::AuxproxyService.DescribeClientSessionsRequest> __Marshaller_auxproxyService_DescribeClientSessionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AuxproxyService.DescribeClientSessionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::AuxproxyService.DescribeClientSessionsResponse> __Marshaller_auxproxyService_DescribeClientSessionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AuxproxyService.DescribeClientSessionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::AuxproxyService.UpdateClientSessionCreationPolicyRequest> __Marshaller_auxproxyService_UpdateClientSessionCreationPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AuxproxyService.UpdateClientSessionCreationPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::AuxproxyService.TerminateServerSessionRequest> __Marshaller_auxproxyService_TerminateServerSessionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AuxproxyService.TerminateServerSessionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::AuxproxyService.ProcessEndingRequest> __Marshaller_auxproxyService_ProcessEndingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AuxproxyService.ProcessEndingRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::AuxproxyService.ProcessReadyRequest, global::AuxproxyService.AuxProxyResponse> __Method_ProcessReady = new grpc::Method<global::AuxproxyService.ProcessReadyRequest, global::AuxproxyService.AuxProxyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProcessReady",
        __Marshaller_auxproxyService_ProcessReadyRequest,
        __Marshaller_auxproxyService_AuxProxyResponse);

    static readonly grpc::Method<global::AuxproxyService.ActivateServerSessionRequest, global::AuxproxyService.AuxProxyResponse> __Method_ActivateServerSession = new grpc::Method<global::AuxproxyService.ActivateServerSessionRequest, global::AuxproxyService.AuxProxyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateServerSession",
        __Marshaller_auxproxyService_ActivateServerSessionRequest,
        __Marshaller_auxproxyService_AuxProxyResponse);

    static readonly grpc::Method<global::AuxproxyService.AcceptClientSessionRequest, global::AuxproxyService.AuxProxyResponse> __Method_AcceptClientSession = new grpc::Method<global::AuxproxyService.AcceptClientSessionRequest, global::AuxproxyService.AuxProxyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcceptClientSession",
        __Marshaller_auxproxyService_AcceptClientSessionRequest,
        __Marshaller_auxproxyService_AuxProxyResponse);

    static readonly grpc::Method<global::AuxproxyService.RemoveClientSessionRequest, global::AuxproxyService.AuxProxyResponse> __Method_RemoveClientSession = new grpc::Method<global::AuxproxyService.RemoveClientSessionRequest, global::AuxproxyService.AuxProxyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveClientSession",
        __Marshaller_auxproxyService_RemoveClientSessionRequest,
        __Marshaller_auxproxyService_AuxProxyResponse);

    static readonly grpc::Method<global::AuxproxyService.DescribeClientSessionsRequest, global::AuxproxyService.DescribeClientSessionsResponse> __Method_DescribeClientSessions = new grpc::Method<global::AuxproxyService.DescribeClientSessionsRequest, global::AuxproxyService.DescribeClientSessionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DescribeClientSessions",
        __Marshaller_auxproxyService_DescribeClientSessionsRequest,
        __Marshaller_auxproxyService_DescribeClientSessionsResponse);

    static readonly grpc::Method<global::AuxproxyService.UpdateClientSessionCreationPolicyRequest, global::AuxproxyService.AuxProxyResponse> __Method_UpdateClientSessionCreationPolicy = new grpc::Method<global::AuxproxyService.UpdateClientSessionCreationPolicyRequest, global::AuxproxyService.AuxProxyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateClientSessionCreationPolicy",
        __Marshaller_auxproxyService_UpdateClientSessionCreationPolicyRequest,
        __Marshaller_auxproxyService_AuxProxyResponse);

    static readonly grpc::Method<global::AuxproxyService.TerminateServerSessionRequest, global::AuxproxyService.AuxProxyResponse> __Method_TerminateServerSession = new grpc::Method<global::AuxproxyService.TerminateServerSessionRequest, global::AuxproxyService.AuxProxyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TerminateServerSession",
        __Marshaller_auxproxyService_TerminateServerSessionRequest,
        __Marshaller_auxproxyService_AuxProxyResponse);

    static readonly grpc::Method<global::AuxproxyService.ProcessEndingRequest, global::AuxproxyService.AuxProxyResponse> __Method_ProcessEnding = new grpc::Method<global::AuxproxyService.ProcessEndingRequest, global::AuxproxyService.AuxProxyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProcessEnding",
        __Marshaller_auxproxyService_ProcessEndingRequest,
        __Marshaller_auxproxyService_AuxProxyResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::AuxproxyService.AuxproxyGrpcServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ScaseGrpcSdkService</summary>
    [grpc::BindServiceMethod(typeof(ScaseGrpcSdkService), "BindService")]
    public abstract partial class ScaseGrpcSdkServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::AuxproxyService.AuxProxyResponse> ProcessReady(global::AuxproxyService.ProcessReadyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AuxproxyService.AuxProxyResponse> ActivateServerSession(global::AuxproxyService.ActivateServerSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AuxproxyService.AuxProxyResponse> AcceptClientSession(global::AuxproxyService.AcceptClientSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AuxproxyService.AuxProxyResponse> RemoveClientSession(global::AuxproxyService.RemoveClientSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AuxproxyService.DescribeClientSessionsResponse> DescribeClientSessions(global::AuxproxyService.DescribeClientSessionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AuxproxyService.AuxProxyResponse> UpdateClientSessionCreationPolicy(global::AuxproxyService.UpdateClientSessionCreationPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AuxproxyService.AuxProxyResponse> TerminateServerSession(global::AuxproxyService.TerminateServerSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AuxproxyService.AuxProxyResponse> ProcessEnding(global::AuxproxyService.ProcessEndingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ScaseGrpcSdkService</summary>
    public partial class ScaseGrpcSdkServiceClient : grpc::ClientBase<ScaseGrpcSdkServiceClient>
    {
      /// <summary>Creates a new client for ScaseGrpcSdkService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ScaseGrpcSdkServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ScaseGrpcSdkService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ScaseGrpcSdkServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ScaseGrpcSdkServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ScaseGrpcSdkServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::AuxproxyService.AuxProxyResponse ProcessReady(global::AuxproxyService.ProcessReadyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProcessReady(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AuxproxyService.AuxProxyResponse ProcessReady(global::AuxproxyService.ProcessReadyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProcessReady, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> ProcessReadyAsync(global::AuxproxyService.ProcessReadyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProcessReadyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> ProcessReadyAsync(global::AuxproxyService.ProcessReadyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProcessReady, null, options, request);
      }
      public virtual global::AuxproxyService.AuxProxyResponse ActivateServerSession(global::AuxproxyService.ActivateServerSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateServerSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AuxproxyService.AuxProxyResponse ActivateServerSession(global::AuxproxyService.ActivateServerSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateServerSession, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> ActivateServerSessionAsync(global::AuxproxyService.ActivateServerSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateServerSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> ActivateServerSessionAsync(global::AuxproxyService.ActivateServerSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateServerSession, null, options, request);
      }
      public virtual global::AuxproxyService.AuxProxyResponse AcceptClientSession(global::AuxproxyService.AcceptClientSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptClientSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AuxproxyService.AuxProxyResponse AcceptClientSession(global::AuxproxyService.AcceptClientSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcceptClientSession, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> AcceptClientSessionAsync(global::AuxproxyService.AcceptClientSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptClientSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> AcceptClientSessionAsync(global::AuxproxyService.AcceptClientSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcceptClientSession, null, options, request);
      }
      public virtual global::AuxproxyService.AuxProxyResponse RemoveClientSession(global::AuxproxyService.RemoveClientSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveClientSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AuxproxyService.AuxProxyResponse RemoveClientSession(global::AuxproxyService.RemoveClientSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveClientSession, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> RemoveClientSessionAsync(global::AuxproxyService.RemoveClientSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveClientSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> RemoveClientSessionAsync(global::AuxproxyService.RemoveClientSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveClientSession, null, options, request);
      }
      public virtual global::AuxproxyService.DescribeClientSessionsResponse DescribeClientSessions(global::AuxproxyService.DescribeClientSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeClientSessions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AuxproxyService.DescribeClientSessionsResponse DescribeClientSessions(global::AuxproxyService.DescribeClientSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DescribeClientSessions, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.DescribeClientSessionsResponse> DescribeClientSessionsAsync(global::AuxproxyService.DescribeClientSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeClientSessionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.DescribeClientSessionsResponse> DescribeClientSessionsAsync(global::AuxproxyService.DescribeClientSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DescribeClientSessions, null, options, request);
      }
      public virtual global::AuxproxyService.AuxProxyResponse UpdateClientSessionCreationPolicy(global::AuxproxyService.UpdateClientSessionCreationPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateClientSessionCreationPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AuxproxyService.AuxProxyResponse UpdateClientSessionCreationPolicy(global::AuxproxyService.UpdateClientSessionCreationPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateClientSessionCreationPolicy, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> UpdateClientSessionCreationPolicyAsync(global::AuxproxyService.UpdateClientSessionCreationPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateClientSessionCreationPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> UpdateClientSessionCreationPolicyAsync(global::AuxproxyService.UpdateClientSessionCreationPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateClientSessionCreationPolicy, null, options, request);
      }
      public virtual global::AuxproxyService.AuxProxyResponse TerminateServerSession(global::AuxproxyService.TerminateServerSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TerminateServerSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AuxproxyService.AuxProxyResponse TerminateServerSession(global::AuxproxyService.TerminateServerSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TerminateServerSession, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> TerminateServerSessionAsync(global::AuxproxyService.TerminateServerSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TerminateServerSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> TerminateServerSessionAsync(global::AuxproxyService.TerminateServerSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TerminateServerSession, null, options, request);
      }
      public virtual global::AuxproxyService.AuxProxyResponse ProcessEnding(global::AuxproxyService.ProcessEndingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProcessEnding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AuxproxyService.AuxProxyResponse ProcessEnding(global::AuxproxyService.ProcessEndingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProcessEnding, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> ProcessEndingAsync(global::AuxproxyService.ProcessEndingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProcessEndingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AuxproxyService.AuxProxyResponse> ProcessEndingAsync(global::AuxproxyService.ProcessEndingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProcessEnding, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ScaseGrpcSdkServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ScaseGrpcSdkServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ScaseGrpcSdkServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ProcessReady, serviceImpl.ProcessReady)
          .AddMethod(__Method_ActivateServerSession, serviceImpl.ActivateServerSession)
          .AddMethod(__Method_AcceptClientSession, serviceImpl.AcceptClientSession)
          .AddMethod(__Method_RemoveClientSession, serviceImpl.RemoveClientSession)
          .AddMethod(__Method_DescribeClientSessions, serviceImpl.DescribeClientSessions)
          .AddMethod(__Method_UpdateClientSessionCreationPolicy, serviceImpl.UpdateClientSessionCreationPolicy)
          .AddMethod(__Method_TerminateServerSession, serviceImpl.TerminateServerSession)
          .AddMethod(__Method_ProcessEnding, serviceImpl.ProcessEnding).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ScaseGrpcSdkServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ProcessReady, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AuxproxyService.ProcessReadyRequest, global::AuxproxyService.AuxProxyResponse>(serviceImpl.ProcessReady));
      serviceBinder.AddMethod(__Method_ActivateServerSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AuxproxyService.ActivateServerSessionRequest, global::AuxproxyService.AuxProxyResponse>(serviceImpl.ActivateServerSession));
      serviceBinder.AddMethod(__Method_AcceptClientSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AuxproxyService.AcceptClientSessionRequest, global::AuxproxyService.AuxProxyResponse>(serviceImpl.AcceptClientSession));
      serviceBinder.AddMethod(__Method_RemoveClientSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AuxproxyService.RemoveClientSessionRequest, global::AuxproxyService.AuxProxyResponse>(serviceImpl.RemoveClientSession));
      serviceBinder.AddMethod(__Method_DescribeClientSessions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AuxproxyService.DescribeClientSessionsRequest, global::AuxproxyService.DescribeClientSessionsResponse>(serviceImpl.DescribeClientSessions));
      serviceBinder.AddMethod(__Method_UpdateClientSessionCreationPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AuxproxyService.UpdateClientSessionCreationPolicyRequest, global::AuxproxyService.AuxProxyResponse>(serviceImpl.UpdateClientSessionCreationPolicy));
      serviceBinder.AddMethod(__Method_TerminateServerSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AuxproxyService.TerminateServerSessionRequest, global::AuxproxyService.AuxProxyResponse>(serviceImpl.TerminateServerSession));
      serviceBinder.AddMethod(__Method_ProcessEnding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AuxproxyService.ProcessEndingRequest, global::AuxproxyService.AuxProxyResponse>(serviceImpl.ProcessEnding));
    }

  }
}
#endregion

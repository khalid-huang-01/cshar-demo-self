// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AuxproxyGrpcService.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AuxproxyService {

  /// <summary>Holder for reflection information generated from AuxproxyGrpcService.proto</summary>
  public static partial class AuxproxyGrpcServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for AuxproxyGrpcService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AuxproxyGrpcServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlBdXhwcm94eUdycGNTZXJ2aWNlLnByb3RvEg9hdXhwcm94eVNlcnZpY2Ui",
            "YgoTUHJvY2Vzc1JlYWR5UmVxdWVzdBIYChBsb2dQYXRoc1RvVXBsb2FkGAEg",
            "AygJEhIKCmNsaWVudFBvcnQYAiABKAUSEAoIZ3JwY1BvcnQYAyABKAUSCwoD",
            "cGlkGAQgASgFIksKHEFjdGl2YXRlU2VydmVyU2Vzc2lvblJlcXVlc3QSFwoP",
            "c2VydmVyU2Vzc2lvbklkGAEgASgJEhIKCm1heENsaWVudHMYAiABKAUiTgoa",
            "QWNjZXB0Q2xpZW50U2Vzc2lvblJlcXVlc3QSFwoPc2VydmVyU2Vzc2lvbklk",
            "GAEgASgJEhcKD2NsaWVudFNlc3Npb25JZBgCIAEoCSJOChpSZW1vdmVDbGll",
            "bnRTZXNzaW9uUmVxdWVzdBIXCg9zZXJ2ZXJTZXNzaW9uSWQYASABKAkSFwoP",
            "Y2xpZW50U2Vzc2lvbklkGAIgASgJItgBCg1DbGllbnRTZXNzaW9uEhcKD2Ns",
            "aWVudFNlc3Npb25JZBgBIAEoCRIQCghjbGllbnRJZBgCIAEoCRIXCg9zZXJ2",
            "ZXJTZXNzaW9uSWQYAyABKAkSDwoHZmxlZXRJZBgEIAEoCRIRCglpcEFkZHJl",
            "c3MYBSABKAkSDgoGc3RhdHVzGAYgASgJEhQKDGNyZWF0aW9uVGltZRgHIAEo",
            "CRIXCg90ZXJtaW5hdGlvblRpbWUYCCABKAkSDAoEcG9ydBgJIAEoBRISCgpj",
            "bGllbnREYXRhGAogASgJIqgBCh1EZXNjcmliZUNsaWVudFNlc3Npb25zUmVx",
            "dWVzdBIXCg9zZXJ2ZXJTZXNzaW9uSWQYASABKAkSEAoIY2xpZW50SWQYAiAB",
            "KAkSFwoPY2xpZW50U2Vzc2lvbklkGAMgASgJEiEKGWNsaWVudFNlc3Npb25T",
            "dGF0dXNGaWx0ZXIYBCABKAkSEQoJbmV4dFRva2VuGAUgASgJEg0KBWxpbWl0",
            "GAYgASgFIpEBCh5EZXNjcmliZUNsaWVudFNlc3Npb25zUmVzcG9uc2USEQoJ",
            "bmV4dFRva2VuGAEgASgJEjUKDWNsaWVudFNlc3Npb24YAiADKAsyHi5hdXhw",
            "cm94eVNlcnZpY2UuQ2xpZW50U2Vzc2lvbhIlCgVlcnJvchgDIAEoCzIWLmF1",
            "eHByb3h5U2VydmljZS5FcnJvciJrCihVcGRhdGVDbGllbnRTZXNzaW9uQ3Jl",
            "YXRpb25Qb2xpY3lSZXF1ZXN0EhcKD3NlcnZlclNlc3Npb25JZBgBIAEoCRIm",
            "Ch5uZXdDbGllbnRTZXNzaW9uQ3JlYXRpb25Qb2xpY3kYAiABKAkiOAodVGVy",
            "bWluYXRlU2VydmVyU2Vzc2lvblJlcXVlc3QSFwoPc2VydmVyU2Vzc2lvbklk",
            "GAEgASgJIiMKFFByb2Nlc3NFbmRpbmdSZXF1ZXN0EgsKA3BpZBgBIAEoBSIs",
            "CgVFcnJvchIRCgllcnJvckNvZGUYASABKAkSEAoIZXJyb3JNc2cYAiABKAki",
            "OQoQQXV4UHJveHlSZXNwb25zZRIlCgVlcnJvchgBIAEoCzIWLmF1eHByb3h5",
            "U2VydmljZS5FcnJvcjL+BgoTU2Nhc2VHcnBjU2RrU2VydmljZRJZCgxQcm9j",
            "ZXNzUmVhZHkSJC5hdXhwcm94eVNlcnZpY2UuUHJvY2Vzc1JlYWR5UmVxdWVz",
            "dBohLmF1eHByb3h5U2VydmljZS5BdXhQcm94eVJlc3BvbnNlIgASawoVQWN0",
            "aXZhdGVTZXJ2ZXJTZXNzaW9uEi0uYXV4cHJveHlTZXJ2aWNlLkFjdGl2YXRl",
            "U2VydmVyU2Vzc2lvblJlcXVlc3QaIS5hdXhwcm94eVNlcnZpY2UuQXV4UHJv",
            "eHlSZXNwb25zZSIAEmcKE0FjY2VwdENsaWVudFNlc3Npb24SKy5hdXhwcm94",
            "eVNlcnZpY2UuQWNjZXB0Q2xpZW50U2Vzc2lvblJlcXVlc3QaIS5hdXhwcm94",
            "eVNlcnZpY2UuQXV4UHJveHlSZXNwb25zZSIAEmcKE1JlbW92ZUNsaWVudFNl",
            "c3Npb24SKy5hdXhwcm94eVNlcnZpY2UuUmVtb3ZlQ2xpZW50U2Vzc2lvblJl",
            "cXVlc3QaIS5hdXhwcm94eVNlcnZpY2UuQXV4UHJveHlSZXNwb25zZSIAEnsK",
            "FkRlc2NyaWJlQ2xpZW50U2Vzc2lvbnMSLi5hdXhwcm94eVNlcnZpY2UuRGVz",
            "Y3JpYmVDbGllbnRTZXNzaW9uc1JlcXVlc3QaLy5hdXhwcm94eVNlcnZpY2Uu",
            "RGVzY3JpYmVDbGllbnRTZXNzaW9uc1Jlc3BvbnNlIgASgwEKIVVwZGF0ZUNs",
            "aWVudFNlc3Npb25DcmVhdGlvblBvbGljeRI5LmF1eHByb3h5U2VydmljZS5V",
            "cGRhdGVDbGllbnRTZXNzaW9uQ3JlYXRpb25Qb2xpY3lSZXF1ZXN0GiEuYXV4",
            "cHJveHlTZXJ2aWNlLkF1eFByb3h5UmVzcG9uc2UiABJtChZUZXJtaW5hdGVT",
            "ZXJ2ZXJTZXNzaW9uEi4uYXV4cHJveHlTZXJ2aWNlLlRlcm1pbmF0ZVNlcnZl",
            "clNlc3Npb25SZXF1ZXN0GiEuYXV4cHJveHlTZXJ2aWNlLkF1eFByb3h5UmVz",
            "cG9uc2UiABJbCg1Qcm9jZXNzRW5kaW5nEiUuYXV4cHJveHlTZXJ2aWNlLlBy",
            "b2Nlc3NFbmRpbmdSZXF1ZXN0GiEuYXV4cHJveHlTZXJ2aWNlLkF1eFByb3h5",
            "UmVzcG9uc2UiAEIUWhIuLzthdXhwcm94eXNlcnZpY2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AuxproxyService.ProcessReadyRequest), global::AuxproxyService.ProcessReadyRequest.Parser, new[]{ "LogPathsToUpload", "ClientPort", "GrpcPort", "Pid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AuxproxyService.ActivateServerSessionRequest), global::AuxproxyService.ActivateServerSessionRequest.Parser, new[]{ "ServerSessionId", "MaxClients" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AuxproxyService.AcceptClientSessionRequest), global::AuxproxyService.AcceptClientSessionRequest.Parser, new[]{ "ServerSessionId", "ClientSessionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AuxproxyService.RemoveClientSessionRequest), global::AuxproxyService.RemoveClientSessionRequest.Parser, new[]{ "ServerSessionId", "ClientSessionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AuxproxyService.ClientSession), global::AuxproxyService.ClientSession.Parser, new[]{ "ClientSessionId", "ClientId", "ServerSessionId", "FleetId", "IpAddress", "Status", "CreationTime", "TerminationTime", "Port", "ClientData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AuxproxyService.DescribeClientSessionsRequest), global::AuxproxyService.DescribeClientSessionsRequest.Parser, new[]{ "ServerSessionId", "ClientId", "ClientSessionId", "ClientSessionStatusFilter", "NextToken", "Limit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AuxproxyService.DescribeClientSessionsResponse), global::AuxproxyService.DescribeClientSessionsResponse.Parser, new[]{ "NextToken", "ClientSession", "Error" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AuxproxyService.UpdateClientSessionCreationPolicyRequest), global::AuxproxyService.UpdateClientSessionCreationPolicyRequest.Parser, new[]{ "ServerSessionId", "NewClientSessionCreationPolicy" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AuxproxyService.TerminateServerSessionRequest), global::AuxproxyService.TerminateServerSessionRequest.Parser, new[]{ "ServerSessionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AuxproxyService.ProcessEndingRequest), global::AuxproxyService.ProcessEndingRequest.Parser, new[]{ "Pid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AuxproxyService.Error), global::AuxproxyService.Error.Parser, new[]{ "ErrorCode", "ErrorMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AuxproxyService.AuxProxyResponse), global::AuxproxyService.AuxProxyResponse.Parser, new[]{ "Error" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ProcessReadyRequest : pb::IMessage<ProcessReadyRequest> {
    private static readonly pb::MessageParser<ProcessReadyRequest> _parser = new pb::MessageParser<ProcessReadyRequest>(() => new ProcessReadyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProcessReadyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AuxproxyService.AuxproxyGrpcServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessReadyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessReadyRequest(ProcessReadyRequest other) : this() {
      logPathsToUpload_ = other.logPathsToUpload_.Clone();
      clientPort_ = other.clientPort_;
      grpcPort_ = other.grpcPort_;
      pid_ = other.pid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessReadyRequest Clone() {
      return new ProcessReadyRequest(this);
    }

    /// <summary>Field number for the "logPathsToUpload" field.</summary>
    public const int LogPathsToUploadFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_logPathsToUpload_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> logPathsToUpload_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LogPathsToUpload {
      get { return logPathsToUpload_; }
    }

    /// <summary>Field number for the "clientPort" field.</summary>
    public const int ClientPortFieldNumber = 2;
    private int clientPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientPort {
      get { return clientPort_; }
      set {
        clientPort_ = value;
      }
    }

    /// <summary>Field number for the "grpcPort" field.</summary>
    public const int GrpcPortFieldNumber = 3;
    private int grpcPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrpcPort {
      get { return grpcPort_; }
      set {
        grpcPort_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 4;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProcessReadyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProcessReadyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!logPathsToUpload_.Equals(other.logPathsToUpload_)) return false;
      if (ClientPort != other.ClientPort) return false;
      if (GrpcPort != other.GrpcPort) return false;
      if (Pid != other.Pid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= logPathsToUpload_.GetHashCode();
      if (ClientPort != 0) hash ^= ClientPort.GetHashCode();
      if (GrpcPort != 0) hash ^= GrpcPort.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      logPathsToUpload_.WriteTo(output, _repeated_logPathsToUpload_codec);
      if (ClientPort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ClientPort);
      }
      if (GrpcPort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GrpcPort);
      }
      if (Pid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Pid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += logPathsToUpload_.CalculateSize(_repeated_logPathsToUpload_codec);
      if (ClientPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientPort);
      }
      if (GrpcPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrpcPort);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProcessReadyRequest other) {
      if (other == null) {
        return;
      }
      logPathsToUpload_.Add(other.logPathsToUpload_);
      if (other.ClientPort != 0) {
        ClientPort = other.ClientPort;
      }
      if (other.GrpcPort != 0) {
        GrpcPort = other.GrpcPort;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            logPathsToUpload_.AddEntriesFrom(input, _repeated_logPathsToUpload_codec);
            break;
          }
          case 16: {
            ClientPort = input.ReadInt32();
            break;
          }
          case 24: {
            GrpcPort = input.ReadInt32();
            break;
          }
          case 32: {
            Pid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActivateServerSessionRequest : pb::IMessage<ActivateServerSessionRequest> {
    private static readonly pb::MessageParser<ActivateServerSessionRequest> _parser = new pb::MessageParser<ActivateServerSessionRequest>(() => new ActivateServerSessionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivateServerSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AuxproxyService.AuxproxyGrpcServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateServerSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateServerSessionRequest(ActivateServerSessionRequest other) : this() {
      serverSessionId_ = other.serverSessionId_;
      maxClients_ = other.maxClients_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateServerSessionRequest Clone() {
      return new ActivateServerSessionRequest(this);
    }

    /// <summary>Field number for the "serverSessionId" field.</summary>
    public const int ServerSessionIdFieldNumber = 1;
    private string serverSessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerSessionId {
      get { return serverSessionId_; }
      set {
        serverSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxClients" field.</summary>
    public const int MaxClientsFieldNumber = 2;
    private int maxClients_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxClients {
      get { return maxClients_; }
      set {
        maxClients_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivateServerSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivateServerSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerSessionId != other.ServerSessionId) return false;
      if (MaxClients != other.MaxClients) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerSessionId.Length != 0) hash ^= ServerSessionId.GetHashCode();
      if (MaxClients != 0) hash ^= MaxClients.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerSessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerSessionId);
      }
      if (MaxClients != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxClients);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerSessionId);
      }
      if (MaxClients != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxClients);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivateServerSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServerSessionId.Length != 0) {
        ServerSessionId = other.ServerSessionId;
      }
      if (other.MaxClients != 0) {
        MaxClients = other.MaxClients;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerSessionId = input.ReadString();
            break;
          }
          case 16: {
            MaxClients = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AcceptClientSessionRequest : pb::IMessage<AcceptClientSessionRequest> {
    private static readonly pb::MessageParser<AcceptClientSessionRequest> _parser = new pb::MessageParser<AcceptClientSessionRequest>(() => new AcceptClientSessionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcceptClientSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AuxproxyService.AuxproxyGrpcServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptClientSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptClientSessionRequest(AcceptClientSessionRequest other) : this() {
      serverSessionId_ = other.serverSessionId_;
      clientSessionId_ = other.clientSessionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptClientSessionRequest Clone() {
      return new AcceptClientSessionRequest(this);
    }

    /// <summary>Field number for the "serverSessionId" field.</summary>
    public const int ServerSessionIdFieldNumber = 1;
    private string serverSessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerSessionId {
      get { return serverSessionId_; }
      set {
        serverSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientSessionId" field.</summary>
    public const int ClientSessionIdFieldNumber = 2;
    private string clientSessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientSessionId {
      get { return clientSessionId_; }
      set {
        clientSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcceptClientSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcceptClientSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerSessionId != other.ServerSessionId) return false;
      if (ClientSessionId != other.ClientSessionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerSessionId.Length != 0) hash ^= ServerSessionId.GetHashCode();
      if (ClientSessionId.Length != 0) hash ^= ClientSessionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerSessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerSessionId);
      }
      if (ClientSessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientSessionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerSessionId);
      }
      if (ClientSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientSessionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcceptClientSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServerSessionId.Length != 0) {
        ServerSessionId = other.ServerSessionId;
      }
      if (other.ClientSessionId.Length != 0) {
        ClientSessionId = other.ClientSessionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerSessionId = input.ReadString();
            break;
          }
          case 18: {
            ClientSessionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveClientSessionRequest : pb::IMessage<RemoveClientSessionRequest> {
    private static readonly pb::MessageParser<RemoveClientSessionRequest> _parser = new pb::MessageParser<RemoveClientSessionRequest>(() => new RemoveClientSessionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveClientSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AuxproxyService.AuxproxyGrpcServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveClientSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveClientSessionRequest(RemoveClientSessionRequest other) : this() {
      serverSessionId_ = other.serverSessionId_;
      clientSessionId_ = other.clientSessionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveClientSessionRequest Clone() {
      return new RemoveClientSessionRequest(this);
    }

    /// <summary>Field number for the "serverSessionId" field.</summary>
    public const int ServerSessionIdFieldNumber = 1;
    private string serverSessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerSessionId {
      get { return serverSessionId_; }
      set {
        serverSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientSessionId" field.</summary>
    public const int ClientSessionIdFieldNumber = 2;
    private string clientSessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientSessionId {
      get { return clientSessionId_; }
      set {
        clientSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveClientSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveClientSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerSessionId != other.ServerSessionId) return false;
      if (ClientSessionId != other.ClientSessionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerSessionId.Length != 0) hash ^= ServerSessionId.GetHashCode();
      if (ClientSessionId.Length != 0) hash ^= ClientSessionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerSessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerSessionId);
      }
      if (ClientSessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientSessionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerSessionId);
      }
      if (ClientSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientSessionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveClientSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServerSessionId.Length != 0) {
        ServerSessionId = other.ServerSessionId;
      }
      if (other.ClientSessionId.Length != 0) {
        ClientSessionId = other.ClientSessionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerSessionId = input.ReadString();
            break;
          }
          case 18: {
            ClientSessionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientSession : pb::IMessage<ClientSession> {
    private static readonly pb::MessageParser<ClientSession> _parser = new pb::MessageParser<ClientSession>(() => new ClientSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AuxproxyService.AuxproxyGrpcServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSession(ClientSession other) : this() {
      clientSessionId_ = other.clientSessionId_;
      clientId_ = other.clientId_;
      serverSessionId_ = other.serverSessionId_;
      fleetId_ = other.fleetId_;
      ipAddress_ = other.ipAddress_;
      status_ = other.status_;
      creationTime_ = other.creationTime_;
      terminationTime_ = other.terminationTime_;
      port_ = other.port_;
      clientData_ = other.clientData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSession Clone() {
      return new ClientSession(this);
    }

    /// <summary>Field number for the "clientSessionId" field.</summary>
    public const int ClientSessionIdFieldNumber = 1;
    private string clientSessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientSessionId {
      get { return clientSessionId_; }
      set {
        clientSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientId" field.</summary>
    public const int ClientIdFieldNumber = 2;
    private string clientId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverSessionId" field.</summary>
    public const int ServerSessionIdFieldNumber = 3;
    private string serverSessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerSessionId {
      get { return serverSessionId_; }
      set {
        serverSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fleetId" field.</summary>
    public const int FleetIdFieldNumber = 4;
    private string fleetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FleetId {
      get { return fleetId_; }
      set {
        fleetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipAddress" field.</summary>
    public const int IpAddressFieldNumber = 5;
    private string ipAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "creationTime" field.</summary>
    public const int CreationTimeFieldNumber = 7;
    private string creationTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreationTime {
      get { return creationTime_; }
      set {
        creationTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "terminationTime" field.</summary>
    public const int TerminationTimeFieldNumber = 8;
    private string terminationTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TerminationTime {
      get { return terminationTime_; }
      set {
        terminationTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 9;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "clientData" field.</summary>
    public const int ClientDataFieldNumber = 10;
    private string clientData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientData {
      get { return clientData_; }
      set {
        clientData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientSessionId != other.ClientSessionId) return false;
      if (ClientId != other.ClientId) return false;
      if (ServerSessionId != other.ServerSessionId) return false;
      if (FleetId != other.FleetId) return false;
      if (IpAddress != other.IpAddress) return false;
      if (Status != other.Status) return false;
      if (CreationTime != other.CreationTime) return false;
      if (TerminationTime != other.TerminationTime) return false;
      if (Port != other.Port) return false;
      if (ClientData != other.ClientData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientSessionId.Length != 0) hash ^= ClientSessionId.GetHashCode();
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      if (ServerSessionId.Length != 0) hash ^= ServerSessionId.GetHashCode();
      if (FleetId.Length != 0) hash ^= FleetId.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (CreationTime.Length != 0) hash ^= CreationTime.GetHashCode();
      if (TerminationTime.Length != 0) hash ^= TerminationTime.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ClientData.Length != 0) hash ^= ClientData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientSessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientSessionId);
      }
      if (ClientId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientId);
      }
      if (ServerSessionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServerSessionId);
      }
      if (FleetId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FleetId);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IpAddress);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Status);
      }
      if (CreationTime.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CreationTime);
      }
      if (TerminationTime.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TerminationTime);
      }
      if (Port != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Port);
      }
      if (ClientData.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ClientData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientSessionId);
      }
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (ServerSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerSessionId);
      }
      if (FleetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FleetId);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (CreationTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreationTime);
      }
      if (TerminationTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TerminationTime);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (ClientData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientSession other) {
      if (other == null) {
        return;
      }
      if (other.ClientSessionId.Length != 0) {
        ClientSessionId = other.ClientSessionId;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      if (other.ServerSessionId.Length != 0) {
        ServerSessionId = other.ServerSessionId;
      }
      if (other.FleetId.Length != 0) {
        FleetId = other.FleetId;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.CreationTime.Length != 0) {
        CreationTime = other.CreationTime;
      }
      if (other.TerminationTime.Length != 0) {
        TerminationTime = other.TerminationTime;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ClientData.Length != 0) {
        ClientData = other.ClientData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientSessionId = input.ReadString();
            break;
          }
          case 18: {
            ClientId = input.ReadString();
            break;
          }
          case 26: {
            ServerSessionId = input.ReadString();
            break;
          }
          case 34: {
            FleetId = input.ReadString();
            break;
          }
          case 42: {
            IpAddress = input.ReadString();
            break;
          }
          case 50: {
            Status = input.ReadString();
            break;
          }
          case 58: {
            CreationTime = input.ReadString();
            break;
          }
          case 66: {
            TerminationTime = input.ReadString();
            break;
          }
          case 72: {
            Port = input.ReadInt32();
            break;
          }
          case 82: {
            ClientData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DescribeClientSessionsRequest : pb::IMessage<DescribeClientSessionsRequest> {
    private static readonly pb::MessageParser<DescribeClientSessionsRequest> _parser = new pb::MessageParser<DescribeClientSessionsRequest>(() => new DescribeClientSessionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DescribeClientSessionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AuxproxyService.AuxproxyGrpcServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DescribeClientSessionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DescribeClientSessionsRequest(DescribeClientSessionsRequest other) : this() {
      serverSessionId_ = other.serverSessionId_;
      clientId_ = other.clientId_;
      clientSessionId_ = other.clientSessionId_;
      clientSessionStatusFilter_ = other.clientSessionStatusFilter_;
      nextToken_ = other.nextToken_;
      limit_ = other.limit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DescribeClientSessionsRequest Clone() {
      return new DescribeClientSessionsRequest(this);
    }

    /// <summary>Field number for the "serverSessionId" field.</summary>
    public const int ServerSessionIdFieldNumber = 1;
    private string serverSessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerSessionId {
      get { return serverSessionId_; }
      set {
        serverSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientId" field.</summary>
    public const int ClientIdFieldNumber = 2;
    private string clientId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientSessionId" field.</summary>
    public const int ClientSessionIdFieldNumber = 3;
    private string clientSessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientSessionId {
      get { return clientSessionId_; }
      set {
        clientSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientSessionStatusFilter" field.</summary>
    public const int ClientSessionStatusFilterFieldNumber = 4;
    private string clientSessionStatusFilter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientSessionStatusFilter {
      get { return clientSessionStatusFilter_; }
      set {
        clientSessionStatusFilter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nextToken" field.</summary>
    public const int NextTokenFieldNumber = 5;
    private string nextToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextToken {
      get { return nextToken_; }
      set {
        nextToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 6;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DescribeClientSessionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DescribeClientSessionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerSessionId != other.ServerSessionId) return false;
      if (ClientId != other.ClientId) return false;
      if (ClientSessionId != other.ClientSessionId) return false;
      if (ClientSessionStatusFilter != other.ClientSessionStatusFilter) return false;
      if (NextToken != other.NextToken) return false;
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerSessionId.Length != 0) hash ^= ServerSessionId.GetHashCode();
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      if (ClientSessionId.Length != 0) hash ^= ClientSessionId.GetHashCode();
      if (ClientSessionStatusFilter.Length != 0) hash ^= ClientSessionStatusFilter.GetHashCode();
      if (NextToken.Length != 0) hash ^= NextToken.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerSessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerSessionId);
      }
      if (ClientId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientId);
      }
      if (ClientSessionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientSessionId);
      }
      if (ClientSessionStatusFilter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientSessionStatusFilter);
      }
      if (NextToken.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NextToken);
      }
      if (Limit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerSessionId);
      }
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (ClientSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientSessionId);
      }
      if (ClientSessionStatusFilter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientSessionStatusFilter);
      }
      if (NextToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextToken);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DescribeClientSessionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServerSessionId.Length != 0) {
        ServerSessionId = other.ServerSessionId;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      if (other.ClientSessionId.Length != 0) {
        ClientSessionId = other.ClientSessionId;
      }
      if (other.ClientSessionStatusFilter.Length != 0) {
        ClientSessionStatusFilter = other.ClientSessionStatusFilter;
      }
      if (other.NextToken.Length != 0) {
        NextToken = other.NextToken;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerSessionId = input.ReadString();
            break;
          }
          case 18: {
            ClientId = input.ReadString();
            break;
          }
          case 26: {
            ClientSessionId = input.ReadString();
            break;
          }
          case 34: {
            ClientSessionStatusFilter = input.ReadString();
            break;
          }
          case 42: {
            NextToken = input.ReadString();
            break;
          }
          case 48: {
            Limit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DescribeClientSessionsResponse : pb::IMessage<DescribeClientSessionsResponse> {
    private static readonly pb::MessageParser<DescribeClientSessionsResponse> _parser = new pb::MessageParser<DescribeClientSessionsResponse>(() => new DescribeClientSessionsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DescribeClientSessionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AuxproxyService.AuxproxyGrpcServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DescribeClientSessionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DescribeClientSessionsResponse(DescribeClientSessionsResponse other) : this() {
      nextToken_ = other.nextToken_;
      clientSession_ = other.clientSession_.Clone();
      error_ = other.error_ != null ? other.error_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DescribeClientSessionsResponse Clone() {
      return new DescribeClientSessionsResponse(this);
    }

    /// <summary>Field number for the "nextToken" field.</summary>
    public const int NextTokenFieldNumber = 1;
    private string nextToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextToken {
      get { return nextToken_; }
      set {
        nextToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientSession" field.</summary>
    public const int ClientSessionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AuxproxyService.ClientSession> _repeated_clientSession_codec
        = pb::FieldCodec.ForMessage(18, global::AuxproxyService.ClientSession.Parser);
    private readonly pbc::RepeatedField<global::AuxproxyService.ClientSession> clientSession_ = new pbc::RepeatedField<global::AuxproxyService.ClientSession>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AuxproxyService.ClientSession> ClientSession {
      get { return clientSession_; }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private global::AuxproxyService.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AuxproxyService.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DescribeClientSessionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DescribeClientSessionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NextToken != other.NextToken) return false;
      if(!clientSession_.Equals(other.clientSession_)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NextToken.Length != 0) hash ^= NextToken.GetHashCode();
      hash ^= clientSession_.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NextToken);
      }
      clientSession_.WriteTo(output, _repeated_clientSession_codec);
      if (error_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextToken);
      }
      size += clientSession_.CalculateSize(_repeated_clientSession_codec);
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DescribeClientSessionsResponse other) {
      if (other == null) {
        return;
      }
      if (other.NextToken.Length != 0) {
        NextToken = other.NextToken;
      }
      clientSession_.Add(other.clientSession_);
      if (other.error_ != null) {
        if (error_ == null) {
          Error = new global::AuxproxyService.Error();
        }
        Error.MergeFrom(other.Error);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NextToken = input.ReadString();
            break;
          }
          case 18: {
            clientSession_.AddEntriesFrom(input, _repeated_clientSession_codec);
            break;
          }
          case 26: {
            if (error_ == null) {
              Error = new global::AuxproxyService.Error();
            }
            input.ReadMessage(Error);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateClientSessionCreationPolicyRequest : pb::IMessage<UpdateClientSessionCreationPolicyRequest> {
    private static readonly pb::MessageParser<UpdateClientSessionCreationPolicyRequest> _parser = new pb::MessageParser<UpdateClientSessionCreationPolicyRequest>(() => new UpdateClientSessionCreationPolicyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateClientSessionCreationPolicyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AuxproxyService.AuxproxyGrpcServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClientSessionCreationPolicyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClientSessionCreationPolicyRequest(UpdateClientSessionCreationPolicyRequest other) : this() {
      serverSessionId_ = other.serverSessionId_;
      newClientSessionCreationPolicy_ = other.newClientSessionCreationPolicy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClientSessionCreationPolicyRequest Clone() {
      return new UpdateClientSessionCreationPolicyRequest(this);
    }

    /// <summary>Field number for the "serverSessionId" field.</summary>
    public const int ServerSessionIdFieldNumber = 1;
    private string serverSessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerSessionId {
      get { return serverSessionId_; }
      set {
        serverSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newClientSessionCreationPolicy" field.</summary>
    public const int NewClientSessionCreationPolicyFieldNumber = 2;
    private string newClientSessionCreationPolicy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewClientSessionCreationPolicy {
      get { return newClientSessionCreationPolicy_; }
      set {
        newClientSessionCreationPolicy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateClientSessionCreationPolicyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateClientSessionCreationPolicyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerSessionId != other.ServerSessionId) return false;
      if (NewClientSessionCreationPolicy != other.NewClientSessionCreationPolicy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerSessionId.Length != 0) hash ^= ServerSessionId.GetHashCode();
      if (NewClientSessionCreationPolicy.Length != 0) hash ^= NewClientSessionCreationPolicy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerSessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerSessionId);
      }
      if (NewClientSessionCreationPolicy.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NewClientSessionCreationPolicy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerSessionId);
      }
      if (NewClientSessionCreationPolicy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewClientSessionCreationPolicy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateClientSessionCreationPolicyRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServerSessionId.Length != 0) {
        ServerSessionId = other.ServerSessionId;
      }
      if (other.NewClientSessionCreationPolicy.Length != 0) {
        NewClientSessionCreationPolicy = other.NewClientSessionCreationPolicy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerSessionId = input.ReadString();
            break;
          }
          case 18: {
            NewClientSessionCreationPolicy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TerminateServerSessionRequest : pb::IMessage<TerminateServerSessionRequest> {
    private static readonly pb::MessageParser<TerminateServerSessionRequest> _parser = new pb::MessageParser<TerminateServerSessionRequest>(() => new TerminateServerSessionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TerminateServerSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AuxproxyService.AuxproxyGrpcServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerminateServerSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerminateServerSessionRequest(TerminateServerSessionRequest other) : this() {
      serverSessionId_ = other.serverSessionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerminateServerSessionRequest Clone() {
      return new TerminateServerSessionRequest(this);
    }

    /// <summary>Field number for the "serverSessionId" field.</summary>
    public const int ServerSessionIdFieldNumber = 1;
    private string serverSessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerSessionId {
      get { return serverSessionId_; }
      set {
        serverSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TerminateServerSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TerminateServerSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerSessionId != other.ServerSessionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerSessionId.Length != 0) hash ^= ServerSessionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerSessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerSessionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerSessionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TerminateServerSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServerSessionId.Length != 0) {
        ServerSessionId = other.ServerSessionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerSessionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProcessEndingRequest : pb::IMessage<ProcessEndingRequest> {
    private static readonly pb::MessageParser<ProcessEndingRequest> _parser = new pb::MessageParser<ProcessEndingRequest>(() => new ProcessEndingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProcessEndingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AuxproxyService.AuxproxyGrpcServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessEndingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessEndingRequest(ProcessEndingRequest other) : this() {
      pid_ = other.pid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessEndingRequest Clone() {
      return new ProcessEndingRequest(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProcessEndingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProcessEndingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProcessEndingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AuxproxyService.AuxproxyGrpcServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      errorCode_ = other.errorCode_;
      errorMsg_ = other.errorMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private string errorCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 2;
    private string errorMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMsg != other.ErrorMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode.Length != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ErrorCode);
      }
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
      }
      if (ErrorMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode.Length != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorMsg.Length != 0) {
        ErrorMsg = other.ErrorMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ErrorCode = input.ReadString();
            break;
          }
          case 18: {
            ErrorMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuxProxyResponse : pb::IMessage<AuxProxyResponse> {
    private static readonly pb::MessageParser<AuxProxyResponse> _parser = new pb::MessageParser<AuxProxyResponse>(() => new AuxProxyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuxProxyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AuxproxyService.AuxproxyGrpcServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuxProxyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuxProxyResponse(AuxProxyResponse other) : this() {
      error_ = other.error_ != null ? other.error_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuxProxyResponse Clone() {
      return new AuxProxyResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::AuxproxyService.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AuxproxyService.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuxProxyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuxProxyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuxProxyResponse other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          Error = new global::AuxproxyService.Error();
        }
        Error.MergeFrom(other.Error);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (error_ == null) {
              Error = new global::AuxproxyService.Error();
            }
            input.ReadMessage(Error);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
